[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "@twist/.external-ecmascript.js",
    "static": true,
    "longname": "@twist/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/PathUtils.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst template = require('babel-template');\nconst { addNamed } = require('babel-helper-module-imports');\n\nmodule.exports = class PathUtils {\n\n    /**\n     * Return the string name of the given element.\n     * @param {Path<JSXElement>} path\n     * @return {string}\n     */\n    static getJSXElementName(path) {\n        t.assertJSXElement(path.node);\n        const nameRoot = path.node.openingElement.name;\n        if (nameRoot.namespace) {\n            return nameRoot.namespace.name + ':' + nameRoot.name.name;\n        }\n        else {\n            return nameRoot.name;\n        }\n    }\n\n    static getJSXAttributeName(attr) {\n        t.assertJSXAttribute(attr);\n        if (attr.name.namespace) {\n            return attr.name.namespace.name + ':' + attr.name.name.name;\n        }\n        return attr.name.name;\n    }\n\n    static getAttribute(path, attributeName) {\n        t.assertJSXElement(path.node);\n        const attributes = path.node.openingElement.attributes;\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n            if (t.isJSXAttribute(attr) && this.getJSXAttributeName(attr) === attributeName) {\n                return attr;\n            }\n        }\n    }\n\n    static deleteAttribute(path, attributeName) {\n        t.assertJSXElement(path.node);\n        const attributes = path.node.openingElement.attributes;\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n            if (t.isJSXAttribute(attr) && this.getJSXAttributeName(attr) === attributeName) {\n                attributes.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    static getAttributeValue(path, attributeName) {\n        const attr = PathUtils.getAttribute(path, attributeName);\n        return attr && attr.value;\n    }\n\n    static addImportOnce(path, exportName, moduleName, options) {\n        const parent = path.scope.getProgramParent().path;\n        const importKey = exportName + '@' + moduleName;\n        let localName = parent.scope.getData(importKey);\n        if (!localName) {\n            localName = addNamed(path, exportName, moduleName, options);\n            parent.scope.setData(importKey, localName);\n        }\n        return localName;\n    }\n\n    /**\n     * Adds a new global symbol declaration.\n     *\n     * @param {Path} path\n     * @param {string} readableName The readable name of the variable holding the symbol.\n     * @return {Identifier} The identifier of the variable we just declared.\n     */\n    static addGlobalSymbol(path, readableName) {\n        const parent = path.scope.getProgramParent().path;\n        let declName = path.scope.generateUidIdentifier(readableName);\n        if (!parent.scope.hasGlobal('Symbol')) {\n            // We need to add Symbol as a global, otherwise it might not get imported properly\n            parent.scope.addGlobal(t.identifier('Symbol'));\n        }\n        parent.scope.push({ id: declName, init: template(`Symbol('${readableName}')`)().expression });\n        return declName;\n    }\n\n    /**\n     * Test whether \"this\" is defined for the given path - we walk up the parent functions, until we find a\n     * function that's not an arrow function (in which case this is defined), or we hit the program (in which\n     * case it isn't).\n     *\n     * @param {Path} path\n     * @return {Boolean} Whether or not the given path has a defined \"this\" context.\n     */\n    static hasThisContext(path) {\n        if (!path || path.isProgram()) {\n            return false;\n        }\n        if (path.isFunction() && !path.isArrowFunctionExpression()) {\n            return true;\n        }\n        return PathUtils.hasThisContext(path.getFunctionParent());\n    }\n\n    /**\n     * Push the given expression(s) to the start of the body of the given function. This handles arrow functions too\n     * (it converts the arrow function body to a block with a return statement, if it's an expression).\n     *\n     * @param {Path} path\n     * @return {Statement|Array.<Statement>} Statement(s) to push to the start of the function body.\n     */\n    static pushToFunctionBody(path, expressions) {\n        t.assertFunction(path.node);\n        let body = path.node.body;\n        if (!t.isBlockStatement(body)) {\n            // It must be an arrow function, if the body isn't a block (i.e. it's an expression)\n            // Convert it to a block with a return.\n            body = t.blockStatement([ t.returnStatement(body) ]);\n            path.node.body = body;\n        }\n        if (expressions instanceof Array) {\n            body.body = expressions.concat(body.body);\n        }\n        else {\n            body.body.unshift(expressions);\n        }\n    }\n\n    /**\n     * Given an array of [children of a JSX component], return an expression that represents the same children.\n     * For instance, the contents of a <repeat> might include multiple elements; they must be serialized into a format\n     * suitable as a return value within `collection.map()`. This is typically an array, but in cases where only a single\n     * element or text node is contained, we can just return that one item. When no items exist, returns a null expression.\n     *\n     * @param {Array<Node>} children\n     * @return {Expression}\n     */\n    static jsxChildrenToJS(children) {\n        if (!children) {\n            return t.nullLiteral();\n        }\n\n        children = children\n            .map(child => t.isJSXExpressionContainer(child) ? child.expression : child)\n            .filter(child => !(t.isJSXText(child) && /^\\s+$/.test(child.value)))\n            .map(child => t.isJSXText(child) ? t.stringLiteral(child.value.trim()) : child);\n\n        return (\n            children.length === 0 ? t.nullLiteral()\n                : children.length === 1 ? children[0]\n                    : t.arrayExpression(children)\n        );\n    }\n\n    /**\n     * If the parent element of the given `path` is a JSX Element, wrap `expression` in a JSXExpressionContainer (braces).\n     * @param {Path} path\n     * @param {Expression} expression\n     * @return {Expression}\n     */\n    static maybeWrapJSXExpression(path, expression) {\n        return t.isJSXElement(path.parent) ? t.jSXExpressionContainer(expression) : expression;\n    }\n\n    /**\n     * Return the class declaration of a path's parent class, if it has a decorator with the given name.\n     * This is often used to find a class with a specific decorator like @Component.\n     * @param {Path} path\n     * @param {string|regexp} decoratorName\n     * @return {Node<ClassDeclaration> | undefined}\n     */\n    static findParentClassWithDecorator(path, decoratorName) {\n        const classDeclarationPath = path.findParent(parent => t.isClassDeclaration(parent));\n        const matchesDecoratorName = name => {\n            if (decoratorName instanceof RegExp) {\n                return name.match(decoratorName) !== null;\n            }\n            return name === decoratorName;\n        };\n\n        // See if there's an @Component decorator:\n        const decorators = classDeclarationPath && classDeclarationPath.node.decorators;\n        const componentDecorator = decorators && decorators.find((d, index) => {\n            // First, see if there's an originalName for the decorator - a different transform could have renamed it.\n            let decoratorPath = classDeclarationPath.get('decorators.' + index);\n            let originalName = decoratorPath.getData('originalName');\n            if (originalName) {\n                return matchesDecoratorName(originalName);\n            }\n\n            // If the name didn't change, we check the actual name of the decorator\n            let expr = d.expression;\n            if (t.isCallExpression(expr)) {\n                // It could be a call expression, like @Component({ fork: true })\n                expr = expr.callee;\n            }\n            return expr && matchesDecoratorName(expr.name);\n        });\n        if (componentDecorator) {\n            return classDeclarationPath;\n        }\n    }\n\n    /**\n     * If the given path has an \"as\" attribute, this removes said attribute and converts it to an array of identifiers\n     * @param {Path} path\n     * @return {Array<Identifier> | undefined}\n     */\n    static stripAsIdentifiers(path) {\n        const asAttr = PathUtils.getAttributeValue(path, 'as');\n        if (!asAttr) {\n            return;\n        }\n\n        let args = t.isSequenceExpression(asAttr.expression) ? asAttr.expression.expressions : [ asAttr.expression ];\n\n        if (!args.every(t.isIdentifier)) {\n            PathUtils.warning(path, `Ignoring 'as' attribute that's not an identifier, or sequence of identifiers.`);\n            return;\n        }\n\n        this.deleteAttribute(path, 'as');\n        return args;\n    }\n\n    static warning(path, message) {\n        console.warn(`WARNING: ${message}\\n   at ${path.scope.hub.file.opts.filenameRelative}:${path.node.loc.start.line}`);\n    }\n\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/PathUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/PathUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "template",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~template",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/PathUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "addNamed",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~addNamed",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/PathUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/PathUtils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "getJSXElementName",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.getJSXElementName",
    "access": "public",
    "description": "Return the string name of the given element.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path<JSXElement>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getJSXAttributeName",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.getJSXAttributeName",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "attr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "getAttribute",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.getAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "deleteAttribute",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.deleteAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "getAttributeValue",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.getAttributeValue",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "addImportOnce",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.addImportOnce",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "exportName",
        "types": [
          "*"
        ]
      },
      {
        "name": "moduleName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addGlobalSymbol",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.addGlobalSymbol",
    "access": "public",
    "description": "Adds a new global symbol declaration.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "readableName",
        "description": "The readable name of the variable holding the symbol."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Identifier"
      ],
      "spread": false,
      "description": "The identifier of the variable we just declared."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "hasThisContext",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.hasThisContext",
    "access": "public",
    "description": "Test whether \"this\" is defined for the given path - we walk up the parent functions, until we find a\nfunction that's not an arrow function (in which case this is defined), or we hit the program (in which\ncase it isn't).",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether or not the given path has a defined \"this\" context."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "pushToFunctionBody",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.pushToFunctionBody",
    "access": "public",
    "description": "Push the given expression(s) to the start of the body of the given function. This handles arrow functions too\n(it converts the arrow function body to a block with a return statement, if it's an expression).",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Statement",
        "Array.<Statement>"
      ],
      "spread": false,
      "description": "Statement(s) to push to the start of the function body."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "jsxChildrenToJS",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.jsxChildrenToJS",
    "access": "public",
    "description": "Given an array of [children of a JSX component], return an expression that represents the same children.\nFor instance, the contents of a <repeat> might include multiple elements; they must be serialized into a format\nsuitable as a return value within `collection.map()`. This is typically an array, but in cases where only a single\nelement or text node is contained, we can just return that one item. When no items exist, returns a null expression.",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Node>"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "maybeWrapJSXExpression",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.maybeWrapJSXExpression",
    "access": "public",
    "description": "If the parent element of the given `path` is a JSX Element, wrap `expression` in a JSXExpressionContainer (braces).",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expression"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expression"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "findParentClassWithDecorator",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.findParentClassWithDecorator",
    "access": "public",
    "description": "Return the class declaration of a path's parent class, if it has a decorator with the given name.\nThis is often used to find a class with a specific decorator like @Component.",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "regexp"
        ],
        "spread": false,
        "optional": false,
        "name": "decoratorName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node<ClassDeclaration> ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "stripAsIdentifiers",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.stripAsIdentifiers",
    "access": "public",
    "description": "If the given path has an \"as\" attribute, this removes said attribute and converts it to an array of identifiers",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Identifier> ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "warning",
    "memberof": "@twist/babel-plugin-transform/src/PathUtils.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/PathUtils.js~exports.warning",
    "access": "public",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/Transformer.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst babylon = require('babylon');\nconst recast = require('recast');\nconst { transform } = require('babel-core');\n\nmodule.exports = class Transformer {\n\n    get _indexFile() {\n        return path.join(__dirname, 'index.js');\n    }\n\n    constructor(transformOptions) {\n        this.recastOptions = {\n            quote: 'single',\n            arrayBracketSpacing: true,\n            objectCurlySpacing: true,\n            parser: {\n                parse(code) {\n                    return babylon.parse(code, {\n                        sourceType: 'module',\n                        // Note: these are not the same as Babel plugins\n                        plugins: [\n                            'flow',\n                            'jsx',\n                            'asyncGenerators',\n                            'decorators',\n                            'classProperties',\n                            'doExpressions',\n                            'exportExtensions',\n                            'functionBind',\n                            'functionSent',\n                            'objectRestSpread',\n                            'dynamicImport'\n                        ]\n                    });\n                }\n            }\n        };\n\n        this.babelPlugins = [\n            require('babel-plugin-syntax-async-generators'),\n            require('babel-plugin-syntax-class-properties'),\n            require('babel-plugin-syntax-decorators'),\n            require('babel-plugin-syntax-do-expressions'),\n            require('babel-plugin-syntax-dynamic-import'),\n            require('babel-plugin-syntax-export-extensions'),\n            require('babel-plugin-syntax-flow'),\n            require('babel-plugin-syntax-function-bind'),\n            require('babel-plugin-syntax-function-sent'),\n            require('babel-plugin-syntax-jsx'),\n            require('babel-plugin-syntax-object-rest-spread'),\n            [ this._indexFile, transformOptions ]\n        ];\n    }\n\n    transformFile(fullPath, root) {\n        return transform(fs.readFileSync(fullPath), {\n            babelrc: false,\n            filename: fullPath,\n            filenameRelative: root && path.relative(root, fullPath),\n            plugins: this.babelPlugins,\n            parserOpts: {\n                parser: (code) => {\n                    return recast.parse(code, this.recastOptions);\n                }\n            },\n            generatorOpts: {\n                generator: (x) => recast.print(x, this.recastOptions)\n            },\n        }).code;\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/Transformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "fs",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~fs",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "babylon",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~babylon",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "recast",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~recast",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "transform",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~transform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "_indexFile",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports#_indexFile",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "recastOptions",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports#recastOptions",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"quote\": string, \"arrayBracketSpacing\": boolean, \"objectCurlySpacing\": boolean, \"parser\": *}"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "babelPlugins",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports#babelPlugins",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "transformFile",
    "memberof": "@twist/babel-plugin-transform/src/Transformer.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/Transformer.js~exports#transformFile",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "fullPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "root",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst upperCaseReplacementFn = (match, x) => x.toUpperCase();\n\n/**\n * Convert a potentially-hyphenated string into camelCase,\n * as used conventionally when writing JSX attributes. This does _not_\n * convert other word separators, such as underscores or spaces.\n *\n * Example:\n *\n *     camelCaseHyphens(\"some-attribute\") === \"someAttribute\"\n *     camelCaseHyphens(\"-webkit-animation\") === \"WebkitAnimation\"\n *     camelCaseHyphens(\"under_score\") === \"under_score\"\n *\n * @param str\n */\nfunction camelCaseHyphens(str) {\n    return str.replace(/-+([^-]?)/g, upperCaseReplacementFn);\n}\n\nmodule.exports = camelCaseHyphens;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "upperCaseReplacementFn",
    "memberof": "@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/camelCaseHyphens.js~upperCaseReplacementFn",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "camelCaseHyphens",
    "memberof": "@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/camelCaseHyphens.js~camelCaseHyphens",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/camelCaseHyphens.js",
    "importStyle": null,
    "description": "Convert a potentially-hyphenated string into camelCase,\nas used conventionally when writing JSX attributes. This does _not_\nconvert other word separators, such as underscores or spaces.\n\nExample:\n\n    camelCaseHyphens(\"some-attribute\") === \"someAttribute\"\n    camelCaseHyphens(\"-webkit-animation\") === \"WebkitAnimation\"\n    camelCaseHyphens(\"under_score\") === \"under_score\"",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst ComponentImportTransform = require('./transforms/ComponentImportTransform');\nconst DecoratorImportTransform = require('./transforms/DecoratorImportTransform');\n\nconst OPTIONS = {\n    autoImport: {}\n};\n\nfunction normalizeOptions(opts = {}) {\n    return Object.assign({}, OPTIONS, opts);\n}\n\nmodule.exports = () => {\n    return {\n        visitor: {\n            Program(path, state) {\n                const options = state.opts = normalizeOptions(state.opts);\n                const decoratorTransform = new DecoratorImportTransform(options.autoImport);\n\n                // Any plugins which need to run first-ish (before common transpilations) need to traverse the Program\n                // node here. Otherwise, other plugins that run in-between these might lose some of the source-code\n                // context that we need to apply our own transformations (e.g. arrow functions becoming normal functions\n                // without accompanying AST information, or decorators being transpiled out).\n                path.traverse({\n                    ['ClassExpression|ClassDeclaration|ClassProperty|Method'](path) {\n                        decoratorTransform.apply(path);\n                    },\n                });\n            },\n\n            JSXElement(path, state) {\n                const options = state.opts = normalizeOptions(state.opts);\n                new ComponentImportTransform(options.autoImport).apply(path, state);\n            }\n        }\n    };\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ComponentImportTransform",
    "memberof": "@twist/babel-plugin-transform/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/index.js~ComponentImportTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "DecoratorImportTransform",
    "memberof": "@twist/babel-plugin-transform/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/index.js~DecoratorImportTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "OPTIONS",
    "memberof": "@twist/babel-plugin-transform/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/index.js~OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"autoImport\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "normalizeOptions",
    "memberof": "@twist/babel-plugin-transform/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/index.js~normalizeOptions",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst PathUtils = require('../PathUtils');\nconst t = require('babel-types');\n\nconst IGNORED_COMPONENTS = new Set([ 'repeat', 'g', 'if', 'elseif', 'else', 'using', 'unless', 'svg', 'iframe', 'object', 'embed' ]);\n\n/**\n * Using item definitions from the configuration, automatically import declarations for JSX elements\n * and/or decorators.\n */\nmodule.exports = class ComponentImportTransform {\n\n    constructor(definitions) {\n        this.definitions = {};\n        for (let name in definitions) {\n            let dec = definitions[name];\n            this.definitions[name] = {\n                module: dec.module || dec.classPath || dec.path || dec,\n                export: dec.export || 'default'\n            };\n        }\n    }\n\n    apply(path) {\n        if (!t.isJSXElement(path)) {\n            return;\n        }\n        const elementName = PathUtils.getJSXElementName(path);\n        if (IGNORED_COMPONENTS.has(elementName)) {\n            return;\n        }\n        const def = this.definitions[elementName];\n        if (!def) {\n            return;\n        }\n        const localName = PathUtils.addImportOnce(path, def.export, def.module).name;\n        path.node.openingElement.name = t.jSXIdentifier(localName);\n        if (path.node.closingElement) {\n            path.node.closingElement.name = t.jSXIdentifier(localName);\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "IGNORED_COMPONENTS",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~IGNORED_COMPONENTS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js",
    "importStyle": null,
    "description": "Using item definitions from the configuration, automatically import declarations for JSX elements\nand/or decorators.",
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "definitions",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports",
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports#definitions",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/ComponentImportTransform.js~exports#apply",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst PathUtils = require('../PathUtils');\nconst t = require('babel-types');\n\nmodule.exports = class DecoratorImporter {\n\n    /**\n     * @typedef {object} DecoratorDefinition\n     * @property {string} module\n     *   The module from which to import the decorator.\n     * @property {string?} export\n     *   The export name from `module`; if not provided, \"default\" is assumed.\n     * @property {{ module: string, export: string }} inherits\n     *   If provided, import the superclass defined by module/export and make the decorated class inherit from it.\n     * @property {boolean?} needsClassName\n     *   If true, the name of the class will be passed as the first extra argument to the decorator (after `target`).\n     * @property {boolean?} interceptsSuper\n     *   If true, add a class in between the given class and its superclass. (Used to dynamically\n     *   insert methods into the class.)\n     * @property {string?} hotReload\n     *   If true, insert the HotReload decorator from this path (used by @Component).\n     *\n     * For legacy reasons, the following variants are supported:\n     *   - `inherits` may be a string (implies `{ module: ___, export: 'default' }`).\n     *   - A plain string, or a definition containing `classPath` or `path`, will be converted properly.\n     */\n\n    /**\n     * Load a bunch of decorator definitions.\n     * @param {{ decoratorName: DecoratorDefinition }} definitions\n     */\n    constructor(definitions) {\n        this.definitions = {};\n        for (let name in definitions) {\n            let dec = definitions[name];\n            this.definitions[name] = {\n                module: dec.module || dec.classPath || dec.path || dec,\n                export: dec.export || 'default',\n                inherits: typeof dec.inherits === 'string' ? { module: dec.inherits, export: 'default' } : dec.inherits,\n                needsClassName: dec.needsClassName,\n                interceptsSuper: dec.interceptsSuper,\n                hotReload: dec.hotReload,\n            };\n        }\n    }\n\n    /**\n     * Automatically import decorators referenced from this file, matching the provided definitions.\n     */\n    apply(path) {\n        if (path.node.decorators) {\n            path.node.decorators.forEach((decorator, index) => {\n                this.visitDecorator(path.get('decorators.' + index), path);\n            });\n        }\n    }\n\n    /** Sanity-check the syntax of decorator import definitions. */\n    assertDefinitionFormat(def, decoratorName) {\n        if (!def || !def.module || !def.export) {\n            throw new Error(`DecoratorImporter received an invalid definition for @${decoratorName\n            }. Expected an object with \"module\" and \"export\" string keys; got ${JSON.stringify(def)}`);\n        }\n        if (def.inherits) {\n            if (!def.inherits.module || !def.inherits.export) {\n                throw new Error(`DecoratorImporter received an invalid definition for @${decoratorName\n                }'s \"inherits\" property. Expected an object with \"module\" and \"export\"; got ${JSON.stringify(def)}`);\n            }\n        }\n    }\n\n    /** Given this decorator, automatically import the necessary module(s). */\n    visitDecorator(decoratorPath, path) {\n        const decorator = decoratorPath.node;\n        const identifier = DecoratorImporter.getLeftmostIdentifier(decorator.expression);\n\n        // First, check that the decorator isn't already imported\n        if (decoratorPath.scope.hasBinding(identifier.name)) {\n            return;\n        }\n\n        // Look up the decorator to see if it should be imported automatically\n        const def = this.definitions[identifier.name];\n        if (!def) {\n            // A decorator with no definition. This is fine; they might have imported a decorator manually.\n            return;\n        }\n        this.assertDefinitionFormat(def, identifier.name);\n\n        // Change the name to the import, but also remember the original name - because some of the other transforms may need to know this!\n        decoratorPath.setData('originalName', identifier.name);\n        identifier.name = PathUtils.addImportOnce(path, def.export, def.module).name;\n\n        const className = t.isClass(path.node) && path.node.id.name;\n\n        if (def.inherits && !path.node.superClass) {\n            path.node.superClass = PathUtils.addImportOnce(path, def.inherits.export, def.inherits.module);\n        }\n\n        if (def.needsClassName) {\n            if (!t.isCallExpression(decorator.expression)) {\n                decorator.expression = t.callExpression(decorator.expression, []);\n            }\n            decorator.expression.arguments.unshift(t.stringLiteral(className));\n        }\n        if (def.hotReload && className) {\n            decorator.expression = t.callExpression(PathUtils.addImportOnce(path, 'default', def.hotReload),\n                [ decorator.expression, t.identifier('module'), t.stringLiteral(className) ]);\n        }\n        if (def.interceptsSuper) {\n            // We need to put an empty class between this class and it's parent. That's needed for classes like import that will use\n            // the intercept class to inject more methods as they are received from a different thread.\n            const oldSuperClass = path.node.superClass;\n            path.node.superClass = path.scope.generateUidIdentifier(className + 'SuperIntercept');\n\n            // Queue the new class for conversion.\n            path.requeue(path.getStatementParent().insertBefore([ t.classDeclaration(path.node.superClass, oldSuperClass, t.classBody([]), []) ])[0]);\n        }\n    }\n\n    /** Given a decorator expression, find the root identifier -- the one we want to import. */\n    static getLeftmostIdentifier(node) {\n        switch (node.type) {\n        case 'CallExpression': return DecoratorImporter.getLeftmostIdentifier(node.callee);\n        case 'ArrayExpression': return DecoratorImporter.getLeftmostIdentifier(node.elements[0]);\n        case 'MemberExpression': return DecoratorImporter.getLeftmostIdentifier(node.object);\n        case 'Identifier': return node;\n        default: throw new Error(`DecoratorImporter.getLeftmostIdentifier() doesn't know what '${node.type}' is.`);\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "typedef",
    "name": "DecoratorDefinition",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~DecoratorDefinition",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "The module from which to import the decorator."
      },
      {
        "nullable": null,
        "types": [
          "string?"
        ],
        "spread": false,
        "optional": false,
        "name": "export",
        "description": "The export name from `module`; if not provided, \"default\" is assumed."
      },
      {
        "nullable": null,
        "types": [
          "{ module: string, export: string }"
        ],
        "spread": false,
        "optional": false,
        "name": "inherits",
        "description": "If provided, import the superclass defined by module/export and make the decorated class inherit from it."
      },
      {
        "nullable": null,
        "types": [
          "boolean?"
        ],
        "spread": false,
        "optional": false,
        "name": "needsClassName",
        "description": "If true, the name of the class will be passed as the first extra argument to the decorator (after `target`)."
      },
      {
        "nullable": null,
        "types": [
          "boolean?"
        ],
        "spread": false,
        "optional": false,
        "name": "interceptsSuper",
        "description": "If true, add a class in between the given class and its superclass. (Used to dynamically\n  insert methods into the class.)"
      },
      {
        "nullable": null,
        "types": [
          "string?"
        ],
        "spread": false,
        "optional": false,
        "name": "hotReload",
        "description": "If true, insert the HotReload decorator from this path (used by @Component).\n\nFor legacy reasons, the following variants are supported:\n  - `inherits` may be a string (implies `{ module: ___, export: 'default' }`).\n  - A plain string, or a definition containing `classPath` or `path`, will be converted properly."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "DecoratorDefinition"
    }
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports#constructor",
    "access": "public",
    "description": "Load a bunch of decorator definitions.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ decoratorName: DecoratorDefinition }"
        ],
        "spread": false,
        "optional": false,
        "name": "definitions",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "definitions",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports#definitions",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports#apply",
    "access": "public",
    "description": "Automatically import decorators referenced from this file, matching the provided definitions.",
    "lineNumber": 62,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "assertDefinitionFormat",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports#assertDefinitionFormat",
    "access": "public",
    "description": "Sanity-check the syntax of decorator import definitions.",
    "lineNumber": 71,
    "params": [
      {
        "name": "def",
        "types": [
          "*"
        ]
      },
      {
        "name": "decoratorName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "visitDecorator",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports#visitDecorator",
    "access": "public",
    "description": "Given this decorator, automatically import the necessary module(s).",
    "lineNumber": 85,
    "params": [
      {
        "name": "decoratorPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getLeftmostIdentifier",
    "memberof": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform.js~exports.getLeftmostIdentifier",
    "access": "public",
    "description": "Given a decorator expression, find the root identifier -- the one we want to import.",
    "lineNumber": 134,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/Transformer.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst path = require('path');\nconst BaseTransformer = require('@twist/babel-plugin-transform/src/Transformer');\n\nmodule.exports = class Transformer extends BaseTransformer {\n\n    get _indexFile() {\n        return path.join(__dirname, 'index.js');\n    }\n\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/Transformer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/babel-plugin-transform-react/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/Transformer.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "BaseTransformer",
    "memberof": "@twist/babel-plugin-transform-react/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/Transformer.js~BaseTransformer",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/Transformer.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/Transformer.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/Transformer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseTransformer"
    ],
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "get",
    "name": "_indexFile",
    "memberof": "@twist/babel-plugin-transform-react/src/Transformer.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/Transformer.js~exports#_indexFile",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst ControlFlowTransform = require('./transforms/ControlFlowTransform');\nconst ConstructorPropsTransform = require('./transforms/ConstructorPropsTransform');\nconst StyleAttributeTransform = require('./transforms/StyleAttributeTransform');\nconst ClassAttributeTransform = require('./transforms/ClassAttributeTransform');\nconst RefAttributeTransform = require('./transforms/RefAttributeTransform');\nconst AsAttributeTransform = require('./transforms/AsAttributeTransform');\nconst BindAttributeTransform = require('./transforms/BindAttributeTransform');\nconst NamedChildrenTransform = require('./transforms/NamedChildrenTransform');\nconst ComponentImportTransform = require('@twist/babel-plugin-transform/src/transforms/ComponentImportTransform');\nconst DecoratorImportTransform = require('@twist/babel-plugin-transform/src/transforms/DecoratorImportTransform');\nconst ArrowLiftingTransform = require('./transforms/ArrowLiftingTransform');\n\nconst OPTIONS = {\n    refAttribute: true,\n    constructorProps: true,\n    styleAttribute: true,\n    classAttribute: true,\n    controlFlow: true,\n    namedChildren: true,\n    asAttribute: true,\n    bindAttribute: true,\n    arrowLifting: true,\n    autoImport: {},\n    moduleName: '@twist/babel-plugin-transform-react',\n};\n\nmodule.exports = () => ({\n    visitor: {\n        Program(path, state) {\n            const options = state.opts = Object.assign({}, OPTIONS, state.opts);\n            // Any plugins which need to run first-ish (before common transpilations) need to traverse the Program\n            // node here. Otherwise, other plugins that run in-between these might lose some of the source-code\n            // context that we need to apply our own transformations (e.g. arrow functions becoming normal functions\n            // without accompanying AST information, or decorators being transpiled out).\n            // Since we're a layer on top of several ES6 features, we'll just run everything here first.\n            path.traverse(programVisitor(path, state, options), state);\n        }\n    }\n});\n\n\nconst programVisitor = (path, state, options) => ({\n\n    ['ClassExpression|ClassDeclaration|ClassProperty|Method'](path) {\n        const decoratorTransform = new DecoratorImportTransform(options.autoImport);\n        decoratorTransform.apply(path);\n    },\n\n    ClassMethod(path, state) {\n        if (options.constructorProps) {\n            ConstructorPropsTransform.apply(path, state);\n        }\n    },\n\n    JSXElement(path, state) {\n        if (options.styleAttribute) {\n            StyleAttributeTransform.apply(path, state);\n        }\n\n        if (options.classAttribute) {\n            ClassAttributeTransform.apply(path, state);\n        }\n\n        if (options.refAttribute) {\n            RefAttributeTransform.apply(path, state);\n        }\n\n        if (options.bindAttribute) {\n            BindAttributeTransform.apply(path, state);\n        }\n\n        if (options.arrowLifting) {\n            ArrowLiftingTransform.apply(path, state);\n        }\n\n        if (options.autoImport) {\n            new ComponentImportTransform(options.autoImport).apply(path, state);\n        }\n\n        // This must go after auto-import, because we only hoist children that aren't already imported\n        if (options.namedChildren) {\n            if (NamedChildrenTransform.apply(path, state)) {\n                // If we hoist the element, don't continue!\n                return;\n            }\n        }\n\n        // This must go last, because it might transform the element into something else.\n        let transformedControlFlow = false;\n        if (options.controlFlow) {\n            transformedControlFlow = ControlFlowTransform.apply(path, state);\n        }\n\n        // Handles 'as' on a normal component (converting children to a function). Note that this\n        // has to happen after the control flow transform, because 'as' on a repeat/using is treated\n        // differently.\n        if (!transformedControlFlow && options.asAttribute) {\n            AsAttributeTransform.apply(path, state);\n        }\n    }\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "ControlFlowTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~ControlFlowTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "ConstructorPropsTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~ConstructorPropsTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "StyleAttributeTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~StyleAttributeTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "ClassAttributeTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~ClassAttributeTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "RefAttributeTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~RefAttributeTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "AsAttributeTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~AsAttributeTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "BindAttributeTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~BindAttributeTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "NamedChildrenTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~NamedChildrenTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "ComponentImportTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~ComponentImportTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "DecoratorImportTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~DecoratorImportTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "ArrowLiftingTransform",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~ArrowLiftingTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "OPTIONS",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"refAttribute\": boolean, \"constructorProps\": boolean, \"styleAttribute\": boolean, \"classAttribute\": boolean, \"controlFlow\": boolean, \"namedChildren\": boolean, \"asAttribute\": boolean, \"bindAttribute\": boolean, \"arrowLifting\": boolean, \"autoImport\": *, \"moduleName\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "programVisitor",
    "memberof": "@twist/babel-plugin-transform-react/src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/index.js~programVisitor",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/runtime/classes.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nmodule.exports = function classes(expressions) {\n    var classes = [], expr, key;\n    for (var i = 0, len = expressions.length; i < len; i++) {\n        expr = expressions[i];\n        if (Array.isArray(expr)) {\n            classes = classes.concat(expr);\n        }\n        else if (typeof expr === 'string') {\n            classes.push(expr);\n        }\n        else {\n            for (key in expr) {\n                if (expr[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    }\n    return classes.filter(Boolean).join(' ');\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/runtime/classes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/runtime/classes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/runtime/classes.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/runtime/classes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "expressions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nfunction camelCase(str) {\n    return str.replace(/-+([^-]?)/g, function(match, x) {\n        return x.toUpperCase();\n    });\n}\n\nfunction mergeStyleIntoObject(value, obj) {\n    if (typeof value === 'string') {\n        // NOTE: The implementation here is designed to facilitate legacy code that declares inline styles as strings;\n        // it does not implement the complete CSS parsing specification. In practice, this implementation covers nearly\n        // all cases, including \"data:\" URI values that would otherwise break when splitting on semicolons only. In the\n        // future, we could explore adding a compliant parser. We would need two variants: one that runs at\n        // compile-time, and one that is used in the browser. The browser implementation would be straightforward, using\n        // an element's style attribute as a conversion interface. For the compiler, as of this writing (Jan 2018), a\n        // cursory search doesn't reveal any lightweight more-compliant parsers; it's likely we'd need to use postcss.\n        value.split(/;(?!base64)/g).forEach(function(item) {\n            const colonIndex = item.indexOf(':');\n            if (colonIndex !== -1) {\n                const key = item.slice(0, colonIndex).trim();\n                const value = item.slice(colonIndex + 1).trim();\n                obj[camelCase(key)] = value;\n            }\n        });\n    }\n    else if (value) {\n        for (let key in value) {\n            obj[camelCase(key)] = value[key];\n        }\n    }\n}\n\n/**\n * Merge all arguments into one style object. Strings are converted to style objects; object keys are camelCased.\n * If only one string was provided, and it doesn't look like a CSS string, we'll return the string directly.\n * @param {...string|object} values\n * @return {object|string}\n */\nmodule.exports = function styles(...values) {\n    // Special case: If only one value was provided, and it doesn't look like a CSS string, we'll assume that it's\n    // a custom attribute, and pass it through as a string directly.\n    // (e.g. react-intl, which uses style=\"somestring\" in a non-CSS context)\n    if (values.length === 1 && typeof values[0] === 'string' && values[0].indexOf(':') === -1) {\n        return values[0];\n    }\n    let resultObject = {};\n    for (let i = 0, len = values.length; i < len; i++) {\n        mergeStyleIntoObject(values[i], resultObject);\n    }\n    return resultObject;\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "camelCase",
    "memberof": "@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/runtime/styles.js~camelCase",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "mergeStyleIntoObject",
    "memberof": "@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/runtime/styles.js~mergeStyleIntoObject",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/runtime/styles.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/runtime/styles.js",
    "importStyle": null,
    "description": "Merge all arguments into one style object. Strings are converted to style objects; object keys are camelCased.\nIf only one string was provided, and it doesn't look like a CSS string, we'll return the string directly.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string",
          "object"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object",
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\nconst template = require('babel-template');\n\nconst hoistTemplate = template(`this[NAME] = this[NAME] || FN;`);\nconst replaceTemplate = template(`this[NAME]`);\n\n/**\n * Detect an attributes that have arrow functions, and lift them to the parent block\n * This ensures that we only create the closure for the event handler once (which is\n * more efficient than having the event handler be recreated on every render).\n */\nmodule.exports = class ArrowLiftingTransform {\n    static apply(path) {\n        const attributes = path.node.openingElement.attributes;\n        const parentFunction = path.getFunctionParent();\n\n        // We need to be inside a function - if it's static, hoisting doesn't make any sense\n        if (!PathUtils.hasThisContext(parentFunction)) {\n            return;\n        }\n\n        let modified = false;\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n            if (t.isJSXExpressionContainer(attr.value) && t.isArrowFunctionExpression(attr.value.expression)) {\n\n                // Need to check that it doesn't reference any variables within the function it's in,\n                // because we want to hoist the function out of the attribute, and it needs to be safe to do so!\n                // We traverse the body to inspect its identifiers.\n                //let params = attr.value.expression.params.filter(t.isIdentifier).map(param => param.name);\n                let body = path.get('openingElement.attributes.' + i + '.value.expression.body');\n                let canHoist = true;\n                body.traverse({\n                    ReferencedIdentifier(identifier) {\n                        let name = identifier.node.name;\n\n                        // If the variable is bound inside the arrow function (including as a param), or if it's\n                        // bound outside of the parent block containing the JSX, it's safe to hoist.\n                        // So we just check for identifiers that are in the middle of these scopes (e.g. if you\n                        // depend on a variable inside the render function, this isn't safe because it will vary\n                        // each time the render happens).\n                        if (path.scope.hasBinding(name) && !parentFunction.scope.parent.hasBinding(name)) {\n                            canHoist = false;\n                        }\n                    }\n                });\n\n                // We don't transform if there are any identifiers that would make it unsafe to do so.\n                if (!canHoist) {\n                    continue;\n                }\n\n                // We create a new symbol for storing the function on the instance, so we don't recreate it.\n                let symbolName = PathUtils.addGlobalSymbol(path, 'handler');\n\n                PathUtils.pushToFunctionBody(parentFunction, hoistTemplate({ NAME: symbolName, FN: attr.value.expression }));\n                attr.value.expression = replaceTemplate({ NAME: symbolName }).expression;\n                modified = true;\n            }\n        }\n\n        // Since we hoisted some stuff to the parent block, we need to queue this to be visited again\n        if (modified) {\n            parentFunction.requeue();\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "template",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~template",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "hoistTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~hoistTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "replaceTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~replaceTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js",
    "importStyle": null,
    "description": "Detect an attributes that have arrow functions, and lift them to the parent block\nThis ensures that we only create the closure for the event handler once (which is\nmore efficient than having the event handler be recreated on every render).",
    "lineNumber": 26,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ArrowLiftingTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\n\nmodule.exports = class AsAttributeTransform {\n    static apply(path) {\n        const args = PathUtils.stripAsIdentifiers(path);\n        if (!args || !path.node.children) {\n            return;\n        }\n\n        // We replace <MyComponent as={ x, y }>...</MyComponent> with <MyComponent>(x,y) => ...</MyComponent>\n        path.node.children = [ t.arrowFunctionExpression(args, PathUtils.jsxChildrenToJS(path.node.children)) ];\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/AsAttributeTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\nconst template = require('babel-template');\n\nconst checkedTemplate = template(`() => VAR = !VAR`);\nconst valueTemplate = template(`ev => VAR = ev.target.value`);\nconst customTemplate = template(`val => VAR = val`);\n\nconst getCustomEventName = name => 'on' + name.charAt(0).toUpperCase() + name.slice(1) + 'Change';\n\nmodule.exports = class BindAttributeTransform {\n    static apply(path) {\n        const jsxName = PathUtils.getJSXElementName(path);\n\n        // Check for certain special attributes on an input element (value, checked, indeterminate)\n        if (jsxName === 'input') {\n            let inputType = PathUtils.getAttributeValue(path, 'type');\n            inputType = inputType && inputType.value;\n\n            if (inputType === 'radio' || inputType === 'checkbox') {\n                this.transformBindAttr(path, 'checked', 'onChange', checkedTemplate);\n            }\n            else if (inputType !== 'submit' && inputType !== 'reset' && inputType !== 'button') {\n                // All the other input fields have a value attribute\n                this.transformBindAttr(path, 'value', 'onChange', valueTemplate);\n            }\n\n            // TODO: We don't handle indeterminate right now\n        }\n        else if (jsxName === 'select' || jsxName === 'textarea') {\n            this.transformBindAttr(path, 'value', 'onChange', valueTemplate);\n        }\n\n        // Handle any custom attributes\n        path.node.openingElement.attributes\n            .filter(attr => t.isJSXAttribute(attr) && attr.name.namespace && attr.name.namespace.name === 'bind')\n            .map(attr => this.transformBindAttr(path, attr.name.name.name, getCustomEventName(attr.name.name.name), customTemplate));\n    }\n\n    static transformBindAttr(path, attrName, eventName, eventTemplate) {\n        let bindAttrName = 'bind:' + attrName;\n        let bindAttr = PathUtils.getAttribute(path, bindAttrName);\n        if (!bindAttr) {\n            return;\n        }\n\n        let eventFunction = eventTemplate({ VAR: bindAttr.value.expression }).expression;\n\n        // Whatever happens, we want to remove the bind attribute\n        PathUtils.deleteAttribute(path, bindAttrName);\n\n        // Make sure there are no conflicting attributes\n        if (PathUtils.getAttribute(path, attrName)) {\n            PathUtils.warning(path, `Cannot use both ${bindAttrName} and ${attrName} attributes on the same element -\n                choose either one-way or two-way data binding!`);\n            return;\n        }\n        // If they already had an onChange handler, make our event handler call theirs as well.\n        if (PathUtils.getAttribute(path, eventName)) {\n            const existingHandler = PathUtils.getAttributeValue(path, eventName).expression;\n            if (t.isArrowFunctionExpression(existingHandler) && t.isAssignmentExpression(existingHandler.body)) {\n                PathUtils.warning(path, `It looks like you're using both ${bindAttrName} and ${eventName} to assign a value. `\n                    + `The 'bind:' attribute automatically adds an ${eventName} handler to save the value; doing both is redundant.`);\n            }\n            PathUtils.deleteAttribute(path, eventName);\n            eventFunction.body = t.sequenceExpression([ eventFunction.body, t.callExpression(existingHandler, eventFunction.params) ]);\n        }\n\n        // Check that it's an l-value (identifier or member expression)\n        if (!t.isJSXExpressionContainer(bindAttr.value)\n            && !t.isIdentifier(bindAttr.value.expression)\n            && !t.isMemberExpression(bindAttr.value.expression)) {\n            PathUtils.warning(path, `${bindAttrName} must be assignable for two-way data binding!`);\n            return;\n        }\n\n        let attributes = path.node.openingElement.attributes;\n\n        // Add the normal data binding (data in)\n        attributes.push(t.jSXAttribute(t.jSXIdentifier(attrName), t.jSXExpressionContainer(bindAttr.value.expression)));\n\n        // Add the event handler (data out)\n        attributes.push(t.jSXAttribute(t.jSXIdentifier(eventName), t.jSXExpressionContainer(eventFunction)));\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "template",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~template",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "checkedTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~checkedTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "valueTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~valueTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "customTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~customTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "getCustomEventName",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~getCustomEventName",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "transformBindAttr",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/BindAttributeTransform.js~exports.transformBindAttr",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "attrName",
        "types": [
          "*"
        ]
      },
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "eventTemplate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\n\nmodule.exports = class ClassAttributeTransform {\n    static apply(path, state) {\n        const attributes = path.node.openingElement.attributes;\n        const classExpressions = [];\n        let numSpreads = 0;\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n            if (t.isJSXAttribute(attr)) {\n                const name = PathUtils.getJSXAttributeName(attr);\n                const expr = t.isJSXExpressionContainer(attr.value) ? attr.value.expression : attr.value;\n                if (name === 'class' || name === 'className') {\n                    classExpressions.push(expr);\n                    attributes.splice(i--, 1);\n                }\n                else if (name.indexOf('class-') === 0) {\n                    const singleClassName = name.slice('class-'.length);\n                    attributes.splice(i--, 1);\n                    classExpressions.push(t.logicalExpression('&&', expr, t.stringLiteral(singleClassName)));\n                }\n            }\n            else if (t.isJSXSpreadAttribute(attr)) {\n                // There could be a className in the spread, so need to combine this too!\n                classExpressions.push(t.logicalExpression('||', t.memberExpression(attr.argument, t.identifier('className')), t.stringLiteral('')));\n                numSpreads++;\n            }\n        }\n\n        if (classExpressions.length && !(classExpressions.length === 1 && numSpreads === 1)) {\n            const runtimeTransformName = PathUtils.addImportOnce(path,\n                'default', `${state.opts.moduleName}/src/runtime/classes`, { nameHint: 'C' });\n            attributes.push(t.jSXAttribute(t.jSXIdentifier('className'),\n                t.jSXExpressionContainer(t.callExpression(runtimeTransformName, [ t.arrayExpression(classExpressions) ]))));\n        }\n    }\n\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ClassAttributeTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\n\n/**\n * Ensure any classes decorated with @Component have (props, context) as constructor arguments.\n */\nmodule.exports = class ConstructorPropsTransform {\n    static apply(path) {\n        // Abort if this isn't a constructor.\n        if (!(t.isClassMethod(path) && path.node.kind === 'constructor')) {\n            return;\n        }\n\n        // Abort if this class isn't decorated with a decorator that ends with Component (e.g. @Component or @VirtualComponent)\n        let classDeclaration = PathUtils.findParentClassWithDecorator(path, /Component$/);\n        if (!classDeclaration) {\n            return;\n        }\n\n        const className = classDeclaration.node.id.name;\n        const params = path.node.params;\n\n        // Components shouldn't have any arguments -- If they do, this is an error.\n        if (params.length > 0 && (params.length !== 2 || params[0].name !== 'props' || params[1].name !== 'context')) {\n            PathUtils.warning(path, `Class ${className}'s constructor must have two arguments: (props, context). `\n                + `You supplied ${params.length} arguments (${params.map(p => p.name).join(', ')}).`);\n        }\n        // Otherwise, update the method, and the super() expression, to have (props, context) arguments.\n        else {\n            path.node.params = [ t.identifier('props'), t.identifier('context') ];\n\n            const superExpression = path.node.body.body.find(\n                f => t.isExpressionStatement(f) && f.expression.callee && f.expression.callee.type === 'Super');\n\n            if (superExpression) {\n                superExpression.expression.arguments = path.node.params;\n            }\n            else {\n                // They didn't have a super expression? That's weird. It won't compile without one,\n                // so let's let something else trigger an error instead.\n            }\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js",
    "importStyle": null,
    "description": "Ensure any classes decorated with @Component have (props, context) as constructor arguments.",
    "lineNumber": 20,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ConstructorPropsTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\n\nmodule.exports = class ControlFlowTransform {\n\n    static apply(path) {\n        switch (PathUtils.getJSXElementName(path)) {\n        case 'if':\n        case 'unless':\n            this.transformIf(path);\n            break;\n        case 'elseif':\n        case 'else':\n            // We handle elseif/else cases within the if/unless blocks. Just remove them here.\n            path.remove();\n            break;\n        case 'repeat':\n            this.transformRepeat(path);\n            break;\n        case 'using':\n            this.transformUsing(path);\n            break;\n        case 'g':\n            this.transformGroup(path);\n            break;\n        default:\n            return false;\n        }\n        return true;\n    }\n\n    static transformIf(path) {\n        // Find the subsequent `elseif` and/or `if` blocks. If we encounter any other sibling JSXElement, stop searching.\n        let elsePath;\n        const conditionPaths = [ path ];\n        for (let i = path.key + 1, siblingPath; (siblingPath = path.getSibling(i)) && siblingPath.node; i++) {\n            if (siblingPath.node.type === 'JSXElement') {\n                const name = PathUtils.getJSXElementName(siblingPath);\n                if (name === 'elseif') {\n                    conditionPaths.push(siblingPath);\n                }\n                else if (name === 'else') {\n                    elsePath = siblingPath;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n\n        // Get the condition expression, and the children contents, for each case.\n        const cases = conditionPaths.map((path) => {\n            let condition = PathUtils.getAttributeValue(path, 'condition').expression;\n            if (path.node.openingElement.name.name === 'unless') {\n                condition = t.unaryExpression('!', condition);\n            }\n            return {\n                condition,\n                children: PathUtils.jsxChildrenToJS(path.node.children)\n            };\n        });\n\n        // In reverse order, merge the cases into a JS expression using ternary operators.\n        const expr = cases.reduceRight((expr, { condition, children }) => {\n            return t.conditionalExpression(condition, children, expr);\n        }, PathUtils.jsxChildrenToJS(elsePath && elsePath.node.children));\n\n        path.replaceWith(PathUtils.maybeWrapJSXExpression(path, expr));\n    }\n\n    static transformRepeat(path) {\n        // Grab the collection expression, such as `coll`, and the value expression, such as `(item, index)`,\n        // from either the `<repeat for={}>` syntax or the `<repeat collection={} as={}>` syntax.\n        let valueExpr, collExpr;\n        let forAttr = PathUtils.getAttributeValue(path, 'for');\n        if (forAttr) {\n            valueExpr = forAttr.expression.left;\n            collExpr = forAttr.expression.right;\n        }\n        else {\n            valueExpr = PathUtils.getAttributeValue(path, 'as').expression;\n            collExpr = PathUtils.getAttributeValue(path, 'collection').expression;\n        }\n\n        // If the user included the `index` attribute, we need two arguments to the `map` function.\n        let mapArgs = [];\n        if (t.isSequenceExpression(valueExpr)) {\n            mapArgs.push(valueExpr.expressions[0]);\n            mapArgs.push(valueExpr.expressions[1]);\n        }\n        else {\n            mapArgs.push(valueExpr);\n        }\n\n        // React expects a normal array to be returned; we'll use Torq's `mapToArray` if available,\n        // otherwise fall back to normal array `map`.\n        let mapMemberExpr = t.logicalExpression('||',\n            t.memberExpression(collExpr, t.identifier('mapToArray')),\n            t.memberExpression(collExpr, t.identifier('map')));\n\n        // Auto-add a key to the children, if it's a single child and it doesn't already have a key\n        let elements = path.node.children.filter(t.isJSXElement);\n        if (elements.length === 1) {\n            let attributes = elements[0].openingElement.attributes;\n            let hasKeyAttribute = attributes.some(attr => t.isJSXAttribute(attr) && attr.name && attr.name.name === 'key');\n            if (!hasKeyAttribute) {\n                // Make sure we have an index:\n                if (!mapArgs[1]) {\n                    mapArgs.push(t.identifier('index'));\n                }\n                // Add a key:\n                attributes.push(t.jSXAttribute(t.jSXIdentifier('key'), t.jSXExpressionContainer(mapArgs[1])));\n                PathUtils.warning(path, 'Added key={ index } attribute to contents of <repeat> - please update with a custom key based on item uniqueness.');\n            }\n        }\n\n        let expr = t.conditionalExpression(collExpr,\n            t.callExpression(t.memberExpression(mapMemberExpr, t.identifier('call')), [\n                collExpr,\n                t.arrowFunctionExpression(mapArgs, PathUtils.jsxChildrenToJS(path.node.children))\n            ]),\n            t.nullLiteral()\n        );\n\n        path.replaceWith(PathUtils.maybeWrapJSXExpression(path, expr));\n    }\n\n    static transformUsing(path) {\n        const valueExpr = PathUtils.getAttributeValue(path, 'value').expression;\n        const asName = PathUtils.getAttributeValue(path, 'as').expression;\n\n        // TODO: We could probably hoist the variable declaration up, and avoid the extra function call.\n        let expr = t.callExpression(t.arrowFunctionExpression([],\n            t.blockStatement([\n                t.variableDeclaration('const', [ t.variableDeclarator(asName, valueExpr) ]),\n                t.returnStatement(t.conditionalExpression(asName, PathUtils.jsxChildrenToJS(path.node.children), t.nullLiteral()))\n            ])\n        ), []);\n\n        path.replaceWith(PathUtils.maybeWrapJSXExpression(path, expr));\n    }\n\n    static transformGroup(path) {\n        // A <g> group can just be represented as an array (in React 16+).\n\n        // We add keys to each element in the group, otherwise React will complain.\n        let elements = path.node.children.filter(t.isJSXElement);\n        for (let i = 0; i < elements.length; i++) {\n            let attributes = elements[i].openingElement.attributes;\n            let hasKeyAttribute = attributes.some(attr => t.isJSXAttribute(attr) && attr.name && attr.name.name === 'key');\n            if (!hasKeyAttribute) {\n                attributes.push(t.jSXAttribute(t.jSXIdentifier('key'), t.stringLiteral(String(i))));\n            }\n        }\n\n        path.replaceWith(PathUtils.maybeWrapJSXExpression(path, PathUtils.jsxChildrenToJS(path.node.children)));\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "transformIf",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports.transformIf",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "transformRepeat",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports.transformRepeat",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "transformUsing",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports.transformUsing",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "transformGroup",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/ControlFlowTransform.js~exports.transformGroup",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst t = require('babel-types');\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\n\nmodule.exports = class NamedChildrenTransform {\n    static apply(path) {\n        t.assertJSXElement(path.node);\n        const nameRoot = path.node.openingElement.name;\n        if (!nameRoot.namespace || !t.isJSXElement(path.parent)) {\n            // Only hoist namespaced elements, and only if the parent is a JSX element\n            return false;\n        }\n\n        let attrName = nameRoot.namespace.name + '_' + nameRoot.name.name;\n        let parentAttrs = path.parent.openingElement.attributes;\n\n        // Check to see if we need to convert to a function\n        let attrValue = PathUtils.jsxChildrenToJS(path.node.children);\n        const args = PathUtils.stripAsIdentifiers(path);\n        if (args && attrValue) {\n            // Convert <dialog:title as={ x }>...</dialog:title> to a function: (x) => ...\n            attrValue = t.arrowFunctionExpression(args, attrValue);\n        }\n\n        let existingAttr = PathUtils.getAttributeValue(path.parentPath, attrName);\n        if (existingAttr && t.isJSXExpressionContainer(existingAttr)) {\n            if (!t.isArrayExpression(existingAttr.expression)) {\n                existingAttr.expression = t.arrayExpression([ existingAttr.expression ]);\n            }\n            existingAttr.expression.elements.push(attrValue);\n        }\n        else {\n            parentAttrs.push(t.jSXAttribute(t.jSXIdentifier(attrName), t.jSXExpressionContainer(attrValue)));\n        }\n\n        path.remove();\n        return true;\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/NamedChildrenTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\nconst t = require('babel-types');\nconst template = require('babel-template');\n\nconst refFunctionTemplate = template(`\n(el) => typeof EXPR === 'function' ? EXPR(el) : (EXPR = el)\n`);\n\nmodule.exports = class RefAttributeTransform {\n    static apply(path) {\n\n        // It's possible that this node gets revisited again (e.g. due to any functions we inject being hoisted),\n        // so we need to be careful to avoid getting into an infinite loop. We mark the node as having had its\n        // refs transformed already, so that we guarantee that this transform only ever runs once.\n        if (path.getData('refTransformApplied')) {\n            return;\n        }\n        path.setData('refTransformApplied', true);\n\n        const refAttr = PathUtils.getAttribute(path, 'ref');\n        if (refAttr) {\n            this.transformRef(path, refAttr);\n        }\n    }\n\n    static transformRef(path, attr) {\n        if (t.isStringLiteral(attr.value)) {\n            PathUtils.warning(path, `You passed a string (\"${attr.value.value}\") to a ref attribute; `\n                + `this has no effect. It has been stripped out; use a function instead if a ref is needed.`);\n            PathUtils.deleteAttribute(path, 'ref');\n            return;\n        }\n\n        t.assertJSXExpressionContainer(attr.value);\n        const value = attr.value.expression;\n\n        const isFunction = (t.isFunctionExpression(value) || t.isArrowFunctionExpression(value));\n        if (!isFunction) {\n            attr.value.expression = refFunctionTemplate({ EXPR: value }).expression;\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "template",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~template",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "refFunctionTemplate",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~refFunctionTemplate",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "transformRef",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/RefAttributeTransform.js~exports.transformRef",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "attr",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst PathUtils = require('@twist/babel-plugin-transform/src/PathUtils');\nconst t = require('babel-types');\nconst camelCaseHyphens = require('@twist/babel-plugin-transform/src/camelCaseHyphens');\nconst styles = require('../runtime/styles');\n\n/**\n * Enable string style attributes, style shorthand attributes, and multiple style attributes.\n *\n * 1. String Attributes: React only allows objects as style attribute values (e.g. `{ color: 'red' }`).\n *    This allows the style attribute to be specified as a string (like in plain HTML).\n * 2. Style Shorthand: `<div style-background-color=\"red\" />` === `<div style={{ backgroundColor: 'red' }} />`.\n * 3. Multiple Style Attributes: `<div style={A} style={B} />` is roughly equivalent to `<div style={merge(A, B)}>`.\n *\n * Whenever possible, we perform these conversions statically, avoiding any runtime overhead. At compile-time, we:\n *\n *  - parse style strings (including `style=\"...\"`, `style={'...'}`, and `style={`...`}`) into objects;\n *  - combine multiple style attributes and/or shorthands together\n *\n * Styles are combined at runtime only when necessary (using the \"styles\" runtime helper). This happens when:\n *\n *  - styles are specified as opaque JS expressions, or interpolated template strings;\n *  - spread attributes are included along with styles (spreads might include a \"style\" property).\n *\n * As in React, style attributes and shorthands are evaluated left-to-right. We take care to ensure this order\n * is preserved, even in the presence of spread attributes.\n */\nmodule.exports = class StyleAttributeTransform {\n\n    static apply(path, state) {\n        const runtimeModule = `${state.opts.moduleName}/src/runtime/styles`;\n        const attributes = path.node.openingElement.attributes;\n        const styleItems = [];\n\n        // There are three types of relevant attributes: \"style\", \"style-*\", and spreads. All of these might include\n        // styles we must combine together. At the end of this transform, we must have only one \"style\" attribute, so\n        // we remove any \"style\" and \"style-*\" attributes here (spread attributes must remain intact).\n        for (let i = 0; i < attributes.length; i++) {\n            const styleItem = StyleItem.fromAttribute(attributes[i], i);\n            if (styleItem) {\n                styleItems.push(styleItem);\n                if (!styleItem.isSpread) {\n                    attributes.splice(i--, 1);\n                }\n            }\n        }\n\n        // If there weren't any styles, or we only had one spread, leave the element as-is (we haven't changed it).\n        if (styleItems.length === 0 || (styleItems.length === 1 && styleItems[0].isSpread)) {\n            return;\n        }\n\n        // Combine styles into as few items as possible (e.g. multiple shorthands can be combined into one object).\n        // NOTE: We cannot merge anything out-of-order, so a simple pairwise iteration is optimal.\n        for (let i = 1; i < styleItems.length; i++) {\n            if (styleItems[i - 1].tryToMerge(styleItems[i])) {\n                styleItems.splice(i--, 1);\n            }\n        }\n\n        // If only one object or string item is left, we can just include a style attribute with that object.\n        // Otherwise, we need the runtime transform to combine the style items.\n        const value = styleItems.length === 1 && (t.isObjectExpression(styleItems[0].value) || t.isStringLiteral(styleItems[0].value))\n            ? styleItems[0].value\n            : t.callExpression(PathUtils.addImportOnce(path, 'default', runtimeModule, { nameHint: 'S' }), styleItems.map(s => s.value));\n\n        // We insert the new (computed) style attribute at the end - it's important that it comes at the end because we don't\n        // want any spreads to override our computed style attribute. (Technically if there are no spreads, it would be safe to\n        // insert it earlier, but we'll just put it at the end for consistency).\n        attributes.push(t.jSXAttribute(t.jSXIdentifier('style'), t.isStringLiteral(value) ? value : t.jSXExpressionContainer(value)));\n    }\n};\n\n/**\n * A container representing one user-specified attribute related to styles. This includes \"style\", \"style-*\", and spreads.\n */\nclass StyleItem {\n\n    /** @private */\n    constructor(value, index, isSpread) {\n        this.value = value;\n        this.index = index;\n        this.isSpread = isSpread;\n    }\n\n    /**\n     * If `attr` is a style-related attribute, return a new StyleItem representing the attribute. Otherwise return null.\n     * @param {JSXAttribute|JSXSpreadAttribute} attr\n     * @param {number} index\n     * @return {StyleItem|null}\n     */\n    static fromAttribute(attr, index) {\n        // Spreads might contain a \".style\" property, which we must extract.\n        if (t.isJSXSpreadAttribute(attr)) {\n            return new StyleItem(t.logicalExpression('||', t.memberExpression(attr.argument, t.identifier('style')), t.objectExpression([])), index, true);\n        }\n        const name = PathUtils.getJSXAttributeName(attr);\n        if (name === 'style') {\n            return new StyleItem(StyleItem.convertStringsToStyleObjects(StyleItem.simplifyStringLiteral(attr.value)), index);\n        }\n        // Expand `style-foo={...}` shorthands into `style={{ foo: ... }}` for simplicity.\n        else if (name.startsWith('style-')) {\n            const key = t.stringLiteral(camelCaseHyphens(name.slice(6)));\n            const value = t.objectExpression([ t.objectProperty(key, StyleItem.simplifyStringLiteral(attr.value)) ]);\n            return new StyleItem(value, index);\n        }\n        else {\n            return null;\n        }\n    }\n\n    /**\n     * Attempt to merge another StyleItem's value into this one. We can do this if both are ObjectExpressions whose keys\n     * are simple strings or identifiers. Return true if `other` was merged into this.\n     * @param {StyleItem} other\n     * @return {boolean}\n     */\n    tryToMerge(other) {\n        // We can only combine these if they are both object literals (and not spreads).\n        if (this.isSpread || other.isSpread || !t.isObjectExpression(this.value) || !t.isObjectExpression(other.value)) {\n            return false;\n        }\n        // Start combining the objects. If we run into object keys that aren't strings/identifiers, we must abort, since\n        // we can't safely merge them.\n        let result = new Map();\n        for (let prop of this.value.properties) {\n            if (!(t.isStringLiteral(prop.key) || t.isIdentifier(prop.key))) {\n                return false;\n            }\n            result.set(prop.key.name || prop.key.value, prop);\n        }\n        for (let prop of other.value.properties) {\n            if (!(t.isStringLiteral(prop.key) || t.isIdentifier(prop.key))) {\n                return false;\n            }\n            result.set(prop.key.name || prop.key.value, prop);\n        }\n        // If we've made it this far, the objects are safe to merge.\n        this.value.properties = Array.from(result.values());\n        return true;\n    }\n\n    /**\n     * If given a string or StringLiteral, parse it as a CSS string and transform it into an ObjectExpression,\n     * returning other nodes unchanged.\n     * @param {Node} s\n     * @return {Node|ObjectExpression}\n     */\n    static convertStringsToStyleObjects(s) {\n        if (t.isStringLiteral(s)) {\n            s = s.value;\n        }\n        if (typeof s !== 'string') {\n            return s;\n        }\n        const properties = [];\n        const obj = styles(s);\n        // If `styles(s)` returned a string, it didn't look like a CSS string, so we'll pass it through as a string.\n        if (typeof obj === 'string') {\n            return t.stringLiteral(obj);\n        }\n        for (let key in obj) {\n            properties.push(t.objectProperty(t.stringLiteral(key), t.stringLiteral(obj[key].trim())));\n        }\n        return t.objectExpression(properties);\n    }\n\n    /**\n     * If possible, simplify an expression containing a statically-determinable string\n     * into a plain StringLiteral node. Otherwise return the original node.\n     *\n     * @param {Node} node\n     * @return {Node} A node that is more likely to be a StringLiteral.\n     */\n    static simplifyStringLiteral(node) {\n        if (t.isJSXExpressionContainer(node)) {\n            node = node.expression;\n        }\n        // Template strings can be converted if they don't perform any interpolation.\n        if (t.isTemplateLiteral(node) && node.expressions.length === 0) {\n            return t.stringLiteral(node.quasis[0].value.cooked);\n        }\n        return node;\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "PathUtils",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~PathUtils",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "t",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~t",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "camelCaseHyphens",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~camelCaseHyphens",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "styles",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~styles",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": "Enable string style attributes, style shorthand attributes, and multiple style attributes.\n\n1. String Attributes: React only allows objects as style attribute values (e.g. `{ color: 'red' }`).\n   This allows the style attribute to be specified as a string (like in plain HTML).\n2. Style Shorthand: `<div style-background-color=\"red\" />` === `<div style={{ backgroundColor: 'red' }} />`.\n3. Multiple Style Attributes: `<div style={A} style={B} />` is roughly equivalent to `<div style={merge(A, B)}>`.\n\nWhenever possible, we perform these conversions statically, avoiding any runtime overhead. At compile-time, we:\n\n - parse style strings (including `style=\"...\"`, `style={'...'}`, and `style={`...`}`) into objects;\n - combine multiple style attributes and/or shorthands together\n\nStyles are combined at runtime only when necessary (using the \"styles\" runtime helper). This happens when:\n\n - styles are specified as opaque JS expressions, or interpolated template strings;\n - spread attributes are included along with styles (spreads might include a \"style\" property).\n\nAs in React, style attributes and shorthands are evaluated left-to-right. We take care to ensure this order\nis preserved, even in the presence of spread attributes.",
    "lineNumber": 40,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~exports",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~exports.apply",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "StyleItem",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js",
    "importStyle": null,
    "description": "A container representing one user-specified attribute related to styles. This includes \"style\", \"style-*\", and spreads.",
    "lineNumber": 89,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem#constructor",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "value",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem#value",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "index",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem#index",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "isSpread",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem#isSpread",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "fromAttribute",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem.fromAttribute",
    "access": "public",
    "description": "If `attr` is a style-related attribute, return a new StyleItem representing the attribute. Otherwise return null.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSXAttribute",
          "JSXSpreadAttribute"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StyleItem",
        "null"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "tryToMerge",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem#tryToMerge",
    "access": "public",
    "description": "Attempt to merge another StyleItem's value into this one. We can do this if both are ObjectExpressions whose keys\nare simple strings or identifiers. Return true if `other` was merged into this.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "StyleItem"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "convertStringsToStyleObjects",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem.convertStringsToStyleObjects",
    "access": "public",
    "description": "If given a string or StringLiteral, parse it as a CSS string and transform it into an ObjectExpression,\nreturning other nodes unchanged.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node",
        "ObjectExpression"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "simplifyStringLiteral",
    "memberof": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/babel-plugin-transform-react/src/transforms/StyleAttributeTransform.js~StyleItem.simplifyStringLiteral",
    "access": "public",
    "description": "If possible, simplify an expression containing a statically-determinable string\ninto a plain StringLiteral node. Otherwise return the original node.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "A node that is more likely to be a StringLiteral."
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "@twist/configuration/src/TwistConfiguration.js",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst BabelConfig = require('./internal/BabelConfig');\nconst LibraryLoader = require('./internal/LibraryLoader');\n\nconst DEFAULT_OPTIONS = {\n    includeBabelRuntime: false,\n    jsxSourceLines: false,\n\n    polyfill: true,\n    regenerator: false,\n    targets: { node: 'current' },\n    transformImports: true,\n    useBabelModuleResolver: true,\n};\n\nmodule.exports = class TwistConfiguration {\n\n    /**\n     * Create a Twist configuration. A \"contextName\" describes the specific context in which this configuration is\n     * being applied, such as \"node\" or \"webpack\". The default context is \"node\"; other build systems\n     * (like a webpack plugin) may subclass this configuration and provide additional functionality;\n     * libraries should switch on `this.context` to decide how to add any plugins/loaders as necessary.\n     *\n     * @param {string} [contextName]\n     * @param {object} [options]\n     * @param {object} [env]\n     */\n    constructor(contextName, options = {}) {\n        this._init(contextName, options);\n    }\n\n    _init(contextName, options) {\n        this.context = contextName || 'node';\n\n        // The options that you can configure (these are the default options below):\n        this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n        // Twist compiler settings\n        this._components = {};\n        this._decorators = {};\n\n        /** @property {Array<[ BabelModule, object ]>} */\n        this._babelPlugins = [];\n\n        // Path aliases (e.g. mapping an alias to a folder)\n        this._pathAliases = {\n            'babel-runtime/helpers/inherits': require.resolve('./third_party/inherits')\n        };\n\n        this._libraryLoader = new LibraryLoader(this);\n\n        if (options.root !== null) {\n            this.addLibrary(options.root || process.cwd());\n        }\n    }\n\n    /**\n     * Get the current library. If not within a library (i.e. not inside an addLibrary() call), returns a\n     * root library that has `parentLibrary` set to null.\n     * @return {LibraryInfo}\n     */\n    get currentLibrary() {\n        return this._libraryLoader.currentLibrary;\n    }\n\n    /**\n     * Get the locations on disk of the loaded libraries.\n     * @return {Object} A mapping from library name to path.\n     */\n    get libraryLocations() {\n        let libraries = {};\n        this._libraryLoader.libraryInfos.forEach(library => {\n            libraries[library.name] = library.path;\n        });\n        return libraries;\n    }\n\n    /**\n     * Utility for array entries in .twistrc - we support either:\n     * * A map of key-value pairs\n     * * An array of [key, value] entries\n     *\n     * If it's an array, we'll skip over any undefined values\n     *\n     * @param {Array|Object} config An array or map of items to add\n     * @param {function} callback Method to apply to each entry\n     */\n    _forEachConfig(config, callback) {\n        if (Array.isArray(config)) {\n            config.forEach(entry => {\n                if (!entry) {\n                    return;\n                }\n                if (Array.isArray(entry)) {\n                    callback(entry[0], entry[1] || {});\n                }\n                else {\n                    callback(entry, {});\n                }\n            });\n        }\n        else if (config && typeof config === 'object') {\n            Object.keys(config).forEach(key => {\n                callback(key, config[key]);\n            });\n        }\n    }\n\n    /**\n     * Adds a .twistrc configuration to the Twist configuration\n     * This shouldn't be called directly - it's called as a consequence of _libraryLoader.load().\n     *\n     * @param {Object} config The configuration from the .twistrc file\n     */\n    mergeConfig(config = {}) {\n\n        // Add sub-libraries first\n        this._forEachConfig(config.libraries, this.addLibrary.bind(this));\n\n        // Decorators\n        this._forEachConfig(config.decorators, (name, config) => {\n            config.module = config.module || this.currentLibrary.name;\n            config.export = config.export || name;\n            if (config.inherits) {\n                config.inherits = typeof config.inherits === 'string' ? { export: config.inherits } : config.inherits;\n                config.inherits.module = config.inherits.module || this.currentLibrary.name;\n            }\n            this.addDecorator(name, config);\n        });\n\n        // Components\n        this._forEachConfig(config.components, (name, config) => {\n            config.module = config.module || this.currentLibrary.name;\n            config.export = config.export || name;\n            this.addComponent(name, config);\n        });\n\n        // Babel plugins\n        this._forEachConfig(config.babelPlugins, this.addBabelPlugin.bind(this));\n\n        // Options\n        this._forEachConfig(config.options, this.setOption.bind(this));\n\n        // Contextual configuration - if you've provided additional configuration under context[contextname],\n        // we'll add that too (e.g. additional options only for a webpack environment).\n        if (config.context) {\n            this.mergeConfig(config.context[this.context]);\n        }\n    }\n\n    /**\n     * Add more Twist libraries to the configuration, using this method. e.g. `config.addLibrary('@twist/module');`\n     * This allows the given library to add to the configuration (e.g. defining new decorators/components). This loads\n     * the .twistrc file of the library, and adds it to the configuration.\n     *\n     * @param {string} library The npm name of the library to add (passes in the configuration to `library/config.js`)\n     * @param {Object|value} [options] Options to pass to the library\n     */\n    addLibrary(library, options) {\n        this._libraryLoader.load(library, options);\n        return this;\n    }\n\n    /**\n     * Add a custom Babel plugin.\n     *\n     * @param {BabelPlugin|string} plugin\n     * @param {object} [options]\n     */\n    addBabelPlugin(plugin, options) {\n        // Don't add a plugin more than once.\n        if (this._babelPlugins.find(item => item[0] === plugin)) {\n            return;\n        }\n        this._babelPlugins.push([ plugin, options ]);\n        return this;\n    }\n\n    /**\n     * Set an option in the Twist configuration. Supported options are:\n     *\n     * includeBabelRuntime      [true]      Include Babel runtime.\n     * polyfill                 [true]      Include Babel polyfill (if including Babel runtime).\n     * regenerator              [false]     Include Babel regenerator (if including Babel runtime).\n     * targets                  [undefined] A babel-preset-env `targets` configuration, e.g. `{ browsers: 'last 2 versions' }`.\n     * transformImports         [false]     Transforms imports to CommonJS requires.\n     * useBabelModuleResolver   [false]     Use the Babel module resolver to resolve imports.\n     *\n     * @param {string} name\n     * @param {string|number|Boolean} value\n     */\n    setOption(name, value) {\n        if (!this._options.hasOwnProperty(name)) {\n            throw new Error('Twist Configuration option ' + name + ' is not defined.');\n        }\n        this._options[name] = value;\n        return this;\n    }\n\n    /**\n     * Get the value of an option in the Twist configuration.\n     *\n     * @param {string} name\n     * @return {string|number|Boolean}\n     */\n    getOption(name) {\n        return this._options[name];\n    }\n\n    /**\n     * Add a global component to the Twist compiler configuration\n     * @param {string} name\n     * @param {Object} config\n     */\n    addComponent(name, config) {\n        this._components[name] = config;\n        return this;\n    }\n\n    /**\n     * Add a decorator to the Twist compiler configuration\n     * @param {string} name\n     * @param {Object} config\n     */\n    addDecorator(name, config) {\n        this._decorators[name] = config;\n        return this;\n    }\n\n    /**\n     * The configured components\n     */\n    get components() {\n        return this._components;\n    }\n\n    /**\n     * The configured decorators\n     */\n    get decorators() {\n        return this._decorators;\n    }\n\n    /**\n     * The complete Twist configuration options\n     */\n    get twistOptions() {\n        const aliases = Object.assign({}, this.libraryLocations, this._pathAliases);\n        const autoImport = Object.assign({}, this._decorators, this._components);\n        const plugins = this._babelPlugins.slice();\n\n        return Object.assign({}, this._options, {\n            aliases,\n            autoImport,\n            plugins\n        });\n    }\n\n    /**\n     * The configuration of Babel (options passed via .babelrc, or to the webpack babel-loader).\n     */\n    get babelOptions() {\n        return BabelConfig.build(this.twistOptions);\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/configuration/src/TwistConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "BabelConfig",
    "memberof": "@twist/configuration/src/TwistConfiguration.js",
    "static": true,
    "longname": "@twist/configuration/src/TwistConfiguration.js~BabelConfig",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/configuration/src/TwistConfiguration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "LibraryLoader",
    "memberof": "@twist/configuration/src/TwistConfiguration.js",
    "static": true,
    "longname": "@twist/configuration/src/TwistConfiguration.js~LibraryLoader",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/configuration/src/TwistConfiguration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "@twist/configuration/src/TwistConfiguration.js",
    "static": true,
    "longname": "@twist/configuration/src/TwistConfiguration.js~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/configuration/src/TwistConfiguration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"includeBabelRuntime\": *, \"jsxSourceLines\": *, \"polyfill\": boolean, \"regenerator\": *, \"targets\": *, \"transformImports\": boolean, \"useBabelModuleResolver\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/configuration/src/TwistConfiguration.js",
    "static": true,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/configuration/src/TwistConfiguration.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#constructor",
    "access": "public",
    "description": "Create a Twist configuration. A \"contextName\" describes the specific context in which this configuration is\nbeing applied, such as \"node\" or \"webpack\". The default context is \"node\"; other build systems\n(like a webpack plugin) may subclass this configuration and provide additional functionality;\nlibraries should switch on `this.context` to decide how to add any plugins/loaders as necessary.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "contextName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "env",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_init",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_init",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "contextName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "context",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#context",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_options",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_options",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_components",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_components",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_decorators",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_decorators",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_babelPlugins",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_babelPlugins",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<[ BabelModule, object ]>"
        ],
        "spread": false,
        "description": ""
      }
    ],
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_pathAliases",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_pathAliases",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"babel-runtime/helpers/inherits\": *}"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_libraryLoader",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_libraryLoader",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "get",
    "name": "currentLibrary",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#currentLibrary",
    "access": "public",
    "description": "Get the current library. If not within a library (i.e. not inside an addLibrary() call), returns a\nroot library that has `parentLibrary` set to null.",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "LibraryInfo"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "get",
    "name": "libraryLocations",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#libraryLocations",
    "access": "public",
    "description": "Get the locations on disk of the loaded libraries.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A mapping from library name to path."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "_forEachConfig",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#_forEachConfig",
    "access": "private",
    "description": "Utility for array entries in .twistrc - we support either:\n* A map of key-value pairs\n* An array of [key, value] entries\n\nIf it's an array, we'll skip over any undefined values",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "An array or map of items to add"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Method to apply to each entry"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "mergeConfig",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#mergeConfig",
    "access": "public",
    "description": "Adds a .twistrc configuration to the Twist configuration\nThis shouldn't be called directly - it's called as a consequence of _libraryLoader.load().",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration from the .twistrc file"
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "addLibrary",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#addLibrary",
    "access": "public",
    "description": "Add more Twist libraries to the configuration, using this method. e.g. `config.addLibrary('@twist/module');`\nThis allows the given library to add to the configuration (e.g. defining new decorators/components). This loads\nthe .twistrc file of the library, and adds it to the configuration.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "library",
        "description": "The npm name of the library to add (passes in the configuration to `library/config.js`)"
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "value"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options to pass to the library"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "addBabelPlugin",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#addBabelPlugin",
    "access": "public",
    "description": "Add a custom Babel plugin.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "BabelPlugin",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "setOption",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#setOption",
    "access": "public",
    "description": "Set an option in the Twist configuration. Supported options are:\n\nincludeBabelRuntime      [true]      Include Babel runtime.\npolyfill                 [true]      Include Babel polyfill (if including Babel runtime).\nregenerator              [false]     Include Babel regenerator (if including Babel runtime).\ntargets                  [undefined] A babel-preset-env `targets` configuration, e.g. `{ browsers: 'last 2 versions' }`.\ntransformImports         [false]     Transforms imports to CommonJS requires.\nuseBabelModuleResolver   [false]     Use the Babel module resolver to resolve imports.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getOption",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#getOption",
    "access": "public",
    "description": "Get the value of an option in the Twist configuration.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "number",
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "addComponent",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#addComponent",
    "access": "public",
    "description": "Add a global component to the Twist compiler configuration",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "addDecorator",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#addDecorator",
    "access": "public",
    "description": "Add a decorator to the Twist compiler configuration",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "get",
    "name": "components",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#components",
    "access": "public",
    "description": "The configured components",
    "lineNumber": 245,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "get",
    "name": "decorators",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#decorators",
    "access": "public",
    "description": "The configured decorators",
    "lineNumber": 252,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "get",
    "name": "twistOptions",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#twistOptions",
    "access": "public",
    "description": "The complete Twist configuration options",
    "lineNumber": 259,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "get",
    "name": "babelOptions",
    "memberof": "@twist/configuration/src/TwistConfiguration.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/configuration/src/TwistConfiguration.js~exports#babelOptions",
    "access": "public",
    "description": "The configuration of Babel (options passed via .babelrc, or to the webpack babel-loader).",
    "lineNumber": 274,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "@twist/core/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// Core\nexport { default as BaseStore } from './src/BaseStore';\nexport { default as Binder } from './src/Binder';\nexport { default as CollectionBinder } from './src/CollectionBinder';\nexport { default as Disposable } from './src/Disposable';\nexport { default as ObjectId } from './src/ObjectId';\nexport { default as ObservableArray } from './src/ObservableArray';\nexport { default as ObservableMap } from './src/ObservableMap';\nexport { default as ObservableSet } from './src/ObservableSet';\nexport { default as Scope } from './src/Scope';\nexport { default as Signal } from './src/Signal';\nexport { default as SignalDispatcher } from './src/SignalDispatcher';\nexport { default as TaskQueue } from './src/TaskQueue';\n\n// Decorators\nexport { default as Abstract } from './src/decorators/Abstract';\nexport { default as Action } from './src/decorators/Action';\nexport { default as Bind } from './src/decorators/Bind';\nexport { default as Cache } from './src/decorators/Cache';\nexport { default as Debounce } from './src/decorators/Debounce';\nexport { default as Delay } from './src/decorators/Delay';\nexport { default as Memoize } from './src/decorators/Memoize';\nexport { default as Observable } from './src/decorators/Observable';\nexport { default as Prototype } from './src/decorators/Prototype';\nexport { default as State } from './src/decorators/State';\nexport { default as Store } from './src/decorators/Store';\nexport { default as Task } from './src/decorators/Task';\nexport { default as Throttle } from './src/decorators/Throttle';\nexport { default as Wrap } from './src/decorators/Wrap';\n\n// Middleware\nexport { default as protectorMiddleware } from './src/middleware/protectorMiddleware';\nexport { default as remoteDevMiddleware } from './src/middleware/remoteDevMiddleware';\nexport { default as thunkMiddleware } from './src/middleware/thunkMiddleware';\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "@twist/core/karma.conf.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst path = require('path');\n\nprocess.env.NODE_ENV = 'test';\n\nmodule.exports = function(config) {\n    config.set({\n        webpack: require(path.join(__dirname, 'webpack.config.js')),\n\n        files: [\n            'test/IncludeAll.jsx',\n            'test/Index.jsx'\n        ],\n\n        preprocessors: {\n            '**/*.*': [ 'webpack' ],\n        },\n\n        reporters: [ 'progress', 'mocha', 'coverage' ],\n        frameworks: [ 'mocha' ],\n        browsers: [ 'Chrome' ],\n\n        coverageReporter: {\n            dir: 'testing/',\n            reporters: [\n                { type: 'html', subdir: 'coverage' },\n                { type: 'text' }\n            ],\n        },\n\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-firefox-launcher',\n            'karma-mocha-reporter',\n            'karma-mocha',\n            'karma-webpack',\n        ],\n\n        webpackMiddleware: {\n            stats: 'errors-only',\n            noInfo: true\n        }\n    });\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/karma.conf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/core/karma.conf.js",
    "static": true,
    "longname": "@twist/core/karma.conf.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/core/karma.conf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/karma.conf.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "@twist/core/src/BaseStore.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Exportable from './internal/state/Exportable';\nimport ActionDispatcher from './internal/state/ActionDispatcher';\nimport StoreSerializer from './internal/state/StoreSerializer';\nimport thunkMiddleware from './middleware/thunkMiddleware';\n\nimport Observable from './decorators/Observable';\n\n/**\n * Private data associated with a store.\n *\n * @private\n */\nclass StoreData {\n    @Observable parent; // Reference to the parent store\n\n    // The following don't need to be observable, since they're not directly exposed through any public APIs:\n    name;\n    middleware;\n    subStores = {}; // Map from key to substore - used to keep track of the stores we need to recursively dispatch to.\n}\n\n/**\n * A Store is a container of state - users of Twist should extend Store by using the @Store decorator on a class.\n * Within a store, the @State.XXX decorators are used to define how a store should be serialized to/from JSON.\n *\n * In addition to serialization, Store provides a dispatch mechanism, so that actions can be dispatched to a store to mutate it.\n * You can attach middleware to intercept a dispatch. It also keeps track of the store hierarchy, so that when you dispatch an\n * action to a store, it gets routed to the top-level parent store (so it goes through the top-level middleware), before being\n * router back down to the target store. Actions also propagate to sub-stores (unless they return a value, which prevents propagation),\n * so that a single action can be handled by multiple stores.\n */\nexport default class BaseStore extends Exportable {\n\n    __data = new StoreData;\n\n    constructor(initialState, middleware, includeDefaultMiddleware = true) {\n        super();\n\n        // Allow middleware, for hooking into the dispatch action\n        var data = this.__data;\n        data.middleware = includeDefaultMiddleware ? [ thunkMiddleware ] : [];\n        if (middleware instanceof Array) {\n            data.middleware = data.middleware.concat(middleware);\n        }\n        else if (middleware) {\n            // If you just have a single piece of middleware to add (e.g. devtools), you don't need to put it in an array\n            data.middleware.push(middleware);\n        }\n\n        // If we have an initial state, dispatch an INIT action to set it.\n        // This ensures that state is always set via an action.\n        if (initialState) {\n            this.dispatch(ActionDispatcher.INIT_ACTION, initialState);\n        }\n    }\n\n    _isMutable() {\n        if (this.__allowMutable !== undefined) {\n            return this.__allowMutable;\n        }\n        if (this.__data.parent) {\n            // Inherit from parent\n            // TODO: We should cache this to avoid reading all the way up the tree every time\n            return this.__data.parent._isMutable();\n        }\n    }\n\n    _linkStore(name, store) {\n        var subStores = this.__data.subStores;\n        if (subStores[name]) {\n            subStores[name].__data.parent = undefined;\n            subStores[name].__data.name = undefined;\n            subStores[name] = undefined;\n        }\n        if (store && (store instanceof BaseStore)) {\n            // Make sure the store doesn't already have a parent (different from us!) - that's a no-no!\n            if (store.__data.parent && store.__data.parent !== this) {\n                throw new Error('The store you\\'re attempting to assign to \"' + name + '\" already belongs to another store. The store hierarchy must be a tree.');\n            }\n\n            subStores[name] = store;\n            store.__data.parent = this;\n            store.__data.name = name;\n        }\n    }\n\n    // Private: Internal dispatcher, so we can tell the difference between a user-invoked dispatch, and\n    _doDispatch(action, payload) {\n\n        // Dispatch the action to the current store, if it supports it\n        var preventPropagation = false;\n        var retVal;\n        if (action === ActionDispatcher.INIT_ACTION) {\n            // Special init action (initializing the store)\n            super.fromJSON(...payload);\n            preventPropagation = true;\n        }\n        else if (action.indexOf(ActionDispatcher.IMPLICIT_ACTION_PREFIX) === 0) {\n            // Implicit action - the action name starts with '@@' and is a (.-separated) list of property names, ending with\n            // either a property or a method name - a method name is indicated by trailing parentheses \"()\". Some examples:\n            // a) @@prop, corresponds to setting this.prop = payload\n            // b) @@prop.prop2, corresponds to setting this.prop.prop2 = payload\n            // c) @@prop.method(), corresponds to calling this.prop.method(...payload)\n            action = action.substring(ActionDispatcher.IMPLICIT_ACTION_PREFIX.length);\n            var target = this;\n            var properties = action.split('.');\n            while (properties.length > 1) {\n                target = target[properties.shift()];\n            }\n            var property = properties[0];\n            if (property.substring(property.length - 2) === '()') {\n                // Calling Method\n                var method = property.substring(0, property.length - 2);\n                retVal = target[method](...payload.map(StoreSerializer.valueFromJSON));\n            }\n            else {\n                // Setting Property\n                target[property] = StoreSerializer.valueFromJSON(...payload);\n            }\n            preventPropagation = true;\n        }\n        else {\n            // It's a custom action - if we have a handler, invoke it\n            var handler = this.__actionHandlers && this.__actionHandlers[action];\n            if (handler) {\n                if (handler.options.async) {\n                    // Ignore any async actions while propagating - we print out a warning.\n                    // Either the user intended to dispatch the async action, in which case they need to target the store directly (otherwise it goes through the middleware)\n                    // Or, they're using the same name for both synchronous and asynchronous actions, which is a bad idea.\n                    console.warn('Ignoring an asynchronous handler for action \"' + action + '\" while propagating. Asynchronous actions can only be dispatched directly to the target store.');\n                }\n                else {\n                    retVal = this[handler.name](...payload);\n                    preventPropagation = (retVal !== undefined) || (handler.options.propagate === false);\n                }\n            }\n        }\n\n        // By returning a value, an action handler can prevent the action from\n        // being propagated to sub-stores\n        if (preventPropagation) {\n            return retVal;\n        }\n\n        // Dispatch the action to each of the sub-stores\n        var subStores = this.__data.subStores;\n        for (var key in subStores) {\n            var store = subStores[key];\n            if (store && store._doDispatch) {\n                store._doDispatch(action, payload);\n            }\n        }\n    }\n\n    // Dispatch an action downwards to the target store. This allows you to dispatch an action on a parent store that's directed\n    // at only a single child:\n    // * store.dispatch('ACTION') will broadcast 'ACTION' from the root (so all child stores that listen to it will handle it)\n    // * store.dispatch('substore/ACTION') is equivalent to store.substore.dispatch('ACTION')\n    _dispatchDown(action, payload) {\n        var route = action.split('/');\n        action = route.pop();\n\n        var store = this;\n        for (var i = 0; i < route.length; i++) {\n            store = store.__data.subStores[route[i]];\n\n            if (!store) {\n                // Nothing to dispatch if we can't find the store\n                return;\n            }\n        }\n\n        return store._doDispatch(action, payload);\n    }\n\n    // Handle an action on the current store, passing it through any installed middleware.\n    _dispatchWithMiddleware(action, payload, middleware, ...args) {\n        if (middleware && !ActionDispatcher.active) {\n            var next = (newAction, ...newPayload) => {\n                if (newAction) {\n                    return this._dispatchWithMiddleware(newAction, newPayload, ...args);\n                }\n                return this._dispatchWithMiddleware(action, payload, ...args);\n            };\n            return middleware(this, action, payload, next);\n        }\n\n        if (typeof action !== 'string') {\n            if (ActionDispatcher.active && typeof action === 'function') {\n                throw new Error('Cannot dispatch an asynchronous action from a synchronous action');\n            }\n            throw new Error('Action name must be a string');\n        }\n\n        let retVal;\n        try {\n            ActionDispatcher.start(action);\n            retVal = this._dispatchDown(action, payload);\n        }\n        catch (e) {\n            // Even if there's an error, we still try to end the action, so other code can continue.\n            ActionDispatcher.end(action, true);\n            throw e;\n        }\n        ActionDispatcher.end(action);\n\n        return retVal;\n    }\n\n    // Dispatch an action upwards to the parent store. This allows you to dispatch an action on a child store,\n    // and have it go through the parent middleware.\n    // As the action is dispatched upwards, the path back down to the target store is encoded, so the action can be routed back down to the target store.\n    _dispatchUp(action, payload, origin, route) {\n\n        // Do we need to continue propagating upwards?\n        var parent = this.__data.parent;\n        if (parent) {\n            // TODO: We could optimize this, to jump straight to the root\n            return parent._dispatchUp(action, payload, origin, this.__data.name + '/' + route);\n        }\n\n        var middleware = this.__data.middleware;\n\n        // We're at the root, so change direction and dispatch down. There are two cases:\n        // 1) Action is a string - in which case we can collapse the route+action to a single string\n        if (typeof action === 'string') {\n            return this._dispatchWithMiddleware(route + action, payload, ...middleware);\n        }\n        // 2) Action isn't a string - in which case we need to dispatch it on the origin, but with the parent's middleware\n        return origin._dispatchWithMiddleware(action, payload, ...middleware);\n    }\n\n    /**\n     * Dispatch the given action to the store, with any arguments passed as the action's payload.\n     *\n     * @param {string | Function} action The name of the action, or a function (asynchronous action).\n     * @param {...*} payload The payload to pass to the action handler (you can pass multiple arguments).\n     */\n    dispatch(action, ...payload) {\n        // Check for async actions - these just get called straight away (it's syntactic sugar)\n        var handler = this.__actionHandlers && this.__actionHandlers[action];\n        if (handler && handler.options.async) {\n            return this[handler.name](...payload);\n        }\n\n        return this._dispatchUp(action, payload, this, '');\n    }\n\n    /**\n     * Returns the parent store of the currents store. If the store is inside an array or map (e.g. `@State.byRefArray`, or\n     * `@State.byRefMap`), this is the store that contains the array/map, not the array/map object itself.\n     *\n     * @return {Store} The parent store (or `undefined` if it's a top-level store).\n     */\n    getParentStore() {\n        return this.__data.parent;\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/BaseStore.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "StoreData",
    "memberof": "@twist/core/src/BaseStore.jsx",
    "static": true,
    "longname": "@twist/core/src/BaseStore.jsx~StoreData",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/core/src/BaseStore.jsx",
    "importStyle": null,
    "description": "Private data associated with a store.",
    "lineNumber": 26,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "parent",
    "memberof": "@twist/core/src/BaseStore.jsx~StoreData",
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~StoreData#parent",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "name",
    "memberof": "@twist/core/src/BaseStore.jsx~StoreData",
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~StoreData#name",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "middleware",
    "memberof": "@twist/core/src/BaseStore.jsx~StoreData",
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~StoreData#middleware",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "subStores",
    "memberof": "@twist/core/src/BaseStore.jsx~StoreData",
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~StoreData#subStores",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "BaseStore",
    "memberof": "@twist/core/src/BaseStore.jsx",
    "static": true,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/BaseStore.jsx",
    "importStyle": "BaseStore",
    "description": "A Store is a container of state - users of Twist should extend Store by using the @Store decorator on a class.\nWithin a store, the @State.XXX decorators are used to define how a store should be serialized to/from JSON.\n\nIn addition to serialization, Store provides a dispatch mechanism, so that actions can be dispatched to a store to mutate it.\nYou can attach middleware to intercept a dispatch. It also keeps track of the store hierarchy, so that when you dispatch an\naction to a store, it gets routed to the top-level parent store (so it goes through the top-level middleware), before being\nrouter back down to the target store. Actions also propagate to sub-stores (unless they return a value, which prevents propagation),\nso that a single action can be handled by multiple stores.",
    "lineNumber": 45,
    "interface": false,
    "extends": [
      "@twist/core/src/internal/state/Exportable.js~Exportable"
    ]
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "__data",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#__data",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_isMutable",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_isMutable",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_linkStore",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_linkStore",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "store",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_doDispatch",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_doDispatch",
    "access": "private",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_dispatchDown",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_dispatchDown",
    "access": "private",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "_dispatchWithMiddleware",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_dispatchWithMiddleware",
    "access": "private",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "middleware",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_dispatchUp",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#_dispatchUp",
    "access": "private",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "origin",
        "types": [
          "*"
        ]
      },
      {
        "name": "route",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "dispatch",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#dispatch",
    "access": "public",
    "description": "Dispatch the given action to the store, with any arguments passed as the action's payload.",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The name of the action, or a function (asynchronous action)."
      },
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "payload",
        "description": "The payload to pass to the action handler (you can pass multiple arguments)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "getParentStore",
    "memberof": "@twist/core/src/BaseStore.jsx~BaseStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/BaseStore.jsx~BaseStore#getParentStore",
    "access": "public",
    "description": "Returns the parent store of the currents store. If the store is inside an array or map (e.g. `@State.byRefArray`, or\n`@State.byRefMap`), this is the store that contains the array/map, not the array/map object itself.",
    "lineNumber": 268,
    "return": {
      "nullable": null,
      "types": [
        "Store"
      ],
      "spread": false,
      "description": "The parent store (or `undefined` if it's a top-level store)."
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "@twist/core/src/Binder.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Filters from './internal/filters/Filters';\nimport BaseTaskQueue from './internal/queue/BaseTaskQueue';\nimport Logger from './internal/utils/Logger';\n\nimport Prototype from './decorators/Prototype';\n\nimport TaskQueue from './TaskQueue';\nimport Signal from './Signal';\nimport Disposable from './Disposable';\nimport ObjectId from './ObjectId';\n\nvar runFilters = Filters.filter;\n\n// Using an unique object to identify binders that didn't run yet.\nvar FirstExecutionMarker = {};\n\n// EmptyArray is an optimization - we only allocate a new array when needed.\nvar EmptyArray = [];\nvar EmptyArrayInUse = false;\n\nconst noop = function() {};\n\nconst wrapGetterFunction = function(fn) {\n    if (typeof fn === 'function') {\n        return fn;\n    }\n    if (typeof fn === 'object' && typeof fn.get === 'function') {\n        return fn.get;\n    }\n    return noop;\n};\n\nconst wrapSetterFunction = function(fn) {\n    if (typeof fn === 'object' && typeof fn.set === 'function') {\n        return fn.set;\n    }\n    return noop;\n};\n\n// Static methods in this file use Binder instead of this to make it possible to\n// call the method directly without using a member property call.\n@Prototype({\n    FirstExecutionMarker\n})\nexport default class Binder extends Disposable {\n\n    static mutatorsStack = [];\n    static active = null;\n    static mutator = null;\n\n    static pushMutator(mutator) {\n        Binder.mutatorsStack.push(Binder.mutator);\n        Binder.mutator = mutator;\n    }\n\n    static popMutator(mutator) {\n        if (Binder.mutator === mutator) {\n            Binder.mutator = Binder.mutatorsStack.pop();\n        }\n        else {\n            console.error('Trying to pop a mutator that is not in the top of the stack');\n        }\n    }\n\n    static run(bindings, fn, context) {\n        // Save existing active binders and push the new one as active.\n        var previous = Binder.active;\n        Binder.active = bindings;\n\n        var track = context && context.track;\n        if (track) {\n            bindings.track = context;\n            Logger.groupStart('Running ' + (context.name || 'bindings'));\n        }\n        try {\n            return fn.call(context);\n        }\n        finally {\n            if (track) {\n                Logger.groupEnd('Running ' + (context.name || 'binder'));\n                bindings.track = null;\n            }\n            // Revert the active binder.\n            Binder.active = previous;\n        }\n    }\n\n    static recordEvent(obj, eventName) {\n        var active = Binder.active;\n        if (active) {\n            // Use .track to identify the code that is invalidating a binding.\n            var track = active.track;\n            if (track) {\n                let objName = ObjectId.get(obj) + '-' + (obj.constructor ? obj.constructor.name : 'Anonymous');\n                Logger.log('Recording', objName, eventName);\n            }\n            active.push({ obj, eventName });\n        }\n    }\n\n    static recordChange(obj, propertyName, newValue, oldValue) {\n        Signal.trigger(obj, propertyName);\n\n        var mutator = Binder.mutator;\n        if (mutator) {\n            mutator.record(obj, propertyName, newValue, oldValue);\n        }\n    }\n\n    constructor(valueGetter, callback = noop, ignoreFirstRun = false, invalidate = TaskQueue, priority = 0, disposableParent = null) {\n        super();\n\n        this.previousValue = FirstExecutionMarker;\n        this.bindings = [];\n        this.dirty = !!ignoreFirstRun;\n        this.disposableParent = disposableParent;\n\n        this.valueGetter = wrapGetterFunction(valueGetter);\n        this.set = wrapSetterFunction(valueGetter);\n        this.callback = callback || noop;\n\n        if (invalidate && invalidate instanceof BaseTaskQueue) {\n            var queue = invalidate;\n            var apply = this.apply.bind(this);\n            invalidate = () => queue.push(apply, priority);\n        }\n\n        this.invalidate = () => {\n            if (Binder.active === this) {\n                // Don't invalidate when the Binder is currently running the valueGetter.\n                return;\n            }\n            if (this.track) {\n                var error = new Error();\n                Error.captureStackTrace(error);\n                Logger.log('change detected', window._signal, error.stack);\n            }\n\n            // When we have an invalidate method, then we allow the caller to handle it.\n            if (invalidate) {\n                this.dirty = true;\n                invalidate();\n            }\n            else {\n                // Otherwise just execute the update now.\n                this.compute();\n            }\n        };\n\n        if (!ignoreFirstRun) {\n            this.compute();\n        }\n        else {\n            this.get();\n        }\n    }\n\n    removeBindings() {\n        var bindings = this.bindings;\n        if (bindings) {\n            var invalidate = this.invalidate;\n            for (var i = 0, l = bindings.length; i < l; ++i) {\n                var binding = bindings[i];\n                binding.ref.remove(invalidate);\n\n                // There can be cases when reading a value needs to compute a subscription.\n                // In that case we can dispose the subscription by adding the dispose method.\n                if (binding.dispose) {\n                    binding.dispose();\n                }\n            }\n            this.bindings = null;\n        }\n    }\n\n    dispose() {\n        this.removeBindings();\n        super.dispose();\n    }\n\n    update(value, invokeCallback = true) {\n        var previousValue = this.previousValue;\n        // Only invoke the watch callback if the value actually changed\n        // Note: Since in JavaScript NaN !== NaN, we have to separately test the case\n        // when they're both NaN's, by seeing if they're not equal to themselves.\n        if (previousValue === FirstExecutionMarker || (previousValue !== value && (previousValue === previousValue || value === value))) {\n            this.previousValue = value;\n            if (invokeCallback) {\n                this.callback(value);\n            }\n            return true;\n        }\n    }\n\n    apply() {\n        if (!this.isDisposed && this.dirty) {\n            return this.compute();\n        }\n    }\n\n    _computeInnerValue() {\n        // Remove all previous bindings.\n        this.dirty = false;\n        this.removeBindings();\n\n        var disposableParent = this.disposableParent;\n        if (disposableParent && disposableParent.isDisposed) {\n            // No need to run this anymore, our parent is now disposed and cannot receive any of our events anyway.\n            return;\n        }\n\n        // Note: We use an empty array by default to avoid allocating a new empty one every time we try to run.\n        // This optimization makes the assumption that most expressions are non-bindable, so no events are necessary.\n        // In that case the array can be used to collect future expressions. When the expression is actually bindable\n        // we reset the EmptyArray to a new empty one.\n\n        // However, it's possible that EmptyArray isn't empty, if there's a binding within a binding (e.g. this is\n        // possible with the @Cache decorator). To be sure, we use a flag to check whether EmptyArray is already in use.\n        // If it is, we have to create a new one, just to be on the safe side.\n        if (EmptyArrayInUse) {\n            EmptyArray = [];\n        }\n\n        EmptyArrayInUse = true;\n        var bindings = EmptyArray;\n\n        var value = Binder.run(bindings, this.valueGetter, this);\n        value = runFilters(bindings, value);\n\n        EmptyArrayInUse = false;\n\n        if (!bindings.length) {\n            return value;\n        }\n\n        // At this point, the empty array isn't empty any more, so make a new one :)\n        EmptyArray = [];\n\n        var invalidate = this.invalidate;\n        for (let i = 0, l = bindings.length; i < l; ++i) {\n            let binding = bindings[i];\n            binding.ref = Signal.on(binding.obj, binding.eventName, invalidate);\n        }\n\n        // Remember the bindings so we can dispose of them when they change\n        this.bindings = bindings;\n\n        return value;\n    }\n\n    compute() {\n        var value = this._computeInnerValue();\n        return this.update(value, true);\n    }\n\n    get() {\n        var value = this._computeInnerValue();\n        this.update(value, false);\n        return value;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/Binder.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "runFilters",
    "memberof": "@twist/core/src/Binder.jsx",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~runFilters",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "FirstExecutionMarker",
    "memberof": "@twist/core/src/Binder.jsx",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~FirstExecutionMarker",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "EmptyArray",
    "memberof": "@twist/core/src/Binder.jsx",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~EmptyArray",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "EmptyArrayInUse",
    "memberof": "@twist/core/src/Binder.jsx",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~EmptyArrayInUse",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "noop",
    "memberof": "@twist/core/src/Binder.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~noop",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "wrapGetterFunction",
    "memberof": "@twist/core/src/Binder.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~wrapGetterFunction",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "wrapSetterFunction",
    "memberof": "@twist/core/src/Binder.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~wrapSetterFunction",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "Binder",
    "memberof": "@twist/core/src/Binder.jsx",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/Binder.jsx",
    "importStyle": "Binder",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  FirstExecutionMarker\n})"
      }
    ],
    "interface": false,
    "extends": [
      "@twist/core/src/Disposable.js~Disposable"
    ]
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "mutatorsStack",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.mutatorsStack",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "active",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.active",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "mutator",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.mutator",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "pushMutator",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.pushMutator",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "mutator",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "popMutator",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.popMutator",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "mutator",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "run",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.run",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "bindings",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "recordEvent",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.recordEvent",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "recordChange",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Binder.jsx~Binder.recordChange",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "previousValue",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#previousValue",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "bindings",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#bindings",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "dirty",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#dirty",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "disposableParent",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#disposableParent",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "valueGetter",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#valueGetter",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "set",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#set",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "callback",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#callback",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "invalidate",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#invalidate",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "removeBindings",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#removeBindings",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "dispose",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#dispose",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "update",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#update",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "invokeCallback",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#apply",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "_computeInnerValue",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#_computeInnerValue",
    "access": "private",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "compute",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#compute",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "get",
    "memberof": "@twist/core/src/Binder.jsx~Binder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Binder.jsx~Binder#get",
    "access": "public",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "file",
    "name": "@twist/core/src/CollectionBinder.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ObservableBase from './internal/ObservableBase';\nimport Binder from './Binder';\nimport Signal from './Signal';\n\nimport Bind from './decorators/Bind';\n\nexport default class CollectionBinder extends Binder {\n\n    update(value, invokeCallback = true) {\n        const { previousValue } = this;\n        if (previousValue === value) {\n            // We just have the same collection. Most probably we've updated the length?\n            if (!this.lengthChanged) {\n                // Nothing really changed.\n                return false;\n            }\n\n            // Reset the flag back to normal.\n            this.lengthChanged = false;\n\n            if (invokeCallback) {\n                this.invokeCallback(value);\n            }\n\n            // The length event came, which ObservableArray uses to notify any mutation on the array,\n            // so we need to notify our caller about the mutation.\n            return true;\n        }\n\n        // This is the first time we actually compute this expression.\n        if (previousValue === this.FirstExecutionMarker) {\n            this.previousValue = value;\n        }\n        else if (previousValue && typeof previousValue === 'object') {\n            Signal.stopListening(this, previousValue);\n        }\n\n        // Reset any previous lengthChanged flag.\n        this.lengthChanged = false;\n\n        if (value && typeof value === 'object') {\n            // Just in case, attach our callback\n            Signal.listenTo(this, value, 'change', this.onLengthChanged);\n        }\n\n        if (invokeCallback) {\n            this.invokeCallback(value);\n        }\n\n        return true;\n    }\n\n    @Bind\n    onLengthChanged() {\n        // We flag the fact that we've received a lengthChanged event, so that we can check\n        // later on when the actual array is going to be the same. In that case, if the length flag is set\n        // we will actually resend the callback to the caller even though the array is actually the same, but it might\n        // have different items.\n        this.lengthChanged = true;\n        this.invalidate();\n    }\n\n    invokeCallback(value) {\n        if (value instanceof ObservableBase) {\n            this.callback(value.base);\n            return;\n        }\n        this.callback(value);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/CollectionBinder.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "CollectionBinder",
    "memberof": "@twist/core/src/CollectionBinder.jsx",
    "static": true,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/CollectionBinder.jsx",
    "importStyle": "CollectionBinder",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false,
    "extends": [
      "@twist/core/src/Binder.js~Binder"
    ]
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "update",
    "memberof": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder#update",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "invokeCallback",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "lengthChanged",
    "memberof": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "static": false,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder#lengthChanged",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "previousValue",
    "memberof": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "static": false,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder#previousValue",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "onLengthChanged",
    "memberof": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder#onLengthChanged",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "decorators": [
      {
        "name": "Bind",
        "arguments": null
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "invokeCallback",
    "memberof": "@twist/core/src/CollectionBinder.jsx~CollectionBinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/CollectionBinder.jsx~CollectionBinder#invokeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "@twist/core/src/Disposable.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nfunction disposeHelper(disposable) {\n    if (disposable.dispose) {\n        disposable.dispose();\n        return;\n    }\n\n    if (typeof disposable === 'function') {\n        disposable();\n    }\n}\n\nconst _disposables = Symbol('disposables');\nconst _isDisposed = Symbol('isDisposed');\n\n/**\n * A Disposable instance exposes an interface for cleaning up an object when it is no longer needed.\n * A disposable can be linked to any number of children disposables, so that when the parent is disposed,\n * children will also be disposed, and so on.\n */\nexport default class Disposable {\n\n    [_isDisposed] = false;\n\n    /**\n     * Whether or not the disposable object has already been disposed\n     */\n    get isDisposed() {\n        return this[_isDisposed];\n    }\n\n    /**\n     * Link a child Disposable to this disposable. When this class is disposed, the child will also be disposed.\n     * @param {Disposable} disposable\n     * @return {Disposable} the provided disposable\n     */\n    link(disposable) {\n        var disposables = this[_disposables];\n        if (!disposables) {\n            disposables = this[_disposables] = [];\n        }\n        disposables.push(disposable);\n        return disposable;\n    }\n\n    /**\n     * Unlink a child Disposable from this disposable. If the child is already unlinked, do nothing.\n     * @param {Disposable} disposable\n     */\n    unlink(disposable) {\n        var disposables = this[_disposables];\n        if (!disposables) {\n            return;\n        }\n\n        var index = disposables.indexOf(disposable);\n        if (index !== -1) {\n            disposables.splice(index, 1);\n        }\n    }\n\n    /**\n     * Unlink a child and dispose it.\n     * @param {Disposable} disposable\n     */\n    disposeLink(disposable) {\n        this.unlink(disposable);\n        disposeHelper(disposable);\n    }\n\n    /**\n     * Dispose this instance. Any disposables linked to this instance will also be disposed.\n     */\n    dispose() {\n        this[_isDisposed] = true;\n\n        var disposables = this[_disposables];\n        if (!disposables) {\n            return;\n        }\n\n        this[_disposables] = null;\n        for (var i = disposables.length - 1; i >= 0; --i) {\n            disposeHelper(disposables[i]);\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/Disposable.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "disposeHelper",
    "memberof": "@twist/core/src/Disposable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Disposable.jsx~disposeHelper",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Disposable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "disposable",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "_disposables",
    "memberof": "@twist/core/src/Disposable.jsx",
    "static": true,
    "longname": "@twist/core/src/Disposable.jsx~_disposables",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Disposable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "_isDisposed",
    "memberof": "@twist/core/src/Disposable.jsx",
    "static": true,
    "longname": "@twist/core/src/Disposable.jsx~_isDisposed",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Disposable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "Disposable",
    "memberof": "@twist/core/src/Disposable.jsx",
    "static": true,
    "longname": "@twist/core/src/Disposable.jsx~Disposable",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/Disposable.jsx",
    "importStyle": "Disposable",
    "description": "A Disposable instance exposes an interface for cleaning up an object when it is no longer needed.\nA disposable can be linked to any number of children disposables, so that when the parent is disposed,\nchildren will also be disposed, and so on.",
    "lineNumber": 33,
    "interface": false
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "_isDisposed",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#_isDisposed",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "get",
    "name": "isDisposed",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#isDisposed",
    "access": "public",
    "description": "Whether or not the disposable object has already been disposed",
    "lineNumber": 40,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "link",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#link",
    "access": "public",
    "description": "Link a child Disposable to this disposable. When this class is disposed, the child will also be disposed.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Disposable"
        ],
        "spread": false,
        "optional": false,
        "name": "disposable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Disposable"
      ],
      "spread": false,
      "description": "the provided disposable"
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "unlink",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#unlink",
    "access": "public",
    "description": "Unlink a child Disposable from this disposable. If the child is already unlinked, do nothing.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Disposable"
        ],
        "spread": false,
        "optional": false,
        "name": "disposable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "disposeLink",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#disposeLink",
    "access": "public",
    "description": "Unlink a child and dispose it.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Disposable"
        ],
        "spread": false,
        "optional": false,
        "name": "disposable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "dispose",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#dispose",
    "access": "public",
    "description": "Dispose this instance. Any disposables linked to this instance will also be disposed.",
    "lineNumber": 86,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "[_isDisposed]",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#[_isDisposed]",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "[_disposables]",
    "memberof": "@twist/core/src/Disposable.jsx~Disposable",
    "static": false,
    "longname": "@twist/core/src/Disposable.jsx~Disposable#[_disposables]",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "@twist/core/src/ObjectId.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nvar lastId = 0;\nvar propertyId = '__object_id__';\n\n/**\n * Associate a unique id with an object. This works by storing the id on a hidden property, so the\n * same object will always have the same id.\n */\nexport default class ObjectId {\n\n    static set(obj, id) {\n        Object.defineProperty(obj, propertyId, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: id\n        });\n    }\n\n    static get(obj) {\n        if (!obj || (typeof obj === 'number' || typeof obj === 'string')) {\n            return obj;\n        }\n\n        if (!obj.hasOwnProperty(propertyId)) {\n            var id = '_' + (++lastId);\n            ObjectId.set(obj, id);\n            return id;\n        }\n\n        return obj[propertyId];\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/ObjectId.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "lastId",
    "memberof": "@twist/core/src/ObjectId.jsx",
    "static": true,
    "longname": "@twist/core/src/ObjectId.jsx~lastId",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObjectId.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "propertyId",
    "memberof": "@twist/core/src/ObjectId.jsx",
    "static": true,
    "longname": "@twist/core/src/ObjectId.jsx~propertyId",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObjectId.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "class",
    "name": "ObjectId",
    "memberof": "@twist/core/src/ObjectId.jsx",
    "static": true,
    "longname": "@twist/core/src/ObjectId.jsx~ObjectId",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/ObjectId.jsx",
    "importStyle": "ObjectId",
    "description": "Associate a unique id with an object. This works by storing the id on a hidden property, so the\nsame object will always have the same id.",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "set",
    "memberof": "@twist/core/src/ObjectId.jsx~ObjectId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObjectId.jsx~ObjectId.set",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "get",
    "memberof": "@twist/core/src/ObjectId.jsx~ObjectId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObjectId.jsx~ObjectId.get",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "@twist/core/src/ObservableArray.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ObservableBase from './internal/ObservableBase';\n\nimport Signal from './Signal';\nimport Binder from './Binder';\nimport ArrayUtils from './internal/utils/ArrayUtils';\n\n// Polyfill Array.find() if necessary, so that ObservableArray also implements it.\nArrayUtils.polyfill();\n\n/**\n * @summary Wrapper for arrays so that they work with Twist's data binding.\n *\n * @description\n * A wrapper around the native JavaScript Array object to help Twist know when a change\n * occurs within the object.\n *\n * A few additional convenience methods are provided on top of the standard array methods\n */\nexport default class ObservableArray extends ObservableBase {\n    constructor(base) {\n        super();\n        this.base = base || [];\n    }\n\n    /**\n     * Proxy method for accessing array elements by index\n     *\n     * @param {number} i Index number of element to access\n     */\n    at(i) {\n        Binder.active && Binder.recordEvent(this, 'change');\n        return this.base[i];\n    }\n\n    /**\n     * Sets the element at a given index to provided value\n     *\n     * @param {number} i The index of the element to set in the array\n     * @param value The value to set the element as\n     */\n    setAt(i, value) {\n        this.base[i] = value;\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Creates a clone of the native array\n     */\n    toArray() {\n        Binder.active && Binder.recordEvent(this, 'change');\n        return this.base.slice();\n    }\n\n    /**\n     * Proxy method for array length\n     */\n    get length() {\n        Binder.active && Binder.recordEvent(this, 'change');\n        return this.base.length;\n    }\n\n    /**\n     * Resizes the array to a desired length\n     *\n     * @param {number} length The desired length of the resized array\n     */\n    set length(length) {\n        var prevLength = this.base.length;\n        if (prevLength === length) {\n            return;\n        }\n        this.base.length = length;\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Replaces the array wrapped by ObservableArray\n     *\n     * @param {Array} items The new array used to replace the ObservableArray's contents\n     */\n    swapItems(items) {\n        // Change the items directly. Repeat collection will make the actual diff for us.\n        this.base = items;\n\n        // Make the collection run.\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Removes a given item from the array\n     *\n     * @param item The item to be removed from the array\n     */\n    removeItem(item) {\n        var index = this.indexOf(item);\n        if (index !== -1) {\n            this.splice(index, 1);\n        }\n    }\n\n    /**\n     * Concatenate this array with other arrays, returning a new ObservableArray.\n     *\n     * @param {Array|ObservableArray...} otherArrays\n     */\n    concat(...otherArrays) {\n        Binder.active && Binder.recordEvent(this, 'change');\n        // To avoid creating unnecessary copies, directly access their base arrays.\n        return new ObservableArray(this.base.concat(...otherArrays.map((arr) => {\n            if (arr instanceof ObservableArray) {\n                Binder.active && Binder.recordEvent(arr, 'change');\n                return arr.base;\n            }\n            return arr;\n        })));\n    }\n\n    /**\n     * Concatenate this array with other arrays, returning a plain array.\n     *\n     * @param {Array|ObservableArray...} otherArrays\n     */\n    concatToArray(...otherArrays) {\n        return this.concat.apply(this, otherArrays).base;\n    }\n\n    /**\n     * Splice, returning the result a plain array.\n     */\n    spliceToArray() {\n        return this.splice.apply(this, arguments).base;\n    }\n\n    /**\n     * Slice, returning the result a plain array.\n     */\n    sliceToArray() {\n        return this.slice.apply(this, arguments).base;\n    }\n\n    /**\n     * Slice, returning the result a plain array.\n     */\n    mapToArray() {\n        return this.map.apply(this, arguments).base;\n    }\n\n    /**\n     * Slice, returning the result a plain array.\n     */\n    filterToArray() {\n        return this.filter.apply(this, arguments).base;\n    }\n\n}\n\nvar ArrayPrototype = Array.prototype;\nvar ObservableArrayPrototype = ObservableArray.prototype;\n\nvar mutators = [ 'fill', 'pop', 'push', 'reverse', 'shift', 'unshift', 'splice', 'sort', 'copyWithin' ];\n\nfunction wrapResult(result, caller) {\n    if (result instanceof Array) {\n        // Certain mutator methods (reverse, copyWithin, fill, sort) returns a reference to the mutated Array.\n        // This preserves the equality relationship, and removes the need to create a new instance.\n        if (caller.base === result) {\n            return caller;\n        }\n        return new ObservableArray(result);\n    }\n    return result;\n}\n\nfunction createMethod(fn, mutator) {\n    if (!mutator) {\n        return function() {\n            // Make sure we detect changes to the result of this method when the change event is recorded.\n            Binder.active && Binder.recordEvent(this, 'change');\n            return wrapResult(fn.apply(this.base, arguments), this);\n        };\n    }\n\n    return function() {\n        var result = fn.apply(this.base, arguments);\n        Signal.trigger(this, 'change');\n        return wrapResult(result, this);\n    };\n}\n\nvar props = Object.getOwnPropertyNames(ArrayPrototype);\nfor (var i = 0, l = props.length; i < l; ++i) {\n    var key = props[i];\n    if (ObservableArrayPrototype.hasOwnProperty(key)) {\n        continue;\n    }\n    ObservableArrayPrototype[key] = createMethod(ArrayPrototype[key], mutators.indexOf(key) !== -1);\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/ObservableArray.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "ObservableArray",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": "ObservableArray",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "Wrapper for arrays so that they work with Twist's data binding."
      },
      {
        "tagName": "@description",
        "tagValue": "A wrapper around the native JavaScript Array object to help Twist know when a change\noccurs within the object.\n\nA few additional convenience methods are provided on top of the standard array methods"
      }
    ],
    "interface": false,
    "extends": [
      "@twist/core/src/internal/ObservableBase.js~ObservableBase"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "base",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#base",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "at",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#at",
    "access": "public",
    "description": "Proxy method for accessing array elements by index",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Index number of element to access"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "setAt",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#setAt",
    "access": "public",
    "description": "Sets the element at a given index to provided value",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "The index of the element to set in the array"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set the element as"
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "toArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#toArray",
    "access": "public",
    "description": "Creates a clone of the native array",
    "lineNumber": 62,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "get",
    "name": "length",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#length",
    "access": "public",
    "description": "Proxy method for array length",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "set",
    "name": "length",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#length",
    "access": "public",
    "description": "Resizes the array to a desired length",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "The desired length of the resized array"
      }
    ]
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "swapItems",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#swapItems",
    "access": "public",
    "description": "Replaces the array wrapped by ObservableArray",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The new array used to replace the ObservableArray's contents"
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "removeItem",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#removeItem",
    "access": "public",
    "description": "Removes a given item from the array",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to be removed from the array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "concat",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#concat",
    "access": "public",
    "description": "Concatenate this array with other arrays, returning a new ObservableArray.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "ObservableArray..."
        ],
        "spread": false,
        "optional": false,
        "name": "otherArrays",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "concatToArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#concatToArray",
    "access": "public",
    "description": "Concatenate this array with other arrays, returning a plain array.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "ObservableArray..."
        ],
        "spread": false,
        "optional": false,
        "name": "otherArrays",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "spliceToArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#spliceToArray",
    "access": "public",
    "description": "Splice, returning the result a plain array.",
    "lineNumber": 143,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "sliceToArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#sliceToArray",
    "access": "public",
    "description": "Slice, returning the result a plain array.",
    "lineNumber": 150,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "mapToArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#mapToArray",
    "access": "public",
    "description": "Slice, returning the result a plain array.",
    "lineNumber": 157,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "filterToArray",
    "memberof": "@twist/core/src/ObservableArray.jsx~ObservableArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArray#filterToArray",
    "access": "public",
    "description": "Slice, returning the result a plain array.",
    "lineNumber": 164,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "variable",
    "name": "ArrayPrototype",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~ArrayPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "ObservableArrayPrototype",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~ObservableArrayPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "mutators",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~mutators",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "wrapResult",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~wrapResult",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "caller",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "createMethod",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~createMethod",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "mutator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "props",
    "memberof": "@twist/core/src/ObservableArray.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableArray.jsx~props",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableArray.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "@twist/core/src/ObservableMap.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ObservableBase from './internal/ObservableBase';\n\nimport Signal from './Signal';\nimport Binder from './Binder';\n\n/**\n * @summary Wrapper for maps so that they work with Twist's data binding.\n *\n * @description\n * A wrapper around the native JavaScript Map object to help Twist know when a change\n * occurs within the object.\n */\nexport default class ObservableMap extends ObservableBase {\n\n    constructor(base = new Map) {\n        super();\n        this._swapItems(base);\n    }\n\n    /** @private */\n    _swapItems(base) {\n        if (base instanceof Map) {\n            this.base = base;\n        }\n        else {\n            this.base = new Map;\n            for (let key in base) {\n                this.base.set(key, base[key]);\n            }\n        }\n    }\n\n    /**\n     * Replaces the Map wrapped by ObservableMap\n     *\n     * @param {Map|Object} items The new Map or Object used to replace the ObservableMap's contents\n     */\n    swapItems(items) {\n        this._swapItems(items);\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Returns a boolean for the presence of a given key\n     *\n     * @param key The key to check\n     */\n    has(key) {\n        if (Binder.active) {\n            Binder.recordEvent(this, '' + key);\n            Binder.recordEvent(this, 'change');\n        }\n        return this.base.has(key);\n    }\n\n    /**\n     * Returns the value stored for a given key\n     *\n     * @param key The key to retrieve the value of\n     */\n    get(key) {\n        if (Binder.active) {\n            Binder.recordEvent(this, '' + key);\n            Binder.recordEvent(this, 'change');\n        }\n        return this.base.get(key);\n    }\n\n    /**\n     * Creates a new entry in the map\n     *\n     * @param key The key of the new entry\n     * @param value The value of the new entry\n     * @returns {ObservableMap} The map itself (allowing you to chain calls to set).\n     */\n    set(key, value) {\n        if (this.base.get(key) === value) {\n            return;\n        }\n        this.base.set(key, value);\n        Signal.trigger(this, '' + key);\n        Signal.trigger(this, 'change');\n        return this;\n    }\n\n    /**\n     * Removes all entries from the map\n     */\n    clear() {\n        var keys = [];\n        this.base.forEach((value, key) => keys.push(key));\n        this.base.clear();\n\n        keys.forEach((key) => Signal.trigger(this, '' + key));\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Deletes the entry under a given key\n     * @param key The key to be removed\n     * @returns {Boolean} Whether the delete was successful\n     */\n    delete(key) {\n        let success = this.base.delete(key);\n\n        Signal.trigger(this, '' + key);\n        Signal.trigger(this, 'change');\n        return success;\n    }\n\n    /**\n     * Returns the number of keys in the map\n     */\n    get size() {\n        Binder.active && Binder.recordEvent(this, 'change');\n        return this.base.size;\n    }\n\n    /**\n     * Alias for size\n     */\n    get length() {\n        return this.size;\n    }\n\n}\n\n\nvar MapPrototype = Map.prototype;\nvar ObservableMapPrototype = ObservableMap.prototype;\n\nfunction createMethod(fn) {\n    return function() {\n        // Make sure we detect changes to the result of this method when the change event is recorded.\n        Binder.active && Binder.recordEvent(this, 'change');\n        return fn.apply(this.base, arguments);\n    };\n}\n\nvar props = Object.getOwnPropertyNames(MapPrototype);\nfor (var i = 0, l = props.length; i < l; ++i) {\n    var key = props[i];\n    if (!ObservableMapPrototype.hasOwnProperty(key)) {\n        ObservableMapPrototype[key] = createMethod(MapPrototype[key]);\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/ObservableMap.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "ObservableMap",
    "memberof": "@twist/core/src/ObservableMap.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/ObservableMap.jsx",
    "importStyle": "ObservableMap",
    "description": "",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "Wrapper for maps so that they work with Twist's data binding."
      },
      {
        "tagName": "@description",
        "tagValue": "A wrapper around the native JavaScript Map object to help Twist know when a change\noccurs within the object."
      }
    ],
    "interface": false,
    "extends": [
      "@twist/core/src/internal/ObservableBase.js~ObservableBase"
    ]
  },
  {
    "__docId__": 344,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "_swapItems",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#_swapItems",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "base",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#base",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "swapItems",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#swapItems",
    "access": "public",
    "description": "Replaces the Map wrapped by ObservableMap",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The new Map or Object used to replace the ObservableMap's contents"
      }
    ],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "has",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#has",
    "access": "public",
    "description": "Returns a boolean for the presence of a given key",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to check"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "get",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#get",
    "access": "public",
    "description": "Returns the value stored for a given key",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to retrieve the value of"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "set",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#set",
    "access": "public",
    "description": "Creates a new entry in the map",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ObservableMap} The map itself (allowing you to chain calls to set)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the new entry"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the new entry"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ObservableMap"
      ],
      "spread": false,
      "description": "The map itself (allowing you to chain calls to set)."
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "clear",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#clear",
    "access": "public",
    "description": "Removes all entries from the map",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "delete",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#delete",
    "access": "public",
    "description": "Deletes the entry under a given key",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the delete was successful"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key to be removed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the delete was successful"
    }
  },
  {
    "__docId__": 354,
    "kind": "get",
    "name": "size",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#size",
    "access": "public",
    "description": "Returns the number of keys in the map",
    "lineNumber": 127,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "get",
    "name": "length",
    "memberof": "@twist/core/src/ObservableMap.jsx~ObservableMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMap#length",
    "access": "public",
    "description": "Alias for size",
    "lineNumber": 135,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "variable",
    "name": "MapPrototype",
    "memberof": "@twist/core/src/ObservableMap.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableMap.jsx~MapPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableMap.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "ObservableMapPrototype",
    "memberof": "@twist/core/src/ObservableMap.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableMap.jsx~ObservableMapPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableMap.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "createMethod",
    "memberof": "@twist/core/src/ObservableMap.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObservableMap.jsx~createMethod",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableMap.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "variable",
    "name": "props",
    "memberof": "@twist/core/src/ObservableMap.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableMap.jsx~props",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableMap.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "@twist/core/src/ObservableSet.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ObservableBase from './internal/ObservableBase';\n\nimport Signal from './Signal';\nimport Binder from './Binder';\n\n/**\n * @summary Wrapper for sets so that they work with Twist's data binding.\n *\n * @description\n * A wrapper around the native JavaScript Set object to help Twist know when a change\n * occurs within the object.\n */\nexport default class ObservableSet extends ObservableBase {\n\n    constructor(base = new Set) {\n        super();\n        this._swapItems(base);\n    }\n\n    /** @private */\n    _swapItems(base) {\n        if (base instanceof Set) {\n            this.base = base;\n        }\n        else if (typeof base[Symbol.iterator] === 'function') {\n            this.base = new Set(base);\n        }\n        else {\n            throw new Error('ObservableSet expects either a Set object or an iterable object.');\n        }\n    }\n\n    /**\n     * Replaces the Set wrapped by ObservableSet\n     *\n     * @param {Set|Iterable} base The new Set or Iterable object used to replace the ObservableSet's contents\n     */\n    swapItems(base) {\n        this._swapItems(base);\n        Signal.trigger(this, 'change');\n    }\n\n    /**\n     * Returns the number of values stored in the set\n     */\n    get size() {\n        Binder.active && Binder.recordEvent(this, 'change');\n        return this.base.size;\n    }\n\n    /**\n     * Alias for size\n     */\n    get length() {\n        return this.size;\n    }\n}\n\nvar SetPrototype = Set.prototype;\nvar ObservableSetPrototype = ObservableSet.prototype;\n\nvar mutators = [ 'add', 'clear', 'delete' ];\nfunction createMethod(fn, mutator) {\n    if (!mutator) {\n        return function() {\n            // Make sure we detect changes to the result of this method when the change event is recorded.\n            Binder.active && Binder.recordEvent(this, 'change');\n            return fn.apply(this.base, arguments);\n        };\n    }\n\n    return function() {\n        var result = fn.apply(this.base, arguments);\n        Signal.trigger(this, 'change');\n        return result;\n    };\n}\n\nvar props = Object.getOwnPropertyNames(SetPrototype);\nfor (var i = 0, l = props.length; i < l; ++i) {\n    var key = props[i];\n    if (ObservableSetPrototype.hasOwnProperty(key)) {\n        continue;\n    }\n    ObservableSetPrototype[key] = createMethod(SetPrototype[key], mutators.indexOf(key) !== -1);\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/ObservableSet.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "class",
    "name": "ObservableSet",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": "ObservableSet",
    "description": "",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "Wrapper for sets so that they work with Twist's data binding."
      },
      {
        "tagName": "@description",
        "tagValue": "A wrapper around the native JavaScript Set object to help Twist know when a change\noccurs within the object."
      }
    ],
    "interface": false,
    "extends": [
      "@twist/core/src/internal/ObservableBase.js~ObservableBase"
    ]
  },
  {
    "__docId__": 362,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "_swapItems",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#_swapItems",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "base",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#base",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "swapItems",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#swapItems",
    "access": "public",
    "description": "Replaces the Set wrapped by ObservableSet",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set",
          "Iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "base",
        "description": "The new Set or Iterable object used to replace the ObservableSet's contents"
      }
    ],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "get",
    "name": "size",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#size",
    "access": "public",
    "description": "Returns the number of values stored in the set",
    "lineNumber": 59,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "get",
    "name": "length",
    "memberof": "@twist/core/src/ObservableSet.jsx~ObservableSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSet#length",
    "access": "public",
    "description": "Alias for size",
    "lineNumber": 67,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "variable",
    "name": "SetPrototype",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~SetPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "ObservableSetPrototype",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~ObservableSetPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "mutators",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~mutators",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "createMethod",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~createMethod",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "mutator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "props",
    "memberof": "@twist/core/src/ObservableSet.jsx",
    "static": true,
    "longname": "@twist/core/src/ObservableSet.jsx~props",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/ObservableSet.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "@twist/core/src/Scope.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport SignalDispatcher from './SignalDispatcher';\n\nexport default class Scope extends SignalDispatcher {\n\n    fork() {\n        var Fork = function() {};\n        Fork.prototype = this;\n        return this.link(new Fork(this));\n    }\n\n    clean() {\n        for (var prop in this) {\n            if (this.hasOwnProperty(prop) && prop[0] !== '_') {\n                delete this[prop];\n            }\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/Scope.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "Scope",
    "memberof": "@twist/core/src/Scope.jsx",
    "static": true,
    "longname": "@twist/core/src/Scope.jsx~Scope",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/Scope.jsx",
    "importStyle": "Scope",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "@twist/core/src/SignalDispatcher.js~SignalDispatcher"
    ]
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "fork",
    "memberof": "@twist/core/src/Scope.jsx~Scope",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Scope.jsx~Scope#fork",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "clean",
    "memberof": "@twist/core/src/Scope.jsx~Scope",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Scope.jsx~Scope#clean",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "@twist/core/src/Signal.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst _signals = Symbol('signals');\nconst _owner = Symbol('owner');\n\n/** @private Needed by SignalDispatcher */\nexport var SignalsProperty = _signals;\n\nexport default class Signal {\n\n    [_owner];\n\n    constructor(owner) {\n        this[_owner] = owner;\n        this.handlers = [];\n    }\n\n    add(handler) {\n        this.handlers.push(handler);\n    }\n\n    remove(handler) {\n        var handlers = this.handlers;\n        var index = handlers.indexOf(handler);\n        if (index !== -1) {\n            handlers.splice(index, 1);\n        }\n    }\n\n    trigger() {\n        var handlers = this.handlers.slice();\n        var owner = this[_owner];\n        for (var i = 0, l = handlers.length; i < l; ++i) {\n            var handler = handlers[i];\n            handler.apply(owner, arguments);\n        }\n    }\n\n    triggerNoArgs() {\n        var handlers = this.handlers.slice();\n        var owner = this[_owner];\n        for (var i = 0, l = handlers.length; i < l; ++i) {\n            handlers[i].call(owner);\n        }\n    }\n\n    triggerWithArray(args) {\n        var handlers = this.handlers.slice();\n        var owner = this[_owner];\n        for (var i = 0, l = handlers.length; i < l; ++i) {\n            var handler = handlers[i];\n            handler.apply(owner, args);\n        }\n    }\n\n    static trigger(obj, name) {\n        var signals = obj[_signals];\n        if (!signals || signals[_owner] !== obj) {\n            return;\n        }\n\n        var signal = signals[name];\n        if (!signal) {\n            return;\n        }\n\n        signal.triggerWithArray(Array.prototype.slice.call(arguments, 2));\n\n        return signal;\n    }\n\n    static triggerNoArgs(obj, name) {\n        var signals = obj[_signals];\n        if (!signals || signals[_owner] !== obj) {\n            return;\n        }\n\n        var signal = signals[name];\n        if (!signal) {\n            return;\n        }\n\n        signal.triggerNoArgs();\n\n        return signal;\n    }\n\n    static on(obj, name, handler) {\n        var signals = obj[_signals];\n\n        if (!signals || signals[_owner] !== obj) {\n            signals = {};\n            signals[_owner] = obj;\n            Object.defineProperty(obj, _signals, {\n                enumerable: false,\n                configurable: false,\n                value: signals\n            });\n        }\n\n        var signal = signals[name];\n        if (!signal) {\n            signal = signals[name] = new Signal(obj);\n        }\n\n        signal.handlers.push(handler);\n\n        return signal;\n    }\n\n    static off(obj, name, handler) {\n        var signals = obj[_signals];\n        if (!signals || signals[_owner] !== obj) {\n            return;\n        }\n\n        var signal = signals[name];\n        if (!signal) {\n            return;\n        }\n\n        signal.remove(handler);\n    }\n\n    static listenTo(thisObj, obj, name, method) {\n        var listening = thisObj._listening;\n        if (!listening) {\n            thisObj._listening = listening = [];\n        }\n        var handler = function() {\n            method.apply(thisObj, arguments);\n        };\n        listening.push({ obj, name, method, handler });\n        Signal.on(obj, name, handler);\n    }\n\n    static stopListening(thisObj, obj, name, method) {\n        var listening = thisObj._listening;\n        if (!listening) {\n            return;\n        }\n        for (var i = 0, l = listening.length; i < l;) {\n            var signal = listening[i];\n            if ((obj && signal.obj !== obj)\n                || (name && signal.name !== name)\n                || (method && signal.method !== method)) {\n                ++i;\n                continue;\n            }\n            // Do not increment i, as we've just removed that listener.\n            Signal.off(signal.obj, signal.name, signal.handler);\n            listening.splice(i, 1);\n\n            // Update the length to reflect the fact that we've removed one item.\n            --l;\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/Signal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "_signals",
    "memberof": "@twist/core/src/Signal.jsx",
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~_signals",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Signal.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "_owner",
    "memberof": "@twist/core/src/Signal.jsx",
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~_owner",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/core/src/Signal.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "SignalsProperty",
    "memberof": "@twist/core/src/Signal.jsx",
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~SignalsProperty",
    "access": "private",
    "export": true,
    "importPath": "twist-site/@twist/core/src/Signal.jsx",
    "importStyle": "{SignalsProperty}",
    "description": null,
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "class",
    "name": "Signal",
    "memberof": "@twist/core/src/Signal.jsx",
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/Signal.jsx",
    "importStyle": "Signal",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "_owner",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#_owner",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "[_owner]",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#[_owner]",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "handlers",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#handlers",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "add",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#add",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "remove",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#remove",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "trigger",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#trigger",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "triggerNoArgs",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#triggerNoArgs",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "triggerWithArray",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/Signal.jsx~Signal#triggerWithArray",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "trigger",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.trigger",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "triggerNoArgs",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.triggerNoArgs",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "on",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.on",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "off",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.off",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "listenTo",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.listenTo",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "thisObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "stopListening",
    "memberof": "@twist/core/src/Signal.jsx~Signal",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/Signal.jsx~Signal.stopListening",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "thisObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "@twist/core/src/SignalDispatcher.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Disposable from './Disposable';\nimport Signal from './Signal';\nimport Binder from './Binder';\nimport CollectionBinder from './CollectionBinder';\nimport TaskQueue from './TaskQueue';\nimport { SignalsProperty } from './Signal';\n\nconst noop = function() {};\n\nexport default class SignalDispatcher extends Disposable {\n\n    watch(valueGetter, callback = noop, ignoreFirstRun = false, invalidate = TaskQueue, priority = this.$_depth || 0) {\n        if (valueGetter instanceof Array) {\n            valueGetter = () => valueGetter.map((fn) => fn());\n            callback = (result) => callback.apply(null, result);\n        }\n        return this.link(new Binder(valueGetter, callback, ignoreFirstRun, invalidate, priority, this));\n    }\n\n    watchCollection(valueGetter, callback = noop, ignoreFirstRun = false, invalidate = TaskQueue, priority = this.$_depth || 0) {\n        return this.link(new CollectionBinder(valueGetter, callback, ignoreFirstRun, invalidate, priority, this));\n    }\n\n    defineObservable(key, defaultValue) {\n        if (this.hasOwnProperty(key)) {\n            this[key] = defaultValue;\n            return;\n        }\n\n        var hiddenKey = Symbol(key);\n        this[hiddenKey] = defaultValue;\n\n        var self = this;\n\n        Object.defineProperty(this, key, {\n            configurable: true,\n            enumerable: false,\n            get() {\n                Binder.active && Binder.recordEvent(self, key);\n                return self[hiddenKey];\n            },\n            set(value) {\n                var oldValue = self[hiddenKey];\n                if (oldValue === value) {\n                    return;\n                }\n                self[hiddenKey] = value;\n                Binder.recordChange(self, key, value, oldValue);\n            }\n        });\n    }\n\n    dispose() {\n        this.stopListening();\n        super.dispose();\n    }\n\n    trigger(name, ...args) {\n        if (!this.hasOwnProperty(SignalsProperty)) {\n            return;\n        }\n        var signals = this[SignalsProperty];\n        var signal = signals[name];\n        if (!signal) {\n            return;\n        }\n        signal.trigger.apply(signal, args);\n    }\n\n    on(name, handler) {\n        return Signal.on(this, name, handler);\n    }\n\n    off(name, handler) {\n        return Signal.off(this, name, handler);\n    }\n\n    listenTo(obj, name, method) {\n        return Signal.listenTo(this, obj, name, method);\n    }\n\n    stopListening(obj, name, method) {\n        return Signal.stopListening(this, obj, name, method);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/SignalDispatcher.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "noop",
    "memberof": "@twist/core/src/SignalDispatcher.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/SignalDispatcher.jsx~noop",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/SignalDispatcher.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "SignalDispatcher",
    "memberof": "@twist/core/src/SignalDispatcher.jsx",
    "static": true,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/SignalDispatcher.jsx",
    "importStyle": "SignalDispatcher",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "@twist/core/src/Disposable.js~Disposable"
    ]
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "watch",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#watch",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "valueGetter",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "noop",
        "defaultValue": "noop"
      },
      {
        "name": "ignoreFirstRun",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "invalidate",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "TaskQueue",
        "defaultValue": "TaskQueue"
      },
      {
        "name": "priority",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "watchCollection",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#watchCollection",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "valueGetter",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "noop",
        "defaultValue": "noop"
      },
      {
        "name": "ignoreFirstRun",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "invalidate",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "TaskQueue",
        "defaultValue": "TaskQueue"
      },
      {
        "name": "priority",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "defineObservable",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#defineObservable",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "[key]",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "[hiddenKey]",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#[hiddenKey]",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "dispose",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#dispose",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "trigger",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#trigger",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "on",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#on",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "off",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#off",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "listenTo",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#listenTo",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "stopListening",
    "memberof": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/SignalDispatcher.jsx~SignalDispatcher#stopListening",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "@twist/core/src/TaskQueue.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport NestedTaskQueue from './internal/queue/NestedTaskQueue';\nimport rAF from './internal/queue/rAF';\n\nexport default new NestedTaskQueue(rAF, 'Task Queue', 100);\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/TaskQueue.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "file",
    "name": "@twist/core/src/decorators/Abstract.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nexport default function Abstract(target, property, descriptor) {\n    descriptor.writable = true;\n    descriptor.value = function() {\n        throw new Error(`Abstract method ${ property } called on ${ target.constructor.name }`);\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Abstract.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "Abstract",
    "memberof": "@twist/core/src/decorators/Abstract.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Abstract.jsx~Abstract",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Abstract.jsx",
    "importStyle": "Abstract",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "file",
    "name": "@twist/core/src/decorators/Action.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport BaseStore from '../BaseStore';\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\n\nexport default DecoratorUtils.makePropertyDecorator((target, property, descriptor, options = {}) => {\n    if (typeof descriptor.value !== 'function') {\n        throw new Error('@Action can only be used with a method (the handler for the action)');\n    }\n\n    if (!(target instanceof BaseStore)) {\n        throw new Error('@Action can only be used for methods on a Store');\n    }\n\n    // Make sure you don't use reserved characters in an action name\n    if (property.indexOf('/') !== -1) {\n        throw new Error('@Action name can\\'t include the \"/\" character');\n    }\n    if (property.indexOf('@') !== -1) {\n        throw new Error('@Action name can\\'t include the \"@\" character');\n    }\n\n    // Note: right now the actions have the same name as the method, but we could support an alias\n    target.__actionHandlers = target.__actionHandlers || {};\n    target.__actionHandlers[property] = {\n        name: property,\n        options\n    };\n}, {\n    throwOnClassInvocation: '@Action must be used on a method, not a class.'\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Action.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 416,
    "kind": "file",
    "name": "@twist/core/src/decorators/Bind.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\n\nexport default function Bind(target, property, descriptor) {\n    const fn = DecoratorUtils.getInitialValue(descriptor);\n    if (typeof fn !== 'function') {\n        throw new Error(`@Bind can only be applied to a function. (property: ${property})`);\n    }\n\n    delete descriptor.value;\n    delete descriptor.writable;\n    descriptor.get = function() {\n        if (target === this) {\n            return fn; // If it's accessed via `prototype` the first time, we don't want to bind to the prototype.\n        }\n        // Next time just return the bound value directly.\n        const bound = fn.bind(this);\n        Object.defineProperty(this, property, { configurable: true, enumerable: false, value: bound });\n        return bound;\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Bind.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "function",
    "name": "Bind",
    "memberof": "@twist/core/src/decorators/Bind.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Bind.jsx~Bind",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Bind.jsx",
    "importStyle": "Bind",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "file",
    "name": "@twist/core/src/decorators/Cache.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    @Cache is similar to @Memoize, except that it allows the value to be recomputed when anything it depends on changes.\n\n    It works by setting up a watch on the expression, the first time it's evaluated. It caches the result of the expression,\n    and returns that when anyone calls the getter - only reevaluating it if the binder becomes dirty. When the bound expression\n    is invalidated, it simply propagates a Binder change event, to trigger anybody to re-call the getter.\n**/\n\nimport Binder from '../Binder';\nimport Disposable from '../Disposable';\n\nconst binderRecordEvent = Binder.recordEvent;\nconst binderRecordChange = Binder.recordChange;\n\nexport default function(target, property, descriptor) {\n    if (!descriptor.get) {\n        throw new Error('@Cache can only be applied on getters.');\n    }\n\n    if (typeof target === 'function') {\n        throw new Error('@Cache cannot be used with static getters.');\n    }\n\n    if (!(target instanceof Disposable)) {\n        throw new Error('@Cache can only be used on a Disposable class.');\n    }\n\n    const _hiddenKey = Symbol(property);\n    const _binderKey = Symbol('binder.' + property);\n\n    const onInvalidate = function() {\n        if (Binder.mutator) {\n            // If somebody is listening to the mutations, we need to eagerly compute the new value,\n            // otherwise we could do it lazily.\n            const oldValue = this[_hiddenKey];\n            const value = this[_binderKey].get();\n            if (oldValue === value) {\n                return;\n            }\n            this[_hiddenKey] = value;\n\n            binderRecordChange(this, property, value, oldValue);\n            return;\n        }\n\n        // We record that the data changed - this will trigger any bound expressions to call the getter again.\n        binderRecordChange(this, property);\n    };\n\n    const fn = descriptor.get;\n\n    descriptor.get = function() {\n        Binder.active && binderRecordEvent(this, property);\n        let binder = this[_binderKey];\n\n        if (!binder) {\n            // Create a new binder: This always executes the getter immediately, so we just read it back\n            // from the previousValue. For future updates, we'll get called when the binder is invalidated.\n            const getter = fn.bind(this);\n            binder = this.link(new Binder(getter, undefined, true, onInvalidate.bind(this), undefined, this));\n            this[_binderKey] = binder;\n            this[_hiddenKey] = binder.previousValue;\n        }\n\n        if (binder.dirty) {\n            this[_hiddenKey] = binder.get();\n        }\n\n        return this[_hiddenKey];\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Cache.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "variable",
    "name": "binderRecordEvent",
    "memberof": "@twist/core/src/decorators/Cache.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/Cache.jsx~binderRecordEvent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/Cache.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 420,
    "kind": "variable",
    "name": "binderRecordChange",
    "memberof": "@twist/core/src/decorators/Cache.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/Cache.jsx~binderRecordChange",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/Cache.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 421,
    "kind": "function",
    "name": "Cache",
    "memberof": "@twist/core/src/decorators/Cache.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Cache.jsx~Cache",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Cache.jsx",
    "importStyle": "Cache",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "file",
    "name": "@twist/core/src/decorators/Debounce.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport wrap from './Wrap';\nimport debounce from '../third_party/debounce';\n\nexport default function(wait = 0, options) {\n    return wrap(debounce, 'Now', wait, options);\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Debounce.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 423,
    "kind": "function",
    "name": "Debounce",
    "memberof": "@twist/core/src/decorators/Debounce.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Debounce.jsx~Debounce",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Debounce.jsx",
    "importStyle": "Debounce",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "wait",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "file",
    "name": "@twist/core/src/decorators/Delay.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Wrap from './Wrap';\n\nexport default function(wait = 0) {\n    function wrapper(fn) {\n        let timeout;\n\n        function delayedFn(...args) {\n            timeout = setTimeout(() => {\n                fn.apply(this, args);\n            }, wait);\n        }\n\n        delayedFn.cancel = function() {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n        };\n\n        return delayedFn;\n    }\n\n    return new Wrap(wrapper, 'Now');\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Delay.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 425,
    "kind": "function",
    "name": "Delay",
    "memberof": "@twist/core/src/decorators/Delay.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Delay.jsx~Delay",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Delay.jsx",
    "importStyle": "Delay",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "wait",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "file",
    "name": "@twist/core/src/decorators/Memoize.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nexport default function Memoize(target, property, descriptor) {\n    var hiddenKey = '_' + property;\n    var getter = descriptor.get;\n\n    if (!getter) {\n        throw new Error('@Memoize can only be applied on getters.');\n    }\n\n    descriptor.get = function() {\n        if (this.hasOwnProperty(hiddenKey)) {\n            // Some browsers (Safari!!!) will not honor the defineProperty immediately, so we need to avoid\n            // calling the getter again as it might create new objects.\n            return this[hiddenKey];\n        }\n\n        var value = getter.call(this);\n        this[hiddenKey] = value;\n\n        // Next time just return the computed value directly.\n        Object.defineProperty(this, property, { configurable: true, value });\n\n        return value;\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Memoize.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "Memoize",
    "memberof": "@twist/core/src/decorators/Memoize.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Memoize.jsx~Memoize",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Memoize.jsx",
    "importStyle": "Memoize",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "@twist/core/src/decorators/Observable.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Binder from '../Binder';\n\nconst binderRecordEvent = Binder.recordEvent;\nconst binderRecordChange = Binder.recordChange;\nconst PropertyDefaultValue = { defaultValue: true };\n\nexport default function Observable(target, property, descriptor) {\n    // Note: We use Symbol.for so that the same property name has the same symbol, because we\n    // need to check the superclass if the observable was already defined.\n    const hiddenKey = Symbol.for('observable.' + property);\n\n    const init = descriptor.initializer;\n    if (init) {\n        Object.defineProperty(target, hiddenKey, {\n            configurable: true,\n            enumerable: false,\n            writable: true,\n            value: PropertyDefaultValue\n        });\n    }\n    else if (target[hiddenKey] === PropertyDefaultValue) {\n        // The parent class already defined this property.\n\n        // NOTE: Ideally, we would just *not* define a property here and let this property fall through the prototype\n        // chain. However, transform-decorators-legacy requires us to define a property, using either the descriptor\n        // passed to this function or the return value here. So we'll shim one in for now that just redirects upward.\n        return {\n            configurable: true,\n            enumerable: false,\n            get() {\n                delete target[property];\n                return this[property];\n            },\n            set(value) {\n                delete target[property];\n                this[property] = value;\n            }\n        };\n    }\n\n    // Make a map of defined observables, so we can emit warnings if they\n    // mistakenly use @Observable instead of @Attribute.\n    var definedObservables = target.definedObservables;\n\n    // We might have inherited the definedObservables. Check for own property.\n    if (!target.hasOwnProperty('definedObservables')) {\n        definedObservables = definedObservables ? Object.assign({}, definedObservables) : {};\n        Object.defineProperty(target, 'definedObservables', {\n            configurable: true,\n            enumerable: false,\n            writable: true,\n            value: definedObservables\n        });\n    }\n\n    definedObservables[property] = true;\n    return {\n        configurable: true,\n        enumerable: false,\n        get() {\n            Binder.active && binderRecordEvent(this, property);\n            var value = this[hiddenKey];\n            if (value === PropertyDefaultValue) {\n                value = this[hiddenKey] = init.call(this);\n            }\n            return value;\n        },\n        set(value) {\n            var oldValue = this[hiddenKey];\n            if (oldValue === PropertyDefaultValue) {\n                oldValue = this[hiddenKey] = init.call(this);\n            }\n            // If the values are the same don't notify anyone\n            // Note: Since in JavaScript NaN !== NaN, we have to separately test the case\n            // when they're both NaN's, by seeing if they're not equal to themselves.\n            if (oldValue === value || (oldValue !== oldValue && value !== value)) {\n                return;\n            }\n            this[hiddenKey] = value;\n            binderRecordChange(this, property, value, oldValue);\n        }\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Observable.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "variable",
    "name": "binderRecordEvent",
    "memberof": "@twist/core/src/decorators/Observable.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/Observable.jsx~binderRecordEvent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/Observable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 430,
    "kind": "variable",
    "name": "binderRecordChange",
    "memberof": "@twist/core/src/decorators/Observable.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/Observable.jsx~binderRecordChange",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/Observable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 431,
    "kind": "variable",
    "name": "PropertyDefaultValue",
    "memberof": "@twist/core/src/decorators/Observable.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/Observable.jsx~PropertyDefaultValue",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/Observable.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"defaultValue\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 432,
    "kind": "function",
    "name": "Observable",
    "memberof": "@twist/core/src/decorators/Observable.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Observable.jsx~Observable",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Observable.jsx",
    "importStyle": "Observable",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "@twist/core/src/decorators/Prototype.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nexport default function(args) {\n    return function Prototype(classFn) {\n        if (args) {\n            Object.assign(classFn.prototype, args);\n        }\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Prototype.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "function",
    "name": "Prototype",
    "memberof": "@twist/core/src/decorators/Prototype.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Prototype.jsx~Prototype",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Prototype.jsx",
    "importStyle": "Prototype",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "file",
    "name": "@twist/core/src/decorators/State.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    @State.xxx decorators - these are used inside an @Store to specify how to serialize/deserialize\n    the properties of the store to/from JSON. The decorators ensure that modifications to the properties\n    only happen inside of an action handler.\n**/\n\nimport StateObservableArray from '../internal/state/StateObservableArray';\nimport StateObservableMap from '../internal/state/StateObservableMap';\nimport JSONProperties from '../internal/state/JSONProperties';\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\nimport { shallowClone } from '../third_party/clone.jsx';\n\nfunction toBoolean(str) {\n    // Special case so that 'false' is treated as false, not true.\n    return str === 'false' ? false : Boolean(str);\n}\n\nfunction identity(a) {\n    return a;\n}\n\nfunction slice(a) {\n    if (a && a.toArray) {\n        // ObservableArray case\n        return a.toArray();\n    }\n    return a && a.slice && a.slice();\n}\n\nfunction wrapArray(array, parent, name) {\n    var observableArray = new StateObservableArray(array);\n    observableArray._parent = parent;\n    observableArray._name = name;\n    observableArray._linkItems();\n    return observableArray;\n}\n\nfunction wrapMap(map, parent, name) {\n    var observableMap = new StateObservableMap(map);\n    observableMap._parent = parent;\n    observableMap._name = name;\n    observableMap._linkItems();\n    return observableMap;\n}\n\nfunction exportables(obj) {\n    // Inherit the JSON properties from the parent.\n    if (!obj.hasOwnProperty('exportables')) {\n        obj.exportables = new JSONProperties(obj);\n    }\n    return obj.exportables;\n}\n\n/**\n    The @State.xxx decorators.\n**/\nclass State {\n\n    /**\n        Value types\n    **/\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byVal(target, property, descriptor, config = null) {\n        return exportables(target).add(property, shallowClone, shallowClone, DecoratorUtils.getInitialValue(descriptor), config);\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byBooleanVal(target, property, descriptor, config = null) {\n        return exportables(target).add(property, toBoolean, Boolean, DecoratorUtils.getInitialValue(descriptor), config);\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byNumberVal(target, property, descriptor, config = null) {\n        return exportables(target).add(property, Number, Number, DecoratorUtils.getInitialValue(descriptor), config);\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    bySimpleVal(target, property, descriptor, config = null) {\n        return exportables(target).add(property, identity, identity, DecoratorUtils.getInitialValue(descriptor), config);\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byCustomVal(target, property, descriptor, type, defaultValue) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                return type.parse(jsonValue !== undefined ? jsonValue : defaultValue, this, property);\n            },\n            function(objValue) {\n                return type.serialize(objValue, this, property);\n            },\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n\n    /**\n        Reference types\n    **/\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byRef(target, property, descriptor, RefType) {\n        return exportables(target).add(property,\n            (jsonValue) => {\n                var value = new RefType();\n                value.fromJSON(jsonValue || {});\n                return value;\n            },\n            (objValue, includeDefaults) => objValue ? objValue.toJSON(includeDefaults) : null,\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byOptionalRef(target, property, descriptor, RefType) {\n        return exportables(target).add(property,\n            (jsonValue) => {\n                if (!jsonValue) {\n                    return null;\n                }\n\n                var value = new RefType();\n                value.fromJSON(jsonValue);\n                return value;\n            },\n            (objValue, includeDefaults) => objValue ? objValue.toJSON(includeDefaults) : null,\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byCustomRef(target, property, descriptor, typeFn) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                var Ref = typeFn(jsonValue, this);\n                if (!Ref) {\n                    return null;\n                }\n                var value = typeof Ref === 'function' ? new Ref() : Ref;\n                if (jsonValue) {\n                    value.fromJSON(jsonValue);\n                }\n                return value;\n            },\n            (objValue, includeDefaults) => objValue ? objValue.toJSON(includeDefaults) : null,\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n\n    /**\n        Array Types\n    **/\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byArray(target, property, descriptor, isStatic) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                var result = slice(jsonValue) || [];\n                return isStatic ? result : wrapArray(result, this, property);\n            },\n            slice,\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byRefArray(target, property, descriptor, RefType, isStatic) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                var result = [];\n                if (jsonValue && (jsonValue instanceof Array)) {\n                    for (var i = 0, l = jsonValue.length; i < l; ++i) {\n                        var value = new RefType();\n                        value.fromJSON(jsonValue[i] || {});\n                        result.push(value);\n                    }\n                }\n                return isStatic ? result : wrapArray(result, this, property);\n            },\n            (objValue, includeDefaults) => {\n                var array = objValue ? objValue.map((objValue) => (objValue ? objValue.toJSON(includeDefaults) : null)) : [];\n                return array.base || array;\n            },\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byCustomRefArray(target, property, descriptor, typeFn, isStatic) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                var result = [];\n                if (jsonValue && jsonValue.length) {\n                    for (var i = 0, l = jsonValue.length; i < l; ++i) {\n                        var itemJsonValue = jsonValue[i];\n                        var Ref = typeFn(itemJsonValue, this);\n                        if (Ref) {\n                            var value = typeof Ref === 'function' ? new Ref() : Ref;\n                            if (itemJsonValue) {\n                                value.fromJSON(itemJsonValue);\n                            }\n                            result.push(value);\n                        }\n                    }\n                }\n                return isStatic ? result : wrapArray(result, this, property);\n            },\n            (objValue, includeDefaults) => {\n                var array = objValue ? objValue.map((objValue) => (objValue ? objValue.toJSON(includeDefaults) : null)) : [];\n                return array.base || array;\n            },\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n\n    }\n\n\n    /**\n        Map Types\n    **/\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byMap(target, property, descriptor, isStatic) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                let result = Object.assign({}, jsonValue);\n                return isStatic ? result : wrapMap(result, this, property);\n            },\n            (objValue) => {\n                let result = {};\n                if (objValue instanceof StateObservableMap) {\n                    for (let key of objValue.keys()) {\n                        result[key] = objValue.get(key);\n                    }\n                }\n                else if (objValue) {\n                    Object.assign(result, objValue);\n                }\n                return result;\n            },\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n\n    @DecoratorUtils.wrapPropertyDecorator\n    byRefMap(target, property, descriptor, RefType, isStatic) {\n        return exportables(target).add(property,\n            function(jsonValue) {\n                let result = {};\n                for (let key in jsonValue) {\n                    let childValue = jsonValue[key];\n                    let value = new RefType();\n                    if (childValue) {\n                        value.fromJSON(childValue);\n                    }\n                    result[key] = value;\n                }\n                return isStatic ? result : wrapMap(result, this, property);\n            },\n            (objValue, includeDefaults) => {\n                let result = {};\n                if (objValue instanceof StateObservableMap) {\n                    for (let key of objValue.keys()) {\n                        let value = objValue.get(key);\n                        result[key] = value ? value.toJSON(includeDefaults) : null;\n                    }\n                }\n                else if (objValue) {\n                    for (let key in objValue) {\n                        let value = objValue[key];\n                        result[key] = value ? value.toJSON(includeDefaults) : null;\n                    }\n                }\n                return result;\n            },\n            DecoratorUtils.getInitialValue(descriptor)\n        );\n    }\n\n\n    /**\n        Alias\n    **/\n\n    @DecoratorUtils.wrapPropertyDecorator\n    alias(target, property, descriptor, jsonName) {\n        exportables(target).alias(jsonName, property);\n    }\n\n}\n\n// TODO: The above properties should be static, but that doesn't work right now with the @DecoratorUtils.wrapPropertyDecorator\nexport default new State;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/State.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "function",
    "name": "toBoolean",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~toBoolean",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "identity",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~identity",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 438,
    "kind": "function",
    "name": "slice",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~slice",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 439,
    "kind": "function",
    "name": "wrapArray",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~wrapArray",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "wrapMap",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~wrapMap",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "map",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 441,
    "kind": "function",
    "name": "exportables",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~exportables",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "State",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~State",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": null,
    "description": "The @State.xxx decorators.",
    "lineNumber": 70,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "byVal",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byVal",
    "access": "public",
    "description": "Value types",
    "lineNumber": 77,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "byBooleanVal",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byBooleanVal",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "byNumberVal",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byNumberVal",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "bySimpleVal",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#bySimpleVal",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "byCustomVal",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byCustomVal",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "byRef",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byRef",
    "access": "public",
    "description": "Reference types",
    "lineNumber": 115,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "RefType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "byOptionalRef",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byOptionalRef",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "RefType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "byCustomRef",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byCustomRef",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "typeFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "byArray",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byArray",
    "access": "public",
    "description": "Array Types",
    "lineNumber": 169,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "byRefArray",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byRefArray",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "RefType",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "byCustomRefArray",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byCustomRefArray",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "typeFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "byMap",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byMap",
    "access": "public",
    "description": "Map Types",
    "lineNumber": 238,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "byRefMap",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#byRefMap",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "RefType",
        "types": [
          "*"
        ]
      },
      {
        "name": "isStatic",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "alias",
    "memberof": "@twist/core/src/decorators/State.jsx~State",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/decorators/State.jsx~State#alias",
    "access": "public",
    "description": "Alias",
    "lineNumber": 302,
    "decorators": [
      {
        "name": "DecoratorUtils.wrapPropertyDecorator",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "descriptor",
        "types": [
          "*"
        ]
      },
      {
        "name": "jsonName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "state",
    "memberof": "@twist/core/src/decorators/State.jsx",
    "static": true,
    "longname": "@twist/core/src/decorators/State.jsx~state",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/State.jsx",
    "importStyle": "state",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "@twist/core/src/decorators/State.jsx~State"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "@twist/core/src/decorators/Store.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    @Store is used to create a store. This encapsulates state, and can be used to load/save state.\n    State can only be modified via actions, which are methods on a store, decorated with @Action\n**/\n\nimport StoreSerializer from '../internal/state/StoreSerializer';\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\n\nexport default DecoratorUtils.makeClassDecorator((target, args) => {\n    target.prototype.__allowMutable = args && args.mutable;\n    StoreSerializer.register(target);\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Store.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "@twist/core/src/decorators/Task.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport TaskQueue from '../TaskQueue';\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\n\nexport default DecoratorUtils.makePropertyDecorator((target, property, descriptor, taskQueue, priority) => {\n    if (typeof taskQueue === 'number') {\n        priority = taskQueue;\n        taskQueue = TaskQueue;\n    }\n    else {\n        if (!taskQueue) {\n            taskQueue = TaskQueue;\n        }\n        if (typeof priority !== 'number') {\n            priority = 0;\n        }\n    }\n\n    let value = DecoratorUtils.getInitialValue(descriptor);\n    let taskName = '_task_' + property;\n\n    delete descriptor.value;\n    delete descriptor.writable;\n    descriptor.get = function() {\n        if (target === this) {\n            // The prototype should not bind the value.\n            return value;\n        }\n\n        let args;\n\n        // This is a workaround for a bug in Safari that would\n        // execute the getter even after the property was replaced with a fixed value.\n        let pusher = this[taskName];\n        if (pusher) {\n            return pusher;\n        }\n\n        let binded = () => {\n            if (!this.isDisposed) {\n                value.apply(this, args);\n            }\n        };\n\n        pusher = (...rest) => {\n            args = rest;\n            taskQueue.push(binded, priority);\n        };\n        pusher.cancel = () => {\n            taskQueue.remove(binded);\n        };\n\n        // Next time just return the binded value directly.\n        Object.defineProperty(this, taskName, { value: pusher, enumerable: false });\n        Object.defineProperty(this, property, { value: pusher, enumerable: false });\n\n        return pusher;\n    };\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Task.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "file",
    "name": "@twist/core/src/decorators/Throttle.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport wrap from './Wrap';\nimport throttle from '../third_party/throttle';\n\nexport default function(wait = 0, options) {\n    return wrap(throttle, 'Now', wait, options);\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Throttle.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "function",
    "name": "Throttle",
    "memberof": "@twist/core/src/decorators/Throttle.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Throttle.jsx~Throttle",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Throttle.jsx",
    "importStyle": "Throttle",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "wait",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "@twist/core/src/decorators/Wrap.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport DecoratorUtils from '../internal/utils/DecoratorUtils';\n\nexport default function(wrapper, origSuffix, ...args) {\n    return function Wrap(target, property, descriptor) {\n        const value = DecoratorUtils.getInitialValue(descriptor);\n        const workaroundKey = property + '__Safari_workaround';\n\n        if (origSuffix) {\n            // [nowKey] is the original function\n            const nowKey = property + origSuffix;\n            Object.defineProperty(target, nowKey, { value });\n        }\n\n        delete descriptor.value;\n        delete descriptor.writable;\n        descriptor.get = function() {\n            if (target === this) {\n                // The prototype should not bind the value.\n                return value;\n            }\n\n            // This is a workaround for a bug in Safari that would execute the\n            // getter even after the property was replaced with a fixed value.\n            let wrapped = this[workaroundKey];\n            if (wrapped) {\n                return wrapped;\n            }\n\n            wrapped = wrapper(value, ...args);\n            const descriptor = { value: wrapped, enumerable: false, configurable: true };\n            Object.defineProperty(this, property, descriptor);\n            Object.defineProperty(this, workaroundKey, descriptor);\n\n            return wrapped;\n        };\n    };\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/decorators/Wrap.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "Wrap",
    "memberof": "@twist/core/src/decorators/Wrap.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/decorators/Wrap.jsx~Wrap",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/decorators/Wrap.jsx",
    "importStyle": "Wrap",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "wrapper",
        "types": [
          "*"
        ]
      },
      {
        "name": "origSuffix",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "file",
    "name": "@twist/core/src/middleware/protectorMiddleware.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    Middleware for protecting synchronous actions - this prevents common asynchronous operations (setTimeout, promises etc)\n    from being used inside of synchronous actions, since this won't work with reduxDevtools (actions need to be deterministic so\n    they can be replayed). We recommend enabling this middleware during development, to help catch bugs.\n**/\n\nimport AsyncBlocker from '../internal/state/AsyncBlocker';\n\nvar protectorMiddleware = function(store, action, payload, next) {\n\n    // This runs the actual dispatch code in a mode where certain common asynchronous operations (Promise, setTimeout, etc) are blocked.\n    // We do this in the remote dev middleware so that developers can get this check, but we're not doing any patching in production code.\n    return AsyncBlocker.execute(next);\n};\n\nexport default protectorMiddleware;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/middleware/protectorMiddleware.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "protectorMiddleware",
    "memberof": "@twist/core/src/middleware/protectorMiddleware.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/middleware/protectorMiddleware.jsx~protectorMiddleware",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/middleware/protectorMiddleware.jsx",
    "importStyle": "protectorMiddleware",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "store",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "file",
    "name": "@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    Middleware for the redux-devtools-extension: Just install the extension and include this middleware when creating your store!\n    https://github.com/zalmoxisus/redux-devtools-extension\n**/\n\nimport Disposable from '../Disposable';\nimport ActionDispatcher from '../internal/state/ActionDispatcher';\nimport Bind from '../decorators/Bind';\n\nvar devTools = function() {\n    return typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;\n};\n\nclass DevToolConnector extends Disposable {\n\n    constructor(store) {\n        super();\n\n        this.store = store;\n\n        if (!devTools()) {\n            console.warn('redux-devtools-extension is not installed. See https://github.com/zalmoxisus/redux-devtools-extension');\n            return;\n        }\n\n        this.devTools = devTools().connect({\n            name: store.storeName || Object.getPrototypeOf(store).constructor.name\n        });\n        this.devTools.subscribe(this.onMessage);\n    }\n\n    onAction(action, payload) {\n        if (!this.devTools) {\n            return;\n        }\n\n        if (this.handlingMessage) {\n            // Ignore any actions that happen in response to our debugging\n        }\n\n        if (action === ActionDispatcher.INIT_ACTION) {\n            this.initState = this.store.toJSON();\n            this.devTools.init(this.initState);\n            return;\n        }\n\n        this.devTools.send({ type: action, payload }, this.store.toJSON());\n    }\n\n    setState(state) {\n        // Specially, we pretend we're inside of an action\n        ActionDispatcher.start('DEVTOOLS');\n        this.store.fromJSON(state);\n        ActionDispatcher.end('DEVTOOLS');\n    }\n\n    toggleAction(actionId, liftedState) {\n        // Find the action - it's either skipped already (so we unskip it), or staged (so we skip it).\n        var skippedIndex = liftedState.skippedActionIds.indexOf(actionId);\n        var stagedIndex = liftedState.stagedActionIds.indexOf(actionId);\n\n        if (stagedIndex === -1) {\n            // The action doesn't exist, so toggling won't do anything\n            return liftedState;\n        }\n\n        // Restore the state to what it was, just before the action\n        this.setState(liftedState.computedStates[stagedIndex - 1].state);\n\n        if (skippedIndex !== -1) {\n            // If the action is currently skipped, unskip it\n            var action = liftedState.actionsById[stagedIndex].action;\n            this.store.dispatch(action.type, ...action.payload);\n            liftedState.skippedActionIds.splice(skippedIndex, 1);\n        }\n        else {\n            // Otherwise, skip it\n            liftedState.skippedActionIds.push(actionId);\n        }\n        liftedState.computedStates[stagedIndex].state = this.store.toJSON();\n\n        // Replay the rest of the actions, if they're not skipped\n        for (var i = stagedIndex + 1; i < liftedState.stagedActionIds.length; i++) {\n            var replayActionId = liftedState.stagedActionIds[i];\n            if (liftedState.skippedActionIds.indexOf(replayActionId) === -1) {\n                var replayAction = liftedState.actionsById[replayActionId].action;\n                this.store.dispatch(replayAction.type, ...replayAction.payload);\n            }\n            liftedState.computedStates[i].state = this.store.toJSON();\n        }\n\n        return liftedState;\n    }\n\n    @Bind\n    onMessage(message) {\n        this.handlingMessage = true;\n\n        var messageState = message.state && JSON.parse(message.state);\n\n        if (message.type === 'DISPATCH') {\n            switch (message.payload.type) {\n            case 'RESET':\n                this.setState(this.initState);\n                this.devTools.init(this.initState);\n                break;\n            case 'COMMIT':\n                this.devTools.init(this.store.toJSON());\n                break;\n            case 'ROLLBACK':\n                this.setState(messageState);\n                this.devTools.init(messageState);\n                break;\n            case 'JUMP_TO_STATE':\n            case 'JUMP_TO_ACTION':\n                this.setState(messageState);\n                break;\n            case 'TOGGLE_ACTION': {\n                let liftedState = this.toggleAction(message.payload.id, messageState);\n                this.devTools.send(null, liftedState);\n                break;\n            }\n            case 'IMPORT_STATE': {\n                let liftedState = message.payload.nextLiftedState;\n                let computedStates = liftedState.computedStates;\n                this.setState(computedStates[computedStates.length - 1].state);\n                this.devTools.send(null, liftedState);\n                break;\n            }\n            }\n        }\n        else if (message.type === 'ACTION') {\n            // Execute an operation on the store\n            try {\n                new Function(message.payload).call(this.store);\n            }\n            catch (e) {\n                console.warn('Error executing action: ' + message.payload);\n                console.warn(e);\n            }\n        }\n\n        this.handlingMessage = false;\n    }\n\n    dispose() {\n        if (!this.devTools) {\n            return;\n        }\n\n        this.devTools.unsubscribe();\n        delete this.devTools;\n        devTools().disconnect();\n    }\n}\n\nvar remoteDevMiddleware = function(store, action, payload, next) {\n    if (!store._devToolConnector) {\n        store._devToolConnector = store.link(new DevToolConnector(store));\n    }\n\n    // Let the action be processed\n    const retVal = next();\n\n    store._devToolConnector.onAction(action, payload);\n\n    return retVal;\n};\n\nexport default remoteDevMiddleware;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "devTools",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~devTools",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "DevToolConnector",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "static": true,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "extends": [
      "@twist/core/src/Disposable.js~Disposable"
    ],
    "ignore": true
  },
  {
    "__docId__": 469,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "store",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#store",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "devTools",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#devTools",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "onAction",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#onAction",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "initState",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#initState",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "setState",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#setState",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "toggleAction",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#toggleAction",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "actionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "liftedState",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "onMessage",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#onMessage",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "decorators": [
      {
        "name": "Bind",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "handlingMessage",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#handlingMessage",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "dispose",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~DevToolConnector#dispose",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 480,
    "kind": "function",
    "name": "remoteDevMiddleware",
    "memberof": "@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/middleware/remoteDevMiddleware.jsx~remoteDevMiddleware",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/middleware/remoteDevMiddleware.jsx",
    "importStyle": "remoteDevMiddleware",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "store",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "@twist/core/src/middleware/thunkMiddleware.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n    Middleware for asynchronous actions. Lets you define actions that are functions,\n    which can dispatch other actions (so you can encapsulate a longer asynchronous operation)\n**/\n\nvar thunkMiddleware = function(store, action, payload, next) {\n    if (typeof action === 'function') {\n        return action(store, ...payload);\n    }\n\n    // Normal actions just continue\n    return next();\n};\n\nexport default thunkMiddleware;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/src/middleware/thunkMiddleware.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "function",
    "name": "thunkMiddleware",
    "memberof": "@twist/core/src/middleware/thunkMiddleware.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/core/src/middleware/thunkMiddleware.jsx~thunkMiddleware",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/core/src/middleware/thunkMiddleware.jsx",
    "importStyle": "thunkMiddleware",
    "description": "Middleware for asynchronous actions. Lets you define actions that are functions,\nwhich can dispatch other actions (so you can encapsulate a longer asynchronous operation)",
    "lineNumber": 19,
    "params": [
      {
        "name": "store",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "payload",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "file",
    "name": "@twist/eslint-plugin-core/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n * @fileoverview Custom rules to support syntactic features of Twist\n * @author Adobe\n */\n'use strict';\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst requireIndex = require('requireindex');\n\n//------------------------------------------------------------------------------\n// Plugin Definition\n//------------------------------------------------------------------------------\n\n'use strict';\n\nmodule.exports = {\n    rules: requireIndex(__dirname + '/src/rules'),\n    configs: {\n        recommended: {\n            rules: {\n                '@twist/core/jsx-member-vars': 'warn',\n                '@twist/core/no-undef': 'error',\n                '@twist/core/constructor-super': 'error',\n                'constructor-super': 'off',\n                'no-undef': 'off'\n            }\n        }\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/eslint-plugin-core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "name": "requireIndex",
    "memberof": "@twist/eslint-plugin-core/index.js",
    "static": true,
    "longname": "@twist/eslint-plugin-core/index.js~requireIndex",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "file",
    "name": "@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n * @fileoverview Extending eslint 'constructor-super' rule to understand Twist's auto-imports that extend classes\n */\n'use strict';\n\nconst constructorSuperRule = require('eslint/lib/rules/constructor-super');\nconst getTwistConfiguration = require('../twist-config');\n\nfunction isAutoExtended(classNode) {\n    // Look to see if we have a class decorator that extends from a super-class\n    const twistDecorators = getTwistConfiguration().decorators || {};\n    const isExtendedDecorator = decorator => {\n        const expr = decorator.expression;\n        const identifier = (expr.type === 'Identifier' && expr)\n            || (expr.type === 'CallExpression' && expr.callee.type === 'Identifier' && expr.callee);\n        if (identifier && twistDecorators[identifier.name]) {\n            return twistDecorators[identifier.name].inherits !== undefined;\n        }\n        return false;\n    };\n    return classNode.decorators && classNode.decorators.some(isExtendedDecorator);\n}\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: 'require `super()` calls in constructors - understands Twist auto-imports',\n            category: 'Twist',\n            recommended: true\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: []\n    },\n\n    create(context) {\n        let visitor = constructorSuperRule.create(context);\n\n        let onCodePathStart = visitor.onCodePathStart;\n        visitor.onCodePathStart = function(codePath, node) {\n            // See if it's a constructor of a class (replicates what happens inside the original onCodePathStart)\n            const isConstructorFunction = node.type === 'FunctionExpression'\n                && node.parent.type === 'MethodDefinition'\n                && node.parent.kind === 'constructor';\n\n            if (isConstructorFunction) {\n                let classNode = node.parent.parent.parent;\n                if (!classNode.superClass && isAutoExtended(classNode)) {\n                    // TODO: This is really hacky, but it's the only way to avoid copying the entire constructor-super rule\n                    // just to make this change. We may need to do so still if this isn't robust:\n                    node = {\n                        type: 'FunctionExpression',\n                        parent: {\n                            type: 'MethodDefinition',\n                            kind: 'constructor',\n                            parent: {\n                                parent: {\n                                    superClass: {\n                                        type: 'ClassExpression'\n                                    }\n                                }\n                            }\n                        }\n                    };\n                }\n            }\n\n            onCodePathStart(codePath, node);\n        };\n\n        return visitor;\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 486,
    "kind": "variable",
    "name": "constructorSuperRule",
    "memberof": "@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/constructor-super.js~constructorSuperRule",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 487,
    "kind": "variable",
    "name": "getTwistConfiguration",
    "memberof": "@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/constructor-super.js~getTwistConfiguration",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "isAutoExtended",
    "memberof": "@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/constructor-super.js~isAutoExtended",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/constructor-super.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "classNode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "file",
    "name": "@twist/eslint-plugin-core/src/rules/jsx-member-vars.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n * @fileoverview Prevent Import members and variables used in JSX to be marked as 'no-unused'\n */\n'use strict';\n\n//----------------------------------------------------------------------\n// Helpers\n//----------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: 'Prevent Import members and variables used in JSX to be marked as unused',\n            category: 'Twist',\n            recommended: true\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: []\n    },\n\n    create(context) {\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n        return {\n            JSXOpeningElement(node) {\n                let name;\n                if (node.name && node.name.namespace && node.name.namespace.name) {\n                    // <Member:Var>\n                    name = node.name.namespace.name;\n                }\n                else if (node.name && node.name.name) {\n                    // <Member>\n                    name = node.name.name;\n                }\n                else if (node.name && node.name.object) {\n                    // <Member...Var>\n                    let parent = node.name.object;\n                    while (parent.object) {\n                        parent = parent.object;\n                    }\n                    name = parent.name;\n                }\n                else {\n                    return;\n                }\n                context.markVariableAsUsed(name);\n            }\n        };\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/eslint-plugin-core/src/rules/jsx-member-vars.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 490,
    "kind": "file",
    "name": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "content": "/*\n *  Modification of original source from https://github.com/eslint/eslint/blob/master/lib/rules/no-undef.js,\n *  which is licensed under the following:\n *\n *  Copyright JS Foundation and other contributors, https://js.foundation\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"Software\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n * @fileoverview Extends eslint 'no-undef' rule for Twist's structural components, like <repeat> and <using>.\n *\n * Since the knowledge of Twist's JSX isn't built into ESLint's scope, this rule has to determine\n * the scope of JSX-defined variables (via the 'as' and 'for' attributes).\n *\n * The 'as' and 'for' attributes are scoped to the JSXElement where they're defined,\n * so we can simply walk up the node tree for each \"global\" variable (as per ESLint), and see if\n * it was actually defined.\n */\n'use strict';\n\n//----------------------------------------------------------------------\n// Helpers\n//----------------------------------------------------------------------\n\nconst getTwistConfiguration = require('../twist-config');\n\nconst hasTypeOfOperator = node => {\n    var parent = node.parent;\n\n    return parent && parent.type === 'UnaryExpression' && parent.operator === 'typeof';\n};\n\nconst isJSXTag = (node, tag) => {\n    if (node.name && node.name.type === 'JSXIdentifier' && (!tag || node.name.name === tag)) {\n        return true;\n    }\n    if (node.name && node.name.type === 'JSXNamespacedName' && (!tag || (node.name.namespace.name + ':' + node.name.name.name) === tag)) {\n        return true;\n    }\n    return false;\n};\n\nconst isDecorator = node => {\n    for (let n = node; n; n = n.parent) {\n        if (n.type === 'Decorator') {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst isNameInExpression = (expression, name) => {\n    if (expression.type === 'Identifier') {\n        return expression.name === name;\n    }\n    if (expression.type === 'SequenceExpression') {\n        // Right now, the only valid\n        return expression.expressions[0].name === name || expression.expressions[1].name === name;\n    }\n    return false;\n};\n\nconst isNameInAsAttribute = (asObject, name) => {\n    if (asObject) {\n        return isNameInExpression(asObject.value.expression, name);\n    }\n    return false;\n};\n\nconst isNameInForAttribute = (forObject, name) => {\n    if (forObject) {\n        return isNameInExpression(forObject.value.expression.left, name);\n    }\n    return false;\n};\n\n\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        docs: {\n            description: \"Extends eslint 'no-undef' rule for Twist structural components\",\n            category: 'Twist',\n            recommended: true\n        },\n        fixable: null, // or \"code\" or \"whitespace\"\n        schema: [ {\n            'type': 'object',\n            'properties': {\n                'typeof': {\n                    'type': 'boolean'\n                }\n            },\n            'additionalProperties': false\n        } ]\n    },\n\n    create(context) {\n        const options = context.options[0];\n        const considerTypeOf = options && options.typeof === true || false;\n\n        // Returns the name of the identifier in the passed in attribute, and also checks that it isn't an identifier!\n        // (e.g. you can't write as={ 2 + 4 } - it has to be an identifier name).\n        const attrIdentifierName = function(attr) {\n            if (!attr) {\n                return;\n            }\n\n            let value = attr.value;\n            if (value && value.expression.type === 'Identifier') {\n                return value.expression.name;\n            }\n\n            if (value && value.expression.type === 'SequenceExpression') {\n                // As can take a sequence (e.g. as={ item, index}).\n                return;\n            }\n\n            // Otherwise, we got an attribute whose value is _not_ an identifier - not allowed for as/define-ref\n            context.report({\n                node: attr,\n                message: '\"{{expr}}\" is not an identifier. The \"{{attr}}\" attribute can only be used with an identifier.',\n                data: {\n                    expr: context.getSourceCode().getText(value.expression),\n                    attr: attr.name.name\n                }\n            });\n        };\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n        return {\n            JSXOpeningElement(node) {\n                // We need to go through the define-ref attributes as we see them,\n                // so that we can hoist the knowledge of their definition to the parent\n                // (they have the scope of the containing JSX fragment).\n                let attributes = node.attributes;\n                for (let i = 0; i < attributes.length; i++) {\n                    let attr = attributes[i];\n                    if (attr && attr.name) {\n                        switch(attr.name.name) {\n                        case 'as':\n                            attrIdentifierName(attr, true);\n                            break;\n                        }\n                    }\n                }\n            },\n            'Program:exit'() {\n                const globalScope = context.getScope();\n                const twistConfig = getTwistConfiguration();\n                const twistDecorators = twistConfig.decorators || {};\n\n                globalScope.through.forEach(({ identifier }) => {\n                    let node = identifier;\n\n                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n                        return;\n                    }\n\n                    let identifierName = identifier.name;\n\n                    // First check for decorators - they're ok if defined\n                    if (twistDecorators[identifierName] && isDecorator(identifier)) {\n                        return;\n                    }\n\n                    while (node.parent) {\n                        node = node.parent;\n\n                        if (node.type === 'JSXElement') {\n                            // we convert the attributes to a map to be able to evaluate the assignments\n                            const attrMap = node.openingElement.attributes.reduce((result, attr) => {\n                                let map = result;\n                                if (attr && attr.name) {\n                                    map[attr.name.name] = attr;\n                                }\n                                return result;\n                            }, {});\n\n                            if (isJSXTag(node.openingElement, 'repeat')) {\n                                // adds support for <repeat for={ item in value }></repeat>\n                                // adds support for <repeat for={ (item, index) in value }></repeat>\n                                if (isNameInForAttribute(attrMap.for, identifierName)\n                                    // adds support for <repeat collection={ value } as={ item }></repeat>\n                                    // adds support for <repeat collection={ value } as={ item, index }></repeat>\n                                    || isNameInAsAttribute(attrMap.as, identifierName)) {\n                                    return;\n                                }\n                            }\n                            // adds support for <using value={ value } as={ item }></using>\n                            else if (isJSXTag(node.openingElement, 'using')) {\n                                if (isNameInAsAttribute(attrMap.as, identifierName)) {\n                                    return;\n                                }\n                            }\n                            // adds support for <MyComponent as={ params } />\n                            else if (isJSXTag(node.openingElement)) {\n                                if (isNameInAsAttribute(attrMap.as, identifierName)) {\n                                    return;\n                                }\n                            }\n                        }\n                    }\n\n                    context.report({\n                        node: identifier,\n                        message: \"'{{name}}' is not defined.\",\n                        data: identifier\n                    });\n                });\n            }\n        };\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 491,
    "kind": "variable",
    "name": "getTwistConfiguration",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~getTwistConfiguration",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 492,
    "kind": "function",
    "name": "hasTypeOfOperator",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~hasTypeOfOperator",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 493,
    "kind": "function",
    "name": "isJSXTag",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~isJSXTag",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "tag",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 494,
    "kind": "function",
    "name": "isDecorator",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~isDecorator",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "isNameInExpression",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~isNameInExpression",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "expression",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "isNameInAsAttribute",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~isNameInAsAttribute",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "asObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "function",
    "name": "isNameInForAttribute",
    "memberof": "@twist/eslint-plugin-core/src/rules/no-undef.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/rules/no-undef.js~isNameInForAttribute",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/rules/no-undef.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "forObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "@twist/eslint-plugin-core/src/twist-config.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// Loads the Twist configuration from .twistrc, so that the auto import information is available to the linter\n\nconst TwistConfiguration = require('@twist/configuration');\n\nlet config;\n\nmodule.exports = () => {\n    if (config === undefined) {\n        try {\n            config = new TwistConfiguration();\n        }\n        catch (e) {\n            config = {};\n        }\n    }\n    return config;\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/eslint-plugin-core/src/twist-config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "variable",
    "name": "TwistConfiguration",
    "memberof": "@twist/eslint-plugin-core/src/twist-config.js",
    "static": true,
    "longname": "@twist/eslint-plugin-core/src/twist-config.js~TwistConfiguration",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/eslint-plugin-core/src/twist-config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 500,
    "kind": "file",
    "name": "@twist/react/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// Decorators\nexport { default as Attribute } from './src/decorators/Attribute';\nexport { default as Component } from './src/decorators/Component';\n\n// Core\nexport { default as BaseComponent } from './src/BaseComponent';\nexport { default as BaseVirtualComponent } from './src/BaseVirtualComponent';\n// (BaseVirtualComponent depends on the Component decorator, so it must be exported after the decorator.)\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "file",
    "name": "@twist/react/karma.conf.js",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst path = require('path');\n\nprocess.env.NODE_ENV = 'test';\n\nmodule.exports = function(config) {\n    config.set({\n        webpack: require(path.join(__dirname, 'webpack.config.js')),\n\n        files: [\n            'test/IncludeAll.jsx',\n            'test/Index.jsx'\n        ],\n\n        preprocessors: {\n            '**/*.*': [ 'webpack' ],\n        },\n\n        reporters: [ 'progress', 'mocha', 'coverage' ],\n        frameworks: [ 'mocha' ],\n        browsers: [ 'Chrome' ],\n\n        coverageReporter: {\n            dir: 'testing/',\n            reporters: [\n                { type: 'html', subdir: 'coverage' },\n                { type: 'text' }\n            ],\n        },\n\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-firefox-launcher',\n            'karma-mocha-reporter',\n            'karma-mocha',\n            'karma-webpack',\n        ],\n\n        webpackMiddleware: {\n            stats: 'errors-only',\n            noInfo: true\n        }\n    });\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/karma.conf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 502,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/react/karma.conf.js",
    "static": true,
    "longname": "@twist/react/karma.conf.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/react/karma.conf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/karma.conf.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "@twist/react/src/BaseComponent.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport React from 'react';\n\nimport { Binder, Disposable, SignalDispatcher, Scope, TaskQueue } from '@twist/core';\nimport { definedAttributes, getEventHandler } from './internal/AttributeUtils';\n\n// It's possible for two render functions to have a cyclic dependency, where one updating\n// invalidates the other. Because of this, if we detect too many updates in the same stack,\n// we abort (otherwise the program could hang in an infinite loop).\nconst REPEATED_UPDATE_LIMIT = 50;\n\nlet BinderRecordChange = Binder.recordChange;\nlet BinderRecordEvent = Binder.recordEvent;\nlet noop = () => undefined;\n\nlet _scope = Symbol('scope');\nlet _props = Symbol('props');\nlet _newProps = Symbol('newProps');\n\n/** private **/\nexport let _originalRender = Symbol('originalRender');\n/** private **/\nexport let _getProp = Symbol('getProp');\n\n// Utility for hooking into existing methods\nfunction replaceExistingMethod(obj, name, newMethod) {\n    let originalMethod = obj[name] && obj[name].bind(obj);\n    obj[name] = newMethod(originalMethod || noop);\n}\n\nexport default class Component extends React.PureComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        this[_props] = props || {};\n\n        if (!props || (!this.fork && !context)) {\n            console.warn(`You must call super(props, context) from the constructor of a component -\n            if the class is not a component, don't decorate it with @Component!`);\n        }\n\n        // Swap out the render function, so we can bind to it (telling React to re-render when it needs to)\n        this[_originalRender] = this.render;\n        let binder;\n        replaceExistingMethod(this, 'render', originalRender => () => {\n            if (!binder) {\n                // Create a new binder: This always executes the getter immediately, so we just read it back\n                // from the previousValue. For future updates, we'll get called when the binder is invalidated.\n                // Note that we do the forceUpdate() only if the output of the render function changed - this is\n                // because forceUpdate is expensive, so we can avoid doing unnecessary work (and also the watch\n                // only gets triggered when the render contents actually change)\n                let isQueued = false;\n                let updateCount = 0;\n                let clearUpdateCount = () => updateCount = 0;\n                let forceUpdate = () => {\n                    isQueued = false;\n                    if (binder.dirty) {\n\n                        // This detects if we're executing forceUpdate() more than a certain number of times on\n                        // the same call stack, so we can detect if we're in an infinite loop. If we have two\n                        // render functions that are repeatedly invalidating one another, this allows us to abort.\n                        !updateCount && setTimeout(clearUpdateCount);\n                        if (updateCount++ > REPEATED_UPDATE_LIMIT) {\n                            console.error(`\\`${this.constructor.name}\\` is in a repeating render loop. Check for cyclic dependencies between observables.`);\n                            return;\n                        }\n\n                        // Tell React to re-render\n                        this.forceUpdate();\n                    }\n                };\n                let onInvalidate = () => {\n                    // Normally we throttle updates (in case a component changes a lot!), but sometimes this is\n                    // undesirable - e.g. if the component contains input fields, you may want them to update immediately,\n                    // no matter how fast the value changes (otherwise you get artifacts like the cursor moving to the end\n                    // of the input). You have to explicitly turn this off, via `@Component({throttleUpdates: false})`.\n                    if (this.throttleUpdates === false) {\n                        // PERFORMANCE DANGER ZONE\n                        // Without throttling, we'll do a force update on _every_ change to an observable, so if you\n                        // change multiple observables at once, it'll re-render multiple times (rather than batching them)\n                        forceUpdate();\n                        return;\n                    }\n\n                    // Throttling: When invalidated, we'll only update at most once per rAF.\n                    if (!isQueued) {\n                        if (!TaskQueue.running) {\n                            // If we're already executing the task queue, then any tasks we push will get executed\n                            // straight away, so there's no need to do an immediate update as well.\n                            forceUpdate();\n                        }\n                        TaskQueue.push(forceUpdate);\n                        isQueued = true;\n                    }\n                };\n                binder = this.link(new Binder(originalRender, undefined, true, onInvalidate, undefined, this));\n            }\n            else {\n                binder.apply();\n            }\n\n            // React forbids returning `undefined` from render; we must return null instead.\n            return binder.previousValue !== undefined ? binder.previousValue : null;\n        });\n\n        // Swap out the componentWillUpdate:\n        replaceExistingMethod(this, 'componentWillUpdate', originalMethod => (newProps, newState) => {\n            // We need to remember the new props while updating, because our Binder change events might\n            // trigger somebody to read an @Attribute, before React has set the new props - this is a bit ugly, but necessary.\n            // (Note, triggering the Binder changes on componentDidUpdate avoids this problem, but causes multiple renders for a single update).\n            this[_newProps] = newProps;\n\n            for (let key in this[_props]) {\n                // We have to signal a change if any of the props change, so that any watches that depend on them will trigger!\n                if (this[_props][key] !== newProps[key]) {\n                    BinderRecordChange(this, 'props.' + key);\n                }\n            }\n            for (let key in newProps) {\n                // Also check for new props that were added\n                if (!this[_props].hasOwnProperty(key)) {\n                    BinderRecordChange(this, 'props.' + key);\n                }\n            }\n\n            originalMethod(newProps, newState);\n        });\n\n        // Swap out the componentDidUpdate, so we reset the newProps after they've been assigned\n        replaceExistingMethod(this, 'componentDidUpdate', originalMethod => (prevProps, prevState) => {\n            this[_newProps] = undefined;\n            originalMethod(prevProps, prevState);\n        });\n\n        // Handle scope\n        this[_scope] = this.context && this.context.scope;\n        if (this.fork) {\n            this[_scope] = this.link(this[_scope] ? this[_scope].fork() : new Scope);\n            replaceExistingMethod(this, 'getChildContext', originalMethod => () => {\n                let context = originalMethod() || {};\n                context.scope = this[_scope];\n                return context;\n            });\n        }\n        else if (!this[_scope]) {\n            // Note: We don't error here, because sometimes people decorate a class that's not a component with @Component.\n            // If scope is actually used, there will still be an error further down the line, but this warning should help explain it!\n            let className = this.constructor.name;\n            console.warn(`\\`${className}\\` was instantiated at the top-level without a forked scope - \\`@Component({ fork: false })\\` is not supported for top-level components.`);\n        }\n\n        // Make sure we dispose after unmounting\n        replaceExistingMethod(this, 'componentWillUnmount', originalMethod => () => {\n            originalMethod();\n            this.dispose();\n        });\n    }\n\n    /**\n     * Accessor for props - this is necessary for rendering to work if you access props directly in the renderer.\n     * However, normal @Attribute accessors don't go through here (they access the internal [_props] instead),\n     * so that the component doesn't need to re-render if a prop that it doesn't use changes.\n     *\n     * We encourage using @Attribute rather than accessing props directly, for these performance reasons.\n     * @type {object}\n     */\n    get props() {\n        Binder.active && BinderRecordEvent(this, 'props');\n        return this[_props];\n    }\n    set props(newProps) {\n        if (this[_props] !== newProps) {\n            this[_props] = newProps;\n            BinderRecordChange(this, 'props');\n        }\n    }\n\n    /**\n     * Method for obtaining the current value of a prop - this is used by @Attribute so it can read the new\n     * props immediately after componentWillUpdate (but before they've been set by React)\n     * @private\n     */\n    [_getProp](name) {\n        return this[_newProps] ? this[_newProps][name] : this[_props][name];\n    }\n\n    /**\n     * Special getter for accessing scope\n     */\n    get scope() {\n        return this[_scope];\n    }\n\n    /**\n     * Special getter for accessing children\n     */\n    get children() {\n        return this.renderChildren();\n    }\n\n    /**\n     * Rendering child elements\n     */\n    renderChildren(name = 'children', args) {\n        if (!args && name instanceof Array) {\n            args = name;\n            name = 'children';\n        }\n        if (args && !(args instanceof Array)) {\n            throw new Error('args parameter to renderChildren() must be an array');\n        }\n        args = args || [];\n\n        // React doesn't support namespaced tags/attributes, so need to strip out colons\n        name = name.replace(/:/g, '_');\n\n        Binder.active && BinderRecordEvent(this,  'props.' + name);\n        let children = this.props[name];\n\n        // Apply the arguments\n        if (typeof children === 'function') {\n            children = children(...args);\n        }\n        else if (children instanceof Array) {\n            children = children.map(child => typeof child === 'function' ? child(...args) : child);\n        }\n\n        return children;\n    }\n\n    /**\n     * Support undeclaredAttributes\n     * Note: Right now this takes a prefix, not a namespace, because React doesn't support namespaced attributes\n     */\n    undeclaredAttributes(prefix) {\n        let undeclaredAttributes = {};\n        let attributes = this[definedAttributes] || {};\n        Object.keys(this.props).forEach(name => {\n            if (!attributes[name]) {\n                let childName = name;\n                let prefixIndex = prefix && name.indexOf(prefix);\n                if (prefixIndex === 0) {\n                    childName = childName.substring(prefix.length);\n                }\n                if (!prefix || prefixIndex === 0) {\n                    undeclaredAttributes[childName] = this.props[name];\n                }\n            }\n        });\n        return undeclaredAttributes;\n    }\n\n    /**\n     *  Override trigger because we need to handle custom events\n     */\n    trigger(eventName, ...args) {\n        if (!eventName) {\n            return;\n        }\n\n        // Handle triggering custom events:\n        let camelCaseName = getEventHandler(eventName);\n        let handler = this[_props][camelCaseName];\n        if (typeof handler === 'function') {\n            handler(...args);\n        }\n        else if (handler) {\n            console.warn(`Ignoring non-function event handler \\`${camelCaseName}\\`.`);\n        }\n\n        return SignalDispatcher.prototype.trigger.call(this, eventName, ...args);\n    }\n}\n\n/**\n * Copy over the methods from Disposable and SignalDispatcher\n */\n\nlet copyPrototype = (prototypeObj) => {\n    Object.getOwnPropertyNames(prototypeObj).forEach(key => {\n        if (!Component.prototype.hasOwnProperty(key)) {\n            Component.prototype[key] = prototypeObj[key];\n        }\n    });\n};\n\ncopyPrototype(Disposable.prototype);\ncopyPrototype(SignalDispatcher.prototype);\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/src/BaseComponent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "variable",
    "name": "REPEATED_UPDATE_LIMIT",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~REPEATED_UPDATE_LIMIT",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "variable",
    "name": "BinderRecordChange",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~BinderRecordChange",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "BinderRecordEvent",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~BinderRecordEvent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "noop",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~noop",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "_scope",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~_scope",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 510,
    "kind": "variable",
    "name": "_props",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~_props",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "variable",
    "name": "_newProps",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~_newProps",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 512,
    "kind": "variable",
    "name": "_originalRender",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~_originalRender",
    "access": "private",
    "export": true,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": "{_originalRender}",
    "description": "private *",
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "variable",
    "name": "_getProp",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~_getProp",
    "access": "private",
    "export": true,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": "{_getProp}",
    "description": "private *",
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 514,
    "kind": "function",
    "name": "replaceExistingMethod",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~replaceExistingMethod",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "newMethod",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "class",
    "name": "Component",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~Component",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": "Component",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.PureComponent"
    ]
  },
  {
    "__docId__": 516,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "[_props]",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#[_props]",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "[_originalRender]",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#[_originalRender]",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "[_newProps]",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#[_newProps]",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "[_scope]",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#[_scope]",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "get",
    "name": "props",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#props",
    "access": "public",
    "description": "Accessor for props - this is necessary for rendering to work if you access props directly in the renderer.\nHowever, normal @Attribute accessors don't go through here (they access the internal [_props] instead),\nso that the component doesn't need to re-render if a prop that it doesn't use changes.\n\nWe encourage using @Attribute rather than accessing props directly, for these performance reasons.",
    "lineNumber": 179,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 524,
    "kind": "set",
    "name": "props",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#props",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "[_getProp]",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#[_getProp]",
    "access": "private",
    "description": "Method for obtaining the current value of a prop - this is used by @Attribute so it can read the new\nprops immediately after componentWillUpdate (but before they've been set by React)",
    "lineNumber": 195,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "get",
    "name": "scope",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#scope",
    "access": "public",
    "description": "Special getter for accessing scope",
    "lineNumber": 202,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "get",
    "name": "children",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#children",
    "access": "public",
    "description": "Special getter for accessing children",
    "lineNumber": 209,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#renderChildren",
    "access": "public",
    "description": "Rendering child elements",
    "lineNumber": 216,
    "params": [
      {
        "name": "name",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "children",
        "defaultValue": "children"
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "undeclaredAttributes",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#undeclaredAttributes",
    "access": "public",
    "description": "Support undeclaredAttributes\nNote: Right now this takes a prefix, not a namespace, because React doesn't support namespaced attributes",
    "lineNumber": 247,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "trigger",
    "memberof": "@twist/react/src/BaseComponent.jsx~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseComponent.jsx~Component#trigger",
    "access": "public",
    "description": " Override trigger because we need to handle custom events",
    "lineNumber": 268,
    "params": [
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "copyPrototype",
    "memberof": "@twist/react/src/BaseComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseComponent.jsx~copyPrototype",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseComponent.jsx",
    "importStyle": null,
    "description": "Copy over the methods from Disposable and SignalDispatcher",
    "lineNumber": 291,
    "params": [
      {
        "name": "prototypeObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "@twist/react/src/BaseVirtualComponent.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport { TaskQueue, Binder } from '@twist/core';\nimport BaseComponent from './BaseComponent';\nimport { _originalRender } from './BaseComponent';\n\nlet BinderRecordChange = Binder.recordChange;\nlet BinderRecordEvent = Binder.recordEvent;\n\nfunction isNullOrWhitespace(item) {\n    return !item || /^\\s+$/.test(item);\n}\n\nfunction isNullOrNotVirtual(item) {\n    return !item || !(item instanceof BaseVirtualComponent);\n}\n\nfunction isConcreteComponent(item) {\n    return (item instanceof BaseComponent) && !(item instanceof BaseVirtualComponent);\n}\n\nfunction concreteItemTransform(item) {\n    if (isConcreteComponent(item)) {\n        BinderRecordEvent(item, 'virtual.children');\n        return item[_items];\n    }\n    return item;\n}\n\nfunction flatten(arr, skipTest, itemTransform, flattenedArr) {\n    for (let i = 0; i < arr.length; i++) {\n        let item = itemTransform ? itemTransform(arr[i]) : arr[i];\n        let shouldIgnore = skipTest(item);\n        let isArray = Array.isArray(item);\n\n        if (!flattenedArr && (shouldIgnore || isArray)) {\n            // Optimisation: Only create a new array when we need to\n            flattenedArr = arr.slice(0, i);\n        }\n\n        if (flattenedArr) {\n            if (isArray) {\n                flatten(item, skipTest, itemTransform, flattenedArr);\n            }\n            else if (!shouldIgnore) {\n                flattenedArr.push(item);\n            }\n        }\n    }\n    return flattenedArr || arr;\n}\n\nfunction instantiateContent(content, context) {\n    try {\n        let ContentClass = content.type;\n        let instance = new ContentClass(content.props, context);\n        if (isConcreteComponent(instance)) {\n            // You can mix real and virtual components, but the virtualRender method expects all\n            // components in the tree to be able to be rendered virtually. We add the necessary methods\n            // to the component instance, so that this works:\n            instance[_dirty] = false;\n            instance[_queuedUpdate] = false;\n            instance[_items] = [];\n            instance[_virtualRender] = BaseVirtualComponent.prototype[_virtualRender];\n            instance.forceUpdate = BaseVirtualComponent.prototype.forceUpdate;\n\n        }\n        return instance;\n    }\n    catch (e) {\n        // We just fall back to a plain virtual component and print an error, if we see an HTML element\n        console.error(`Unexpected virtual type \\`${content.type}\\`. You cannot use concrete HTML tags in a virtual component - all components must themselves be virtual.`);\n        return new BaseVirtualComponent({}, context);\n    }\n}\n\nfunction propsDiffer(propsA, propsB) {\n    for (let key in propsA) {\n        if (propsA.hasOwnProperty(key) && propsA[key] !== propsB[key]) {\n            return true;\n        }\n    }\n    for (let key in propsB) {\n        if (propsB.hasOwnProperty(key) && propsA[key] !== propsB[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst _dirty = Symbol('dirty');\nconst _queuedUpdate = Symbol('queuedUpdate');\nconst _items = Symbol('items');\nconst _virtualRender = Symbol('virtualRender');\nconst _linked = Symbol('linked');\n\nclass LinkedData {\n    // We have to put this in an object because decorators on [] properties don't yet work (we want linked data to be a symbol)\n    @Observable component;\n}\n\n/**\n * A Virtual Component is a special type of component that doesn't render anything to the DOM, but instead exposes a\n * tree of nodes in JavaScript. It still has a render function, but it's not rendered by ReactDOM.\n */\n@Component\nexport default class BaseVirtualComponent {\n\n    [_dirty] = false;\n    [_queuedUpdate] = false;\n    [_items] = [];\n    [_linked] = new LinkedData;\n\n    constructor() {\n        super();\n\n        // Prevent overriding the render() method\n        if (this[_originalRender] !== BaseVirtualComponent.prototype.render) {\n            throw new Error('Virtual components do not support custom render() implementations. Instead, use a normal component that renders virtual components.');\n        }\n    }\n\n    /**\n     * Override the React forceUpdate so we do a virtual render (this throttles the rendering to the task queue)\n     * @private\n     */\n    forceUpdate() {\n        if (this[_queuedUpdate]) {\n            this[_dirty] = true;\n            return;\n        }\n\n        this[_virtualRender]();\n        this[_queuedUpdate] = true;\n\n        TaskQueue.push(() => {\n            if (this[_dirty] && !this.isDisposed) {\n                this[_virtualRender]();\n                this[_dirty] = false;\n            }\n            this[_queuedUpdate] = false;\n        });\n    }\n\n    /**\n     * Virtual rendering uses the results of render function (a JSON structure describing the child nodes), and\n     * renders them virtually - this just means instantiating the virtual nodes (or updating them if props changed)\n     * so we have a virtual tree. DOM nodes (like <div> etc) are not allowed in the virtual tree.\n     * @private\n     */\n    [_virtualRender]() {\n        let contents = this.render() || [];\n        let items = this[_items];\n        let childContext = this.getChildContext();\n\n        if (!(contents instanceof Array)) {\n            contents = [ contents ];\n        }\n\n        // Sometimes the array can contain other arrays, so we need to flatten it out\n        // (this also strips out any null elements)\n        contents = flatten(contents, isNullOrWhitespace);\n\n        for (let i = 0; i < contents.length; i++) {\n            let content = contents[i];\n            let item = items[i];\n\n            if (item && !(item instanceof content.type)) {\n                item.componentWillUnmount && item.componentWillUnmount();\n                this.unlink(item);\n                item = undefined;\n            }\n            if (item && (propsDiffer(content.props, item.props) || propsDiffer(childContext, item.context))) {\n                item.componentWillUpdate(content.props, childContext);\n                item.props = content.props;\n                item.context = childContext;\n            }\n            if (!item) {\n                items[i] = this.link(instantiateContent(content, childContext));\n                items[i]._parent = this;\n                items[i][_virtualRender]();\n                items[i].componentDidMount && items[i].componentDidMount();\n            }\n        }\n        for (let i = contents.length; i < items.length; i++) {\n            let item = items[i];\n            if (item) {\n                item.componentWillUnmount && item.componentWillUnmount();\n                this.unlink(item);\n            }\n        }\n        items.length = contents.length;\n\n        BinderRecordChange(this, 'virtual.children');\n    }\n\n    /**\n     * Overrides the renderChildren() of BaseComponent, so it can inject the children from the\n     * linked component, if it's linked!\n     */\n    renderChildren(name, args) {\n        return this[_linked].component\n            ? this[_linked].component.renderChildren(name, args)\n            : super.renderChildren(name, args);\n    }\n\n    /**\n     * Virtual components always just render their children (they're nodes in the virtual tree).\n     * If you need custom behavior (e.g. injecting other virtual nodes), you can write a real component that\n     * renders virtual components.\n     *\n     * If you try to override this, you'll get an error.\n     */\n    render() {\n        return this.renderChildren() || null;\n    }\n\n    /**\n     * This is the initialization code for a virtual component. Typically a virtual component exists\n     * alongside a concrete component, as a mechanism for configuring that component. For example,\n     * in a virtual scroller, the concrete component will render actual elements to the DOM (based on\n     * what's visible), but its children will be rendered to a virtual tree for doing the layout.\n     *\n     * A virtual component can't be rendered by ReactDOM, so instead, you need to pass the children\n     * of the concrete component to a virtual component, that will render it instead. You only need\n     * to call bindToComponent on the root virtual component - this just tells the virtual component\n     * to monitor the children of the given component, and render itself whenever they change.\n     *\n     * This method returns the virtual component, so that you can write (from a component):\n     *\n     * ```\n     * this.virtualComponent = new MyVirtualComponent().linkToComponent(this);\n     * ```\n     *\n     * @param {BaseComponent} component The component to bind to.\n     * @returns {BaseVirtualComponent} This virtual component.\n     */\n    linkToComponent(component) {\n        if (!(component instanceof BaseComponent)) {\n            throw new Error('@VirtualComponent.linkToComponent() expects an @Component as its argument');\n        }\n\n        this[_linked].component = component;\n        this.link(() => this[_linked].component = null);\n        this.forceUpdate();\n        return component.link(this);\n    }\n\n    /**\n     * The virtual children of the virtual component.\n     * @type {Array.<BaseVirtualComponent>}\n     */\n    get children() {\n        BinderRecordEvent(this, 'virtual.children');\n        return flatten(this[_items], isNullOrNotVirtual, concreteItemTransform);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/src/BaseVirtualComponent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "variable",
    "name": "BinderRecordChange",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BinderRecordChange",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 535,
    "kind": "variable",
    "name": "BinderRecordEvent",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BinderRecordEvent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 536,
    "kind": "function",
    "name": "isNullOrWhitespace",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~isNullOrWhitespace",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 537,
    "kind": "function",
    "name": "isNullOrNotVirtual",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~isNullOrNotVirtual",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 538,
    "kind": "function",
    "name": "isConcreteComponent",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~isConcreteComponent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 539,
    "kind": "function",
    "name": "concreteItemTransform",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~concreteItemTransform",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 540,
    "kind": "function",
    "name": "flatten",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~flatten",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "skipTest",
        "types": [
          "*"
        ]
      },
      {
        "name": "itemTransform",
        "types": [
          "*"
        ]
      },
      {
        "name": "flattenedArr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "instantiateContent",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~instantiateContent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 542,
    "kind": "function",
    "name": "propsDiffer",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~propsDiffer",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "propsA",
        "types": [
          "*"
        ]
      },
      {
        "name": "propsB",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 543,
    "kind": "variable",
    "name": "_dirty",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~_dirty",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "variable",
    "name": "_queuedUpdate",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~_queuedUpdate",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "variable",
    "name": "_items",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~_items",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "variable",
    "name": "_virtualRender",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~_virtualRender",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "variable",
    "name": "_linked",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~_linked",
    "access": "private",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "class",
    "name": "LinkedData",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~LinkedData",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "component",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~LinkedData",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~LinkedData#component",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "class",
    "name": "BaseVirtualComponent",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx",
    "static": true,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/react/src/BaseVirtualComponent.jsx",
    "importStyle": "BaseVirtualComponent",
    "description": "A Virtual Component is a special type of component that doesn't render anything to the DOM, but instead exposes a\ntree of nodes in JavaScript. It still has a render function, but it's not rendered by ReactDOM.",
    "lineNumber": 118,
    "decorators": [
      {
        "name": "Component",
        "arguments": null
      }
    ],
    "interface": false
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "_dirty",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "_queuedUpdate",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#_queuedUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "member",
    "name": "_items",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#_items",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "member",
    "name": "_linked",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#_linked",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "forceUpdate",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#forceUpdate",
    "access": "private",
    "description": "Override the React forceUpdate so we do a virtual render (this throttles the rendering to the task queue)",
    "lineNumber": 138,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "member",
    "name": "[_dirty]",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#[_dirty]",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "member",
    "name": "[_queuedUpdate]",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#[_queuedUpdate]",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "[_virtualRender]",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#[_virtualRender]",
    "access": "private",
    "description": "Virtual rendering uses the results of render function (a JSON structure describing the child nodes), and\nrenders them virtually - this just means instantiating the virtual nodes (or updating them if props changed)\nso we have a virtual tree. DOM nodes (like <div> etc) are not allowed in the virtual tree.",
    "lineNumber": 162,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#renderChildren",
    "access": "public",
    "description": "Overrides the renderChildren() of BaseComponent, so it can inject the children from the\nlinked component, if it's linked!",
    "lineNumber": 212,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "render",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#render",
    "access": "public",
    "description": "Virtual components always just render their children (they're nodes in the virtual tree).\nIf you need custom behavior (e.g. injecting other virtual nodes), you can write a real component that\nrenders virtual components.\n\nIf you try to override this, you'll get an error.",
    "lineNumber": 225,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "linkToComponent",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#linkToComponent",
    "access": "public",
    "description": "This is the initialization code for a virtual component. Typically a virtual component exists\nalongside a concrete component, as a mechanism for configuring that component. For example,\nin a virtual scroller, the concrete component will render actual elements to the DOM (based on\nwhat's visible), but its children will be rendered to a virtual tree for doing the layout.\n\nA virtual component can't be rendered by ReactDOM, so instead, you need to pass the children\nof the concrete component to a virtual component, that will render it instead. You only need\nto call bindToComponent on the root virtual component - this just tells the virtual component\nto monitor the children of the given component, and render itself whenever they change.\n\nThis method returns the virtual component, so that you can write (from a component):\n\n```\nthis.virtualComponent = new MyVirtualComponent().linkToComponent(this);\n```",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BaseVirtualComponent} This virtual component."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BaseComponent"
        ],
        "spread": false,
        "optional": false,
        "name": "component",
        "description": "The component to bind to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BaseVirtualComponent"
      ],
      "spread": false,
      "description": "This virtual component."
    }
  },
  {
    "__docId__": 565,
    "kind": "get",
    "name": "children",
    "memberof": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react/src/BaseVirtualComponent.jsx~BaseVirtualComponent#children",
    "access": "public",
    "description": "The virtual children of the virtual component.",
    "lineNumber": 264,
    "type": {
      "nullable": null,
      "types": [
        "Array.<BaseVirtualComponent>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 566,
    "kind": "file",
    "name": "@twist/react/src/decorators/Attribute.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// In React, @Attribute is just a getter over props\n\nimport { addAttribute, getChangeHandler } from '../internal/AttributeUtils';\nimport { _getProp, default as BaseComponent } from '../BaseComponent';\nimport { Binder } from '@twist/core';\nimport DecoratorUtils from '@twist/core/src/internal/utils/DecoratorUtils';\nlet BinderRecordEvent = Binder.recordEvent;\n\n\nexport default DecoratorUtils.makePropertyDecorator((target, property, descriptor, propType, alias) => {\n    if (typeof propType === 'string') {\n        // Assume this is the alias, not a propType\n        alias = propType;\n        propType = undefined;\n    }\n\n    if (!(target instanceof BaseComponent)) {\n        throw new Error(`@Attribute can only be used for properties on an @Component. \\`${target.constructor.name}\\` is not an @Component.`);\n    }\n\n    const eventProperty = getChangeHandler(property);\n\n    let defaultValue = descriptor.value;\n    if (descriptor.initializer) {\n        // We can't have defaultProps that depend on the instance of the class.\n        // This evaluates with `this` being undefined, so we can detect and warn if it depends on the instance.\n        try {\n            // We need to make sure that `this` is undefined for the initializer, so we can catch this error\n            defaultValue = descriptor.initializer.apply();\n        }\n        catch(e) {\n            console.warn(`Ignoring default value for attribute \\`${property}\\` of \\`${target.constructor.name}\\` - default attribute values cannot reference \\`this\\` in React, since they're defined on the class.`);\n        }\n    }\n\n    addAttribute(target, property, propType, defaultValue);\n\n    let attributeProperty = {\n        configurable: true,\n        enumerable: false,\n        get() {\n            Binder.active && BinderRecordEvent(this, 'props.' + property);\n            return this[_getProp](property);\n        },\n        set(val) {\n            let eventCallback = this[_getProp](eventProperty);\n            if (typeof eventCallback === 'function') {\n                // TODO: We should have an option to control whether you want this, e.g. via the prop type\n                eventCallback(val);\n            }\n            else {\n                console.warn(`Attribute \\`${property}\\` of \\`${target.constructor.name}\\` was modified, but no \\`${eventProperty}\\` attribute was specified. If you want two-way binding, make sure to use \\`bind:${property}\\` as the attribute name.`);\n            }\n        }\n    };\n\n    if (alias) {\n        addAttribute(target, alias, propType, defaultValue);\n        Object.defineProperty(target, alias, attributeProperty);\n    }\n\n    return attributeProperty;\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/src/decorators/Attribute.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "BinderRecordEvent",
    "memberof": "@twist/react/src/decorators/Attribute.jsx",
    "static": true,
    "longname": "@twist/react/src/decorators/Attribute.jsx~BinderRecordEvent",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/decorators/Attribute.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "file",
    "name": "@twist/react/src/decorators/Component.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport PropTypes from 'prop-types';\nimport { addAttribute, getEventHandler } from '../internal/AttributeUtils';\nimport DecoratorUtils from '@twist/core/src/internal/utils/DecoratorUtils';\n\n// Supported options of @Component, with their default values\nlet DEFAULT_OPTIONS = {\n    fork: true,\n    events: [],\n    throttleUpdates: true\n};\n\nexport default DecoratorUtils.makeClassDecorator((target, args = {}) => {\n\n    // Set the properties passed in via the @Component arguments (or use the default value)\n    Object.keys(DEFAULT_OPTIONS).forEach(key => {\n        let value = args.hasOwnProperty(key) ? args[key] : DEFAULT_OPTIONS[key];\n        if (key === 'events') {\n            // Special case for events, since we need to concatenate them with events from the superclass\n            target.prototype[key] = (target.prototype[key] || []).concat(value);\n        }\n        else {\n            target.prototype[key] = value;\n        }\n    });\n\n    // If the user passed in properties we don't recognise, emit a warning\n    Object.keys(args).forEach(key => {\n        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n            console.warn(`${key} is not a valid option for @Component - ignoring.`);\n        }\n    });\n\n    // Make sure event handlers are defined\n    target.prototype.events && target.prototype.events.forEach(eventName => {\n        addAttribute(target.prototype, getEventHandler(eventName), PropTypes.func);\n    });\n\n    // Allow scope in the context (both to be passed down and received)\n    target.contextTypes = target.contextTypes || {};\n    target.contextTypes.scope = PropTypes.object;\n    if (target.prototype.fork) {\n        target.childContextTypes = target.childContextTypes || {};\n        target.childContextTypes.scope = PropTypes.object;\n    }\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react/src/decorators/Component.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 569,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "@twist/react/src/decorators/Component.jsx",
    "static": true,
    "longname": "@twist/react/src/decorators/Component.jsx~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react/src/decorators/Component.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"fork\": boolean, \"events\": *, \"throttleUpdates\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "file",
    "name": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst TwistConfiguration = require('@twist/configuration');\nconst convertRuleToCondition = require('./convertRuleToCondition');\nconst webpack = require('webpack');\n\nconst DEFAULT_OPTIONS = {\n    includeBabelRuntime: true,\n    targets: { browsers: [ 'last 2 versions', 'ie >= 10' ] },\n    transformImports: false,\n    useBabelModuleResolver: false,\n    twistPlugin: '@twist/babel-plugin-transform-react',\n\n    // Webpack-specific options:\n    babelLoaderTest: /\\.jsx$/,\n    useThreadLoader: true,\n    useSourceMaps: true,\n};\n\n/**\n * ReactWebpackPlugin configures Webpack to work with Twist. Its main function is as follows:\n *\n * - Add and configure a Babel plugin to parse \".jsx\" files, including any decorators defined\n *   by the libraries you have chosen to add.\n * - Add any additional Webpack plugins that libraries have requested.\n *\n * ReactWebpackPlugin extends TwistConfiguration. You may use that class directly if you'd prefer\n * to configure your build system yourself.\n */\nmodule.exports = class ReactWebpackPlugin extends TwistConfiguration {\n\n    constructor(options) {\n        super('webpack', Object.assign({}, DEFAULT_OPTIONS, options));\n    }\n\n    _init(contextName, options) {\n\n        /**\n         * The local webpack instance.\n         * @member {Webpack}\n         */\n        this.webpack = webpack;\n\n        this._webpackPlugins = [];\n        this._nonLibraryRuleExcludes = [];\n        this._webpackRules = [];\n        this._babelLoaderExcludes = [];\n\n        super._init(contextName, options);\n\n        // React Babel Plugins (some people use babel-preset-react instead):\n        this.addBabelPlugin('syntax-jsx');\n        this.addBabelPlugin('transform-react-jsx');\n        this.addBabelPlugin('transform-react-display-name');\n    }\n\n    /**\n     * Adds a .twistrc configuration to the Twist configuration\n     * This shouldn't be called directly - it's called as a consequence of _libraryLoader.load().\n     *\n     * @param {Object} config The configuration from the .twistrc file\n     */\n    mergeConfig(config = {}) {\n        super.mergeConfig(config);\n\n        // Babel loader excludes\n        this._forEachConfig(config.babelLoaderExcludes, this.addBabelLoaderExclude.bind(this));\n\n        // Webpack plugins\n        this._forEachConfig(config.webpackPlugins, this.addWebpackPlugin.bind(this));\n\n        // Webpack rules\n        this._forEachConfig(config.webpackRules, this.addWebpackRule.bind(this));\n\n        // Global webpack rules\n        this._forEachConfig(config.globalWebpackRules, this.addGlobalWebpackRule.bind(this));\n    }\n\n    /**\n     * Add an exclude pattern to Twist's babel loader. Use this only if you need to exclude certain files\n     * that would otherwise match Twist files.\n     * @param {RegExp|string} exclude\n     * @return {ReactWebpackPlugin}\n     */\n    addBabelLoaderExclude(exclude) {\n        this._babelLoaderExcludes.push(exclude);\n        return this;\n    }\n\n    /**\n     * Add an additional Webpack plugin. This is meant to be used by libraries; if you are not\n     * writing a library, just add other plugins to your Webpack config normally.\n     * @param {WebpackPlugin} plugin\n     * @return {ReactWebpackPlugin}\n     */\n    addWebpackPlugin(plugin) {\n        if (!this.currentLibrary.parentLibrary) {\n            throw new Error('addWebpackPlugin() must be called from within a Twist library. '\n                + 'To add a webpack plugin to your project, add it to your webpack config directly. '\n                + 'If you are calling this from a library, make sure you have called `addPath()` first.');\n        }\n        this._webpackPlugins.push(plugin);\n        return this;\n    }\n\n    /**\n     * Add a Rule to the Webpack configuration. See <https://webpack.js.org/configuration/module/#rule>.\n     * A Rule typically inclues a \"test\" property and a \"loader\" property, and can be used to specify loaders\n     * for specific files (such as CSS processors).\n     *\n     * NOTE: Rules are automatically scoped to apply only to files contained within your library's package.\n     * This ensures that different libraries don't conflict with each others' loaders. If you intend to provide\n     * a loader that applies to files outside the current library, use `addGlobalWebpackRule`, with caution.\n     *\n     * @param {Rule} rule A webpack rule (e.g. { test: /\\.css$/, loader: 'style-loader' })\n     * @return {ReactWebpackPlugin}\n     */\n    addWebpackRule(rule) {\n        if (!this.currentLibrary.parentLibrary) {\n            throw new Error('addWebpackRule() must be called from within a Twist library. '\n                + 'To add a webpack rule to your project, add it to your webpack config directly. '\n                + 'If you are calling this from a library, make sure you have called `addPath()` first.');\n        }\n        // This rule applies to files within the current library which match `rule`.\n        // Exclude files that match this rule from the end-users' configuration:\n        this._nonLibraryRuleExcludes.push({\n            and: [ this.currentLibrary.path, convertRuleToCondition(rule) ]\n        });\n        // And add the actual rule:\n        this._webpackRules.push({\n            include: this.currentLibrary.path,\n            rules: [\n                rule\n            ]\n        });\n        return this;\n    }\n\n    /**\n     * Add a rule to the Webpack configuration that applies to a path _outside_ the current library.\n     * Only use this if you must provide a loader for files that don't live within your library's path.\n     *\n     * The rule you provide MUST have an `include` property, pointing to the absolute path of a directory\n     * to which your loader will apply. This ensures that your loader points to a constrained set of files.\n     * You can use `require.resolve(\"some-path-of-a-known-file\")` to get the absolute path of a dependency.\n     *\n     * NOTE: By providing this loader, you're effectively saying that this loader takes ownership of any\n     * matching files. If a user provides a similar rule in their config, yours takes precedence.\n     *\n     * @param {Rule} rule\n     * @return {ReactWebpackPlugin}\n     */\n    addGlobalWebpackRule(rule) {\n        if (!this.currentLibrary.parentLibrary) {\n            throw new Error('addGlobalWebpackRule() must be called from within a Twist library. '\n                + 'To add a webpack rule to your project, add it to your webpack config directly. '\n                + 'If you are calling this from a library, make sure you have called `addPath()` first.');\n        }\n        if (!rule.include) {\n            throw new Error('You must provide an `include` property on `ReactWebpackPlugin.addGlobalWebpackRule()`. '\n                + 'See its documentation for details.');\n        }\n        this._nonLibraryRuleExcludes.push(convertRuleToCondition(rule));\n        this._webpackRules.push(rule);\n        return this;\n    }\n\n    /**\n     * Add a custom Babel plugin. Note that in order to use multi-threaded compilation, the plugin parameter must be a string\n     * (Babel will automatically require it when it's needed).\n     *\n     * @param {BabelPlugin|string} plugin\n     * @param {object} [options]\n     */\n    addBabelPlugin(plugin, options) {\n        if (typeof plugin !== 'string' && this._options.useThreadLoader) {\n            console.warn('In order to use the thread-loader, all Babel plugins must be passed in as strings. Change `require(xxx)` to `xxx` if you want to enable multi-threaded compilation');\n            this._options.useThreadLoader = false;\n        }\n        return super.addBabelPlugin(plugin, options);\n    }\n\n    /**\n     * Apply the plugin to a Webpack compiler. (This function is called by Webpack.)\n     * @param {Compiler} compiler\n     */\n    apply(compiler) {\n        const options = compiler.options;\n        // Configure the Twist path aliases, merging them with `resolve.alias` in such a way\n        // that users' aliases override ours.\n        options.resolve = options.resolve || {};\n        options.resolve.alias = Object.assign({}, this.twistOptions.aliases, options.resolve.alias || {});\n\n        options.module = options.module || {};\n        options.module.rules = options.module.rules || [];\n\n        if (this._options.babelLoaderTest) {\n            let babelOptions = Object.assign(this.babelOptions, {\n                sourceMaps: this._options.useSourceMaps\n            });\n            let use = [ {\n                loader: 'babel-loader',\n                options: babelOptions\n            } ];\n\n            if (this._options.useThreadLoader) {\n                use.unshift({\n                    loader: 'thread-loader'\n                });\n            }\n\n            options.module.rules.push({\n                test: this._options.babelLoaderTest,\n                use,\n                exclude: this._babelLoaderExcludes\n            });\n        }\n\n        // Exclude any \"files handled by libraries' loaders\" from end-users' rules.\n        options.module.rules.forEach((rule) => {\n            if (!rule.exclude) {\n                rule.exclude = [];\n            }\n            else if (!Array.isArray(rule.exclude)) {\n                rule.exclude = [ rule.exclude ];\n            }\n            rule.exclude = rule.exclude.concat(this._nonLibraryRuleExcludes);\n        });\n\n        this._webpackRules.forEach((rule) => {\n            options.module.rules.push(rule);\n        });\n\n        // Add any plugins that external libraries have defined.\n        this._webpackPlugins.forEach((plugin) => {\n            plugin.apply(compiler);\n        });\n    }\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 571,
    "kind": "variable",
    "name": "TwistConfiguration",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~TwistConfiguration",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 572,
    "kind": "variable",
    "name": "convertRuleToCondition",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~convertRuleToCondition",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 573,
    "kind": "variable",
    "name": "webpack",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~webpack",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 574,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"includeBabelRuntime\": boolean, \"targets\": *, \"transformImports\": *, \"useBabelModuleResolver\": *, \"twistPlugin\": string, \"babelLoaderTest\": *, \"useThreadLoader\": boolean, \"useSourceMaps\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "class",
    "name": "exports",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js",
    "importStyle": null,
    "description": "ReactWebpackPlugin configures Webpack to work with Twist. Its main function is as follows:\n\n- Add and configure a Babel plugin to parse \".jsx\" files, including any decorators defined\n  by the libraries you have chosen to add.\n- Add any additional Webpack plugins that libraries have requested.\n\nReactWebpackPlugin extends TwistConfiguration. You may use that class directly if you'd prefer\nto configure your build system yourself.",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "TwistConfiguration"
    ],
    "ignore": true
  },
  {
    "__docId__": 576,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "_init",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#_init",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "contextName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "webpack",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#webpack",
    "access": "public",
    "description": "The local webpack instance.",
    "lineNumber": 53,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "member",
    "name": "_webpackPlugins",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#_webpackPlugins",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 580,
    "kind": "member",
    "name": "_nonLibraryRuleExcludes",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#_nonLibraryRuleExcludes",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "_webpackRules",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#_webpackRules",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "_babelLoaderExcludes",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#_babelLoaderExcludes",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "mergeConfig",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#mergeConfig",
    "access": "public",
    "description": "Adds a .twistrc configuration to the Twist configuration\nThis shouldn't be called directly - it's called as a consequence of _libraryLoader.load().",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration from the .twistrc file"
      }
    ],
    "return": null
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "addBabelLoaderExclude",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#addBabelLoaderExclude",
    "access": "public",
    "description": "Add an exclude pattern to Twist's babel loader. Use this only if you need to exclude certain files\nthat would otherwise match Twist files.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "RegExp",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactWebpackPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "addWebpackPlugin",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#addWebpackPlugin",
    "access": "public",
    "description": "Add an additional Webpack plugin. This is meant to be used by libraries; if you are not\nwriting a library, just add other plugins to your Webpack config normally.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackPlugin"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactWebpackPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "addWebpackRule",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#addWebpackRule",
    "access": "public",
    "description": "Add a Rule to the Webpack configuration. See <https://webpack.js.org/configuration/module/#rule>.\nA Rule typically inclues a \"test\" property and a \"loader\" property, and can be used to specify loaders\nfor specific files (such as CSS processors).\n\nNOTE: Rules are automatically scoped to apply only to files contained within your library's package.\nThis ensures that different libraries don't conflict with each others' loaders. If you intend to provide\na loader that applies to files outside the current library, use `addGlobalWebpackRule`, with caution.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "A webpack rule (e.g. { test: /\\.css$/, loader: 'style-loader' })"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactWebpackPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "addGlobalWebpackRule",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#addGlobalWebpackRule",
    "access": "public",
    "description": "Add a rule to the Webpack configuration that applies to a path _outside_ the current library.\nOnly use this if you must provide a loader for files that don't live within your library's path.\n\nThe rule you provide MUST have an `include` property, pointing to the absolute path of a directory\nto which your loader will apply. This ensures that your loader points to a constrained set of files.\nYou can use `require.resolve(\"some-path-of-a-known-file\")` to get the absolute path of a dependency.\n\nNOTE: By providing this loader, you're effectively saying that this loader takes ownership of any\nmatching files. If a user provides a similar rule in their config, yours takes precedence.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactWebpackPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "addBabelPlugin",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#addBabelPlugin",
    "access": "public",
    "description": "Add a custom Babel plugin. Note that in order to use multi-threaded compilation, the plugin parameter must be a string\n(Babel will automatically require it when it's needed).",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "BabelPlugin",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "apply",
    "memberof": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/react-webpack-plugin/src/ReactTwistWebpackPlugin.js~exports#apply",
    "access": "public",
    "description": "Apply the plugin to a Webpack compiler. (This function is called by Webpack.)",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "Compiler"
        ],
        "spread": false,
        "optional": false,
        "name": "compiler",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "file",
    "name": "@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// We allow inclusionary properties. But exclusionary properties (like `exclude` and `not`)\n// pose a problem: they could inadvertently affect settings at a higher level. For instance,\n// `{ exclude: { exclude: 'foo' } }` is actually equivalent to `{ include: 'foo' }`.\n// Since we add an `exclude` rule in ReactWebpackPlugin to ensure libraries' configurations\n// properly override users' main ones for library files, we must be a little careful here.\n// So to keep things simple, we only allow inclusionary properties. This should handle the\n// vast majority of cases, e.g. matching files with a certain extension in a certain directory.\nconst ALLOWED_PROPERTIES = [ 'test', 'include', 'and', 'or' ];\nconst PROHIBITIED_PROPERTIES = [ 'exclude' , 'not' ];\n\n/**\n * Create a Webpack Condition from a Webpack Rule by stripping out any nested Rule properties,\n * keeping only the conditions in which the rule would be applied. In other words, the return\n * value of this function could be passed to `exclude` on another rule, to exclude only the\n * files matched by the input rule.\n *\n * @param {Rule} rule\n * @return {Condition}\n */\nfunction convertRuleToCondition(rule) {\n    if (!rule || typeof rule !== 'object' || !Object.keys(rule).length) {\n        return rule;\n    }\n    if (Array.isArray(rule)) {\n        return rule.map(convertRuleToCondition);\n    }\n    const condition = {};\n    // We allow certain properties...\n    ALLOWED_PROPERTIES.forEach((prop) => {\n        if (rule[prop]) {\n            condition[prop] = convertRuleToCondition(rule[prop]);\n        }\n    });\n    // We prohibit certain properties...\n    PROHIBITIED_PROPERTIES.forEach((prop) => {\n        if (rule[prop]) {\n            throw new Error(`Webpack rules added in a Twist library cannot contain the property \"${prop}\". `\n                + `Try to reformulate your rule with ${ALLOWED_PROPERTIES.join('/')}.`);\n        }\n    });\n    // And the rest we ignore, because they're needed for a Rule but not a Condition.\n    return condition;\n}\n\nmodule.exports = convertRuleToCondition;\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 591,
    "kind": "variable",
    "name": "ALLOWED_PROPERTIES",
    "memberof": "@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/convertRuleToCondition.js~ALLOWED_PROPERTIES",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 592,
    "kind": "variable",
    "name": "PROHIBITIED_PROPERTIES",
    "memberof": "@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/convertRuleToCondition.js~PROHIBITIED_PROPERTIES",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "function",
    "name": "convertRuleToCondition",
    "memberof": "@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/react-webpack-plugin/src/convertRuleToCondition.js~convertRuleToCondition",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/react-webpack-plugin/src/convertRuleToCondition.js",
    "importStyle": null,
    "description": "Create a Webpack Condition from a Webpack Rule by stripping out any nested Rule properties,\nkeeping only the conditions in which the rule would be applied. In other words, the return\nvalue of this function could be passed to `exclude` on another rule, to exclude only the\nfiles matched by the input rule.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Rule"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Condition"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 594,
    "kind": "file",
    "name": "@twist/router/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nexport { default as Route } from './src/decorators/Route';\nexport { default as Provider } from './src/components/Provider';\nexport { default as Link } from './src/components/Link';\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "@twist/router/karma.conf.js",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst path = require('path');\n\nprocess.env.NODE_ENV = 'test';\n\nmodule.exports = function(config) {\n    config.set({\n        webpack: require(path.join(__dirname, 'webpack.config.js')),\n\n        files: [\n            'test/IncludeAll.jsx',\n            'test/Index.jsx'\n        ],\n\n        preprocessors: {\n            '**/*.*': [ 'webpack' ],\n        },\n\n        reporters: [ 'progress', 'mocha', 'coverage' ],\n        frameworks: [ 'mocha' ],\n        browsers: [ 'Chrome' ],\n\n        coverageReporter: {\n            dir: 'testing/',\n            reporters: [\n                { type: 'html', subdir: 'coverage' },\n                { type: 'text' }\n            ],\n        },\n\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-firefox-launcher',\n            'karma-mocha-reporter',\n            'karma-mocha',\n            'karma-webpack',\n        ],\n\n        webpackMiddleware: {\n            stats: 'errors-only',\n            noInfo: true\n        }\n    });\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/karma.conf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/router/karma.conf.js",
    "static": true,
    "longname": "@twist/router/karma.conf.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/router/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 597,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/router/karma.conf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/karma.conf.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/router/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 598,
    "kind": "file",
    "name": "@twist/router/src/BaseRoute.jsx",
    "content": "import { SignalDispatcher } from '@twist/core';\n\nexport default class BaseRoute extends SignalDispatcher {\n\n    constructor(router, keys, values) {\n        super();\n\n        this.router = router;\n        this._keys = keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            this.defineObservable(keys[i].name, values[i]);\n        }\n    }\n\n    get scope() {\n        return this.router.scope;\n    }\n\n    get currentPath() {\n        return this.router.currentPath;\n    }\n\n    get queryParams() {\n        return this.router.queryParams;\n    }\n\n    /**\n     * Override this to hook into when we enter the route\n     */\n    enter() {\n    }\n\n    /**\n     * Override this to hook into when we leave the route (i.e. switching to another route)\n     * Note that if only the parameters change, this won't get called - instead, you can just watch the parameters\n     */\n    leave() {\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/BaseRoute.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "class",
    "name": "BaseRoute",
    "memberof": "@twist/router/src/BaseRoute.jsx",
    "static": true,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/BaseRoute.jsx",
    "importStyle": "BaseRoute",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "@twist/core~SignalDispatcher"
    ]
  },
  {
    "__docId__": 600,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 601,
    "kind": "member",
    "name": "router",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#router",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "_keys",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#_keys",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "get",
    "name": "scope",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#scope",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "get",
    "name": "currentPath",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#currentPath",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "get",
    "name": "queryParams",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#queryParams",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "enter",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#enter",
    "access": "public",
    "description": "Override this to hook into when we enter the route",
    "lineNumber": 31,
    "params": [],
    "return": null
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "leave",
    "memberof": "@twist/router/src/BaseRoute.jsx~BaseRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/BaseRoute.jsx~BaseRoute#leave",
    "access": "public",
    "description": "Override this to hook into when we leave the route (i.e. switching to another route)\nNote that if only the parameters change, this won't get called - instead, you can just watch the parameters",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "@twist/router/src/History.jsx",
    "content": "import { SignalDispatcher } from '@twist/core';\nimport './third_party/history';\nimport query from './third_party/query';\n\nimport RouteChangeEvent from './RouteChangeEvent';\n\nconst Global = (\n    typeof window !== 'undefined' ? window\n        : typeof self !== 'undefined' ? self\n            : typeof global !== 'undefined' ? global : {}\n);\n\n/**\n * History provides a wrapper over the browser history APIs, so that we can listen to and control browser\n * path change events. This emits two events:\n *\n * * change: This is emitted when the path changes, either programmatically, or via a browser event (like the back button)\n *           The data for this event is a RouteChangeEvent object, which can be modified (i.e. to abort or redirect the path change).\n * * commit-change: This is emitted when a path change is finalized, so it can be propagated to the router (actually updating the app).\n *\n * The idea is that users can intercept change events (via a route:provider), so that they can abort\n */\nexport default class History extends SignalDispatcher {\n\n    @Observable path;\n    @Observable queryParams;\n    @Observable _currentPageId;\n\n    _userState;\n    _statePrefix = Math.random() + '_';\n    _nextPageId = 1;\n\n    constructor(useHashUrls) {\n        super();\n        this.useHashUrls = useHashUrls;\n\n        Global.addEventListener('popstate', this._onBrowserPathChange);\n        this.link(() => Global.removeEventListener('popstate', this._onBrowserPathChange));\n    }\n\n    init() {\n        this._onBrowserPathChange();\n    }\n\n    get id() {\n        return this._statePrefix + this._currentPageId;\n    }\n\n    _createNewPageId() {\n        return this._nextPageId++;\n    }\n\n    _stateToPageId(evState) {\n        if (typeof evState === 'string' && evState.indexOf(this._statePrefix) === 0) {\n            return Number(evState.substring(this._statePrefix.length));\n        }\n    }\n\n    _pageIdToState(pageId) {\n        pageId = pageId || this._currentPageId;\n        return this._statePrefix + pageId;\n    }\n\n    _getHistoryState(pageId) {\n        return {\n            id: this._pageIdToState(pageId),\n            user: this._userState\n        };\n    }\n\n    /**\n     * Get the current path according to the browser\n     * @private\n     */\n    @Bind\n    _onBrowserPathChange(ev) {\n\n        const location = Global.history.location || Global.location;\n        let newPath = location && (this.useHashUrls ? location.hash : location.pathname) || '';\n\n        // We normalize any browser paths so they don't include the hash\n        newPath = newPath.replace(/^#/, '');\n\n        var historyState = ev ? ev.state : Global.history.state;\n        var newPageId = this._stateToPageId(historyState && historyState.id);\n\n        if (!newPageId) {\n            // If it doesn't have a state, the user must have entered a URL directly\n            // We give this a new page id, and replace the browser state so it's in the state!\n            newPageId = this._createNewPageId();\n            if (location.protocol === 'http:' || location.protocol === 'https:') {\n                // History API doesn't work for local files, so only try to do this if we know the file is hosted\n                Global.history.replaceState(this._getHistoryState(newPageId), newPath);\n            }\n        }\n\n        var abortMethod;\n        if (newPageId === this._currentPageId - 1) {\n            // User clicked the back button\n            abortMethod = 'forward';\n        }\n        else if (newPageId === this._currentPageId + 1) {\n            // User clicked the forward button\n            abortMethod = 'back';\n        }\n\n        this._currentPageId = newPageId;\n        this._userState = historyState && historyState.user;\n\n        if (this._ignoreNextPopEvent) {\n            this._ignoreNextPopEvent = false;\n            return;\n        }\n\n        this._updatePath(newPath, true, abortMethod);\n    }\n\n    /**\n     * Controls whether or not hash urls are used\n     * @private\n     */\n    get useHashUrls() {\n        return Global.history.emulate || this._useHashUrls;\n    }\n\n    set useHashUrls(useHashes) {\n        if (Global.history.emulate && !useHashes) {\n            console.warn('Browser does not support history API, so cannot disable hash URLs');\n            useHashes = true;\n        }\n        this._useHashUrls = useHashes;\n    }\n\n\n    _getChangeEvent() {\n        return new RouteChangeEvent(this.fullPath, this._previousPath);\n    }\n\n    /**\n     * Changing the path - this also parses any query strings appended to the path\n     * @private\n     */\n    _updatePath(path, canIntercept, abortMethod) {\n        this.fullPath = path;\n\n        if (this.fullPath === this._previousPath) {\n            // Nothing changed\n            return;\n        }\n\n        var index = path.indexOf('?');\n        if (index !== -1) {\n            this.path = path.substr(0, index);\n            this.queryParams = query.parse(path.substr(index + 1));\n        }\n        else {\n            this.path = path;\n            this.queryParams = {};\n        }\n\n        if (canIntercept) {\n            // An onChange handler has the ability to modify this change event, so we need to react to that!\n            var event = this._getChangeEvent();\n            this.trigger('change', event);\n\n            // If it's an abort, we use the provided method (e.g. back, forward) if there is one\n            if (event._operation === RouteChangeEvent.ABORT && abortMethod) {\n                // Abort\n                this._ignoreNextPopEvent = true;\n                this[abortMethod]();\n                return;\n            }\n            // Otherwise for aborts or redirects, we just replace the current path\n            if (event._operation === RouteChangeEvent.REDIRECT || (event._operation === RouteChangeEvent.ABORT && !abortMethod)) {\n                this.setPath(event.newPath, true);\n                return;\n            }\n        }\n\n        this._previousPath = this.fullPath;\n        this.trigger('commit-change');\n    }\n\n    _setPath(path, replaceState = false) {\n        let hashedPath = this.useHashUrls ? '#' + path : path;\n\n        // We use a pageId as a numerical index - this lets us tell if you go\n        // forward or back through a browser event\n        this._currentPageId = this._createNewPageId();\n\n        if (replaceState) {\n            Global.history.replaceState(this._getHistoryState(), path, hashedPath);\n        }\n        else {\n            Global.history.pushState(this._getHistoryState(), path, hashedPath);\n        }\n    }\n\n    setPath(path, replaceState) {\n        // Update the path in the browser (history API):\n        this._setPath(path, replaceState);\n        // Update the view - note: we don't allow intercepting of replaceState path changes\n        this._updatePath(path, !replaceState, 'back');\n    }\n\n    setState(data) {\n        this._userState = data;\n        // Store the state via the history API:\n        Global.history.replaceState(this._getHistoryState(), this.fullPath);\n    }\n\n    getState() {\n        return this._userState;\n    }\n\n    forward() {\n        Global.history.forward();\n    }\n\n    back() {\n        Global.history.back();\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/History.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "Global",
    "memberof": "@twist/router/src/History.jsx",
    "static": true,
    "longname": "@twist/router/src/History.jsx~Global",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/router/src/History.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "class",
    "name": "History",
    "memberof": "@twist/router/src/History.jsx",
    "static": true,
    "longname": "@twist/router/src/History.jsx~History",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/History.jsx",
    "importStyle": "History",
    "description": "History provides a wrapper over the browser history APIs, so that we can listen to and control browser\npath change events. This emits two events:\n\n* change: This is emitted when the path changes, either programmatically, or via a browser event (like the back button)\n          The data for this event is a RouteChangeEvent object, which can be modified (i.e. to abort or redirect the path change).\n* commit-change: This is emitted when a path change is finalized, so it can be propagated to the router (actually updating the app).\n\nThe idea is that users can intercept change events (via a route:provider), so that they can abort",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "@twist/core~SignalDispatcher"
    ]
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "path",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#path",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "queryParams",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#queryParams",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "_currentPageId",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_currentPageId",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "_userState",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_userState",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "_statePrefix",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_statePrefix",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "_nextPageId",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_nextPageId",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "init",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#init",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 620,
    "kind": "get",
    "name": "id",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#id",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "_createNewPageId",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_createNewPageId",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "_stateToPageId",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_stateToPageId",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "evState",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "_pageIdToState",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_pageIdToState",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "pageId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "_getHistoryState",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_getHistoryState",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "pageId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"user\": *}"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "_onBrowserPathChange",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_onBrowserPathChange",
    "access": "private",
    "description": "Get the current path according to the browser",
    "lineNumber": 76,
    "decorators": [
      {
        "name": "Bind",
        "arguments": null
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "ev",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "_ignoreNextPopEvent",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_ignoreNextPopEvent",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "get",
    "name": "useHashUrls",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#useHashUrls",
    "access": "private",
    "description": "Controls whether or not hash urls are used",
    "lineNumber": 122,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "set",
    "name": "useHashUrls",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#useHashUrls",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "_useHashUrls",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_useHashUrls",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "_getChangeEvent",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_getChangeEvent",
    "access": "private",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "_updatePath",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_updatePath",
    "access": "private",
    "description": "Changing the path - this also parses any query strings appended to the path",
    "lineNumber": 143,
    "ignore": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "canIntercept",
        "types": [
          "*"
        ]
      },
      {
        "name": "abortMethod",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 634,
    "kind": "member",
    "name": "fullPath",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#fullPath",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "_previousPath",
    "memberof": "@twist/router/src/History.jsx~History",
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_previousPath",
    "access": "private",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "_setPath",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#_setPath",
    "access": "private",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "replaceState",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "setPath",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#setPath",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "replaceState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "setState",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#setState",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "getState",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#getState",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "forward",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#forward",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "back",
    "memberof": "@twist/router/src/History.jsx~History",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/History.jsx~History#back",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 649,
    "kind": "file",
    "name": "@twist/router/src/Path.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport pathToRegexp from 'path-to-regexp';\n\nexport default class Path {\n\n    constructor(path, routeClass) {\n        this.keys = [];\n        this.pathStr = path;\n        this.path = pathToRegexp(path, this.keys);\n        this.RouteClass = routeClass;\n    }\n\n    check(path) {\n        return this.path.test(path);\n    }\n\n    getValuesForPath(path) {\n        var values = this.path.exec(path);\n\n        if (!values) {\n            return [];\n        }\n\n        // The first value is the path itself, so throw it away\n        values.shift();\n\n        // Decode any URI-encoded values in the path\n        return values.map(value => {\n            try {\n                // Avoid that decodeURIComponent converts undefined value to 'undefined' string\n                value = value !== undefined ? decodeURIComponent(value) : undefined;\n            }\n            catch(e) {\n                console.warn(`Invalid URI component passed to Path.create(): '${value}'. `\n                    + `Are you calling encodeURIComponent() when constructing your URLs?`);\n            }\n            return value;\n        });\n    }\n\n    /**\n     * Create a new route instance, passing in the route's parameters as the initial parameter values\n     */\n    create(router, path) {\n        var values = this.getValuesForPath(path);\n        return new this.RouteClass(router, this.keys, values);\n    }\n\n    /**\n     * Update an existing route instance with new values - this only works if it's the exact same @Route() decorator.\n     * @returns {Boolean} Returns true if the route was able to be updated; false if it wasn't.\n     */\n    update(route, path) {\n        if (route instanceof this.RouteClass && route._keys === this.keys) {\n            // It's the same route instance with params, so we can update it directly\n            var values = this.getValuesForPath(path);\n            this.keys.forEach((key, index) => {\n                route[key.name] = values[index];\n            });\n            return true;\n        }\n\n        return false;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/Path.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 650,
    "kind": "class",
    "name": "Path",
    "memberof": "@twist/router/src/Path.jsx",
    "static": true,
    "longname": "@twist/router/src/Path.jsx~Path",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/Path.jsx",
    "importStyle": "Path",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 651,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "keys",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#keys",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "pathStr",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#pathStr",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "member",
    "name": "path",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#path",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "member",
    "name": "RouteClass",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#RouteClass",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "check",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#check",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "getValuesForPath",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#getValuesForPath",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "create",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#create",
    "access": "public",
    "description": "Create a new route instance, passing in the route's parameters as the initial parameter values",
    "lineNumber": 56,
    "params": [
      {
        "name": "router",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "update",
    "memberof": "@twist/router/src/Path.jsx~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/Path.jsx~Path#update",
    "access": "public",
    "description": "Update an existing route instance with new values - this only works if it's the exact same @Route() decorator.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Returns true if the route was able to be updated; false if it wasn't."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Returns true if the route was able to be updated; false if it wasn't."
    },
    "params": [
      {
        "name": "route",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 660,
    "kind": "file",
    "name": "@twist/router/src/RouteChangeEvent.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/**\n * Event capturing a route change - this provides methods for aborting, or redirecting the route\n */\nexport default class RouteChangeEvent {\n\n    static ABORT = 'abort';\n    static REDIRECT = 'redirect';\n\n    constructor(newPath, oldPath) {\n        this._newPath = newPath;\n        this._oldPath = oldPath;\n        this._operation;\n    }\n\n    get oldPath() {\n        return this._oldPath;\n    }\n\n    get newPath() {\n        return this._newPath;\n    }\n\n    /**\n     * Abort the route change - this keeps it on the current route\n     */\n    abort() {\n        this._operation = RouteChangeEvent.ABORT;\n        this._newPath = this._oldPath;\n    }\n\n    /**\n     * Redirect the event to a different path\n     */\n    redirect(path) {\n        this._operation = RouteChangeEvent.REDIRECT;\n        this._newPath = path;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/RouteChangeEvent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 661,
    "kind": "class",
    "name": "RouteChangeEvent",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx",
    "static": true,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/RouteChangeEvent.jsx",
    "importStyle": "RouteChangeEvent",
    "description": "Event capturing a route change - this provides methods for aborting, or redirecting the route",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "ABORT",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "static": true,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent.ABORT",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "REDIRECT",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "static": true,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent.REDIRECT",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "_newPath",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#_newPath",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "_oldPath",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#_oldPath",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "get",
    "name": "oldPath",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#oldPath",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "get",
    "name": "newPath",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#newPath",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "abort",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#abort",
    "access": "public",
    "description": "Abort the route change - this keeps it on the current route",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "_operation",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#_operation",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "redirect",
    "memberof": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/router/src/RouteChangeEvent.jsx~RouteChangeEvent#redirect",
    "access": "public",
    "description": "Redirect the event to a different path",
    "lineNumber": 47,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "file",
    "name": "@twist/router/src/RouteRegistry.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport Path from './Path';\n\nexport default class RouteManager {\n\n    static defaultPath;\n    static namespaces = {};\n\n    /**\n     * Register a path expression with a Route class.\n     * This is called internally by the `@Route` decorator.\n     */\n    static register(namespace = '', pathExpr, route) {\n        let ns = this.namespaces[namespace];\n        if (!ns) {\n            ns = this.namespaces[namespace] = {\n                paths: []\n            };\n        }\n\n        const path = new Path(pathExpr, route);\n\n        if (pathExpr === '$default') {\n            if (ns.defaultPath) {\n                console.warn('There is already a default route ($default) - this will override the previous default route');\n            }\n            ns.defaultPath = path;\n        }\n        else {\n            ns.paths.push(path);\n        }\n    }\n\n    /**\n     * Resolve a concrete path to a Route.\n     * This is called by the <router> component.\n     */\n    static resolve(namespace = '', path) {\n        let ns = this.namespaces[namespace];\n        if (!ns) {\n            console.warn('No paths registered for the namespace: ' + namespace);\n            return;\n        }\n\n        let paths = ns.paths;\n        let match;\n        for (let i = 0, l = paths.length; i < l; ++i) {\n            if (paths[i].check(path)) {\n                if (match) {\n                    console.warn('More than one match for path ' + path + ' - this will override the previous match');\n                }\n                match = paths[i];\n            }\n        }\n\n        return match || ns.defaultPath;\n    }\n\n    /**\n     * Print out a list of the path expressions and the class they correspond to; useful for debugging.\n     */\n    static toString() {\n        return Object.keys(this.namespaces).map(namespace => {\n            let prefix = namespace ? '[' + namespace + '] ' : '';\n            let ns = this.namespaces[namespace];\n            let strs = [];\n            if (ns.defaultPath) {\n                strs.push(prefix + '$default -> ' + ns.defaultPath.RouteClass.name);\n            }\n            ns.paths.forEach(p => strs.push(prefix + p.pathStr + ' -> ' + p.RouteClass.name));\n            return strs.join('\\n');\n        }).join('\\n');\n    }\n\n    /**\n     * Clear all the registered routes - useful for testing\n     */\n    static clear(namespace) {\n        if (namespace !== undefined) {\n            // Just clear the routes for the given namespace\n            delete this.namespaces[namespace];\n            return;\n        }\n\n        // Clear all routes\n        RouteManager.namespaces = {};\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/RouteRegistry.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 676,
    "kind": "class",
    "name": "RouteManager",
    "memberof": "@twist/router/src/RouteRegistry.jsx",
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/RouteRegistry.jsx",
    "importStyle": "RouteManager",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 677,
    "kind": "member",
    "name": "defaultPath",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.defaultPath",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "member",
    "name": "namespaces",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.namespaces",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "register",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.register",
    "access": "public",
    "description": "Register a path expression with a Route class.\nThis is called internally by the `@Route` decorator.",
    "lineNumber": 25,
    "params": [
      {
        "name": "namespace",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "pathExpr",
        "types": [
          "*"
        ]
      },
      {
        "name": "route",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "resolve",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.resolve",
    "access": "public",
    "description": "Resolve a concrete path to a Route.\nThis is called by the <router> component.",
    "lineNumber": 50,
    "params": [
      {
        "name": "namespace",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "toString",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.toString",
    "access": "public",
    "description": "Print out a list of the path expressions and the class they correspond to; useful for debugging.",
    "lineNumber": 74,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "clear",
    "memberof": "@twist/router/src/RouteRegistry.jsx~RouteManager",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/src/RouteRegistry.jsx~RouteManager.clear",
    "access": "public",
    "description": "Clear all the registered routes - useful for testing",
    "lineNumber": 90,
    "params": [
      {
        "name": "namespace",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 683,
    "kind": "file",
    "name": "@twist/router/src/decorators/Route.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport RouteRegistry from '../RouteRegistry';\n\nexport default function(namespace, path) {\n    function Route(target) {\n        if (!path) {\n            path = namespace;\n            namespace = undefined;\n        }\n        if (!path) {\n            throw new Error('@Route requires a path as an argument - for the default route, use \"$default\"');\n        }\n\n        RouteRegistry.register(namespace, path, target);\n        return target;\n    }\n\n    if (typeof namespace === 'function') {\n        return Route(); // They invoked the decorator without arguments. (This is an error, in the case of `Route`.)\n    }\n\n    return Route;\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/router/src/decorators/Route.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 684,
    "kind": "function",
    "name": "Route",
    "memberof": "@twist/router/src/decorators/Route.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/router/src/decorators/Route.jsx~Route",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/router/src/decorators/Route.jsx",
    "importStyle": "Route",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "namespace",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "file",
    "name": "@twist/virtual-scroller/index.js",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n// Decorators\nexport { default as LayoutComponent } from './src/decorators/LayoutComponent';\nexport { default as InteractionManager } from './src/decorators/InteractionManager';\n\n// UI Components and related classes\nexport { default as VirtualScroll } from './src/ui/VirtualScroll';\nexport { default as BaseViewComponent } from './src/ui/BaseViewComponent';\nexport { default as BaseInteractionManager } from './src/ui/BaseInteractionManager';\n\n// Layout\nexport { default as BaseLayoutComponent } from './src/layout/BaseLayoutComponent';\nexport { default as LayoutContainer } from './src/layout/LayoutContainer';\nexport { default as OverlappingLayout } from './src/layout/OverlappingLayout';\nexport { default as ContiguousLayout } from './src/layout/ContiguousLayout';\nexport { HorizontalListLayout, VerticalListLayout } from './src/layout/ListLayout';\nexport { VerticalGridLayout } from './src/layout/GridLayout';\nexport { HorizontalKnuthPlassLayout, VerticalKnuthPlassLayout } from './src/layout/KnuthPlassLayout';\nexport { default as LazyLoader } from './src/layout/LazyLoader';\nexport { default as StickyItem } from './src/layout/StickyItem';\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 686,
    "kind": "file",
    "name": "@twist/virtual-scroller/karma.conf.js",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nconst path = require('path');\n\nprocess.env.NODE_ENV = 'test';\n\nmodule.exports = function(config) {\n    config.set({\n        webpack: require(path.join(__dirname, 'webpack.config.js')),\n\n        files: [\n            'test/IncludeAll.jsx',\n            'test/Index.jsx'\n        ],\n\n        preprocessors: {\n            '**/*.*': [ 'webpack' ],\n        },\n\n        reporters: [ 'progress', 'mocha', 'coverage' ],\n        frameworks: [ 'mocha' ],\n        browsers: [ 'Chrome' ],\n\n        coverageReporter: {\n            dir: 'testing/',\n            reporters: [\n                { type: 'html', subdir: 'coverage' },\n                { type: 'text' }\n            ],\n        },\n\n        plugins: [\n            'karma-chrome-launcher',\n            'karma-coverage',\n            'karma-firefox-launcher',\n            'karma-mocha-reporter',\n            'karma-mocha',\n            'karma-webpack',\n        ],\n\n        webpackMiddleware: {\n            stats: 'errors-only',\n            noInfo: true\n        }\n    });\n};\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/karma.conf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "name": "path",
    "memberof": "@twist/virtual-scroller/karma.conf.js",
    "static": true,
    "longname": "@twist/virtual-scroller/karma.conf.js~path",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 688,
    "kind": "function",
    "name": "exports",
    "memberof": "@twist/virtual-scroller/karma.conf.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/virtual-scroller/karma.conf.js~exports",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/karma.conf.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 689,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/decorators/InteractionManager.jsx",
    "content": "/*\n *  Copyright 2018 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport DecoratorUtils from '@twist/core/src/internal/utils/DecoratorUtils';\n\n// Supported options of @InteractionManager, with their default values\nlet DEFAULT_OPTIONS = {\n};\n\nexport default DecoratorUtils.makeClassDecorator((target, args = {}) => {\n\n    // Set the properties passed in via the @InteractionManager arguments (or use the default value)\n    Object.keys(DEFAULT_OPTIONS).forEach(key => {\n        let value = args.hasOwnProperty(key) ? args[key] : DEFAULT_OPTIONS[key];\n        target.prototype[key] = value;\n    });\n\n    // If the user passed in properties we don't recognise, emit a warning\n    Object.keys(args).forEach(key => {\n        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n            console.warn(`${key} is not a valid option for @InteractionManager - ignoring.`);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/decorators/InteractionManager.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 690,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "@twist/virtual-scroller/src/decorators/InteractionManager.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/decorators/InteractionManager.jsx~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/src/decorators/InteractionManager.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 691,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/decorators/LayoutComponent.jsx",
    "content": "/*\n *  Copyright 2018 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport DecoratorUtils from '@twist/core/src/internal/utils/DecoratorUtils';\n\n// Supported options of @LayoutComponent, with their default values\nlet DEFAULT_OPTIONS = {\n    view: null\n};\n\nexport default DecoratorUtils.makeClassDecorator((target, args = {}) => {\n\n    // Set the properties passed in via the @LayoutComponent arguments (or use the default value)\n    Object.keys(DEFAULT_OPTIONS).forEach(key => {\n        let value = args.hasOwnProperty(key) ? args[key] : DEFAULT_OPTIONS[key];\n        target.prototype[key] = value;\n        if (key === 'view') {\n            // We also store the view on the class itself, for convenience\n            target[key] = value;\n        }\n    });\n\n    // If the user passed in properties we don't recognise, emit a warning\n    Object.keys(args).forEach(key => {\n        if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n            console.warn(`${key} is not a valid option for @LayoutComponent - ignoring.`);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/decorators/LayoutComponent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 692,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "@twist/virtual-scroller/src/decorators/LayoutComponent.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/decorators/LayoutComponent.jsx~DEFAULT_OPTIONS",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/src/decorators/LayoutComponent.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"view\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 693,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nexport function inRange(value, left, right) {\n    return value >= left && value <= right;\n}\n\n/**\n * The base class of the \"model representation of an item\" within a VirtualScroll view.\n * This class stores an item's position information and data: a model of the view, but\n * not the actual view itself. An actual view (which would extend {@link BaseViewComponent}\n * - you can use the `@ViewComponent` decorator for this) would be recycled and reused as the\n * VirtualScroll view scrolls.\n */\n@VirtualComponent\nexport default class BaseLayoutComponent {\n\n    @Observable left = 0;\n    @Observable top = 0;\n\n    @Observable width = 0;\n    @Observable height = 0;\n\n    @Observable isBookmark = false;\n\n    /**\n     * Data needed to render the {@link ViewComponent}.\n     */\n    @Attribute data;\n\n    get right() {\n        return this.left + this.width;\n    }\n\n    get bottom() {\n        return this.top + this.height;\n    }\n\n    get hasChildren() {\n        return false;\n    }\n\n    /**\n     * Called each time the item is rendered. If this function returns true, VirtualScroll will track its visibility\n     * and call `stopPendingItem` when it has fallen out of view.\n     */\n    expand() {\n        return false;\n    }\n\n    /**\n     * Called when the item falls out of the rendered view, if it has been expanded (by returning true from `expand()`).\n     */\n    stopPendingItem() {\n    }\n\n    savePosition() {\n    }\n\n    /**\n     * Begin watching the specified observable attributes, triggering `setNeedsLayout()` when they change.\n     *\n     * @param {...WatchFunction } funcs A function that references an observable, for passing to `.watch()`.\n     */\n    layoutAttributes() {\n        var needsLayout = () => this.setNeedsLayout();\n        for (let i = 0, len = arguments.length; i < len; i++) {\n            this.watch(arguments[i], needsLayout);\n        }\n    }\n\n    /**\n     * Mark this view as needing layout. (This implicitly notifies the parent that its child needs layout.)\n     */\n    setNeedsLayout() {\n        // Look up the tree for the parent - we need to tell it to layout itself!\n        let parent = this._parent;\n        while (parent && !parent.setChildNeedsLayout) {\n            parent = parent._parent;\n        }\n        if (parent && !parent.childNeedsLayout) {\n            parent.setChildNeedsLayout();\n        }\n    }\n\n    componentDidMount() {\n        // Note: We can't just watch `this.children`, because this will only trigger if the array itself changes\n        // (it's kept as the same array for performance reasons).\n        this.listenTo(this, 'virtual.children', () => {\n            this.setNeedsLayout();\n\n        });\n        this.setNeedsLayout();\n    }\n\n    componentWillUnmount() {\n        this.setNeedsLayout();\n    }\n\n    /**\n     * Update the layout and position of this item.\n     * @see {@link #updateLayout}\n     */\n    layout(left, top, width, height) {\n        this.left = left;\n        this.top = top;\n\n        if (this.needsLayout(width, height)) {\n            this.updateLayout(width, height);\n        }\n    }\n\n    needsLayout(width, height) {\n        return this.width !== width || this.height !== height;\n    }\n\n    updateLayout(width, height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    updatePosition(deltaLeft, deltaTop) {\n        this.left += deltaLeft;\n        this.top += deltaTop;\n    }\n\n    inViewport(collector) {\n        return (inRange(collector.left, this.left, this.right) || inRange(this.left, collector.left, collector.right))\n            && (inRange(collector.top, this.top, this.bottom) || inRange(this.top, collector.top, collector.bottom));\n    }\n\n    /**\n     * If this item is within the viewport defined by `collector`, call `addItem(this)` on the collector.\n     * @param {*} collector\n     * @return {boolean} True if the item was added, otherwise false.\n     */\n    collect(collector) {\n        if (this.inViewport(collector)) {\n            collector.addItem(this);\n            return true;\n        }\n\n        return false;\n    }\n\n    static get type() {\n        return this.prototype.type;\n    }\n\n    toJSON() {\n        return {\n            name: this.constructor.name,\n            viewName: this.view && this.view.constructor.name,\n            left: this.left,\n            top: this.top,\n            width: this.width,\n            height: this.height,\n            children: this.children.map(c => c.toJSON())\n        };\n    }\n\n    resolveBookmark(bookmark) {\n        if (bookmark.dataItem === this.data) {\n            bookmark.item = this;\n            return true;\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 694,
    "kind": "function",
    "name": "inRange",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~inRange",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "importStyle": "{inRange}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "right",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "class",
    "name": "BaseLayoutComponent",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx",
    "importStyle": "BaseLayoutComponent",
    "description": "The base class of the \"model representation of an item\" within a VirtualScroll view.\nThis class stores an item's position information and data: a model of the view, but\nnot the actual view itself. An actual view (which would extend {@link BaseViewComponent}\n- you can use the `@ViewComponent` decorator for this) would be recycled and reused as the\nVirtualScroll view scrolls.",
    "lineNumber": 26,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false
  },
  {
    "__docId__": 696,
    "kind": "member",
    "name": "left",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#left",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "member",
    "name": "top",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#top",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#width",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#height",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "member",
    "name": "isBookmark",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#isBookmark",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "member",
    "name": "data",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#data",
    "access": "public",
    "description": "Data needed to render the {@link ViewComponent}.",
    "lineNumber": 39,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "get",
    "name": "right",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#right",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "get",
    "name": "bottom",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#bottom",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "get",
    "name": "hasChildren",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#hasChildren",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "expand",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#expand",
    "access": "public",
    "description": "Called each time the item is rendered. If this function returns true, VirtualScroll will track its visibility\nand call `stopPendingItem` when it has fallen out of view.",
    "lineNumber": 57,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "stopPendingItem",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#stopPendingItem",
    "access": "public",
    "description": "Called when the item falls out of the rendered view, if it has been expanded (by returning true from `expand()`).",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "savePosition",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#savePosition",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "layoutAttributes",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#layoutAttributes",
    "access": "public",
    "description": "Begin watching the specified observable attributes, triggering `setNeedsLayout()` when they change.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "...WatchFunction "
        ],
        "spread": true,
        "optional": false,
        "name": "funcs",
        "description": "A function that references an observable, for passing to `.watch()`."
      }
    ],
    "return": null
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "setNeedsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#setNeedsLayout",
    "access": "public",
    "description": "Mark this view as needing layout. (This implicitly notifies the parent that its child needs layout.)",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "layout",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#layout",
    "access": "public",
    "description": "Update the layout and position of this item.",
    "see": [
      "{@link #updateLayout}"
    ],
    "lineNumber": 114,
    "params": [
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "top",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "needsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#needsLayout",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "deltaLeft",
        "types": [
          "*"
        ]
      },
      {
        "name": "deltaTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "inViewport",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#inViewport",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "collector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "collect",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#collect",
    "access": "public",
    "description": "If this item is within the viewport defined by `collector`, call `addItem(this)` on the collector.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the item was added, otherwise false."
    }
  },
  {
    "__docId__": 724,
    "kind": "get",
    "name": "type",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent.type",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "toJSON",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#toJSON",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"name\": *, \"viewName\": *, \"left\": *, \"top\": *, \"width\": *, \"height\": *, \"children\": *}"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "resolveBookmark",
    "memberof": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/BaseLayoutComponent.jsx~BaseLayoutComponent#resolveBookmark",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport LayoutContainer from './LayoutContainer';\n\n/**\n * Base class for contiguous (side-by-side, non-overlapping) layout. This includes:\n *\n * * List layout (single column/row): {@link VerticalListLayout}, {@link HorizontalListLayout}\n * * Grid layout (grid of fixed-size items): {@link VerticalGridLayout}\n * * Knuth-Plass layout (grid of variable aspect ratio items): {@link VerticalKnuthPlassLayout}, {@link HorizontalKnuthPlassLayout}\n *\n * Internally, this uses a {@link PaginatedList} (to optimize the collection process).\n */\n@VirtualComponent\nexport default class ContiguousLayout extends LayoutContainer {\n\n    @Attribute margin = 0;\n\n    constructor() {\n        super();\n        this.layoutAttributes(() => this.margin);\n    }\n\n    needsLayout(width, height) {\n        return this.childNeedsLayout || (this.direction === 'horizontal' ? this.height !== height : this.width !== width);\n    }\n\n    updatePosition(deltaLeft, deltaTop) {\n        super.updatePosition(deltaLeft, deltaTop);\n        var paginatedList = this.paginatedList;\n        if (paginatedList) {\n            paginatedList.offset += this.direction === 'horizontal' ? deltaLeft : deltaTop;\n        }\n    }\n\n    collect(collector) {\n        var paginatedList = this.paginatedList;\n        if (!paginatedList) {\n            return false;\n        }\n\n        if (!this.inViewport(collector)) {\n            return false;\n        }\n\n        collector.addItem(this);\n\n        var start, end;\n        if (this.direction === 'horizontal') {\n            start = collector.left;\n            end = collector.right;\n        }\n        else {\n            start = collector.top;\n            end = collector.bottom;\n        }\n\n        paginatedList.query(start, end, (item) => item.collect(collector));\n        return true;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/ContiguousLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 728,
    "kind": "class",
    "name": "ContiguousLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/ContiguousLayout.jsx",
    "importStyle": "ContiguousLayout",
    "description": "Base class for contiguous (side-by-side, non-overlapping) layout. This includes:\n\n* List layout (single column/row): {@link VerticalListLayout}, {@link HorizontalListLayout}\n* Grid layout (grid of fixed-size items): {@link VerticalGridLayout}\n* Knuth-Plass layout (grid of variable aspect ratio items): {@link VerticalKnuthPlassLayout}, {@link HorizontalKnuthPlassLayout}\n\nInternally, this uses a {@link PaginatedList} (to optimize the collection process).",
    "lineNumber": 26,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/LayoutContainer.js~LayoutContainer"
    ]
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "margin",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout#margin",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "needsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout#needsLayout",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "deltaLeft",
        "types": [
          "*"
        ]
      },
      {
        "name": "deltaTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "collect",
    "memberof": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ContiguousLayout.jsx~ContiguousLayout#collect",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "collector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ContiguousLayout from './ContiguousLayout';\nimport PaginatedList from './internal/PaginatedList';\n\n/**\n * A layout that arranges its children into a grid. Items are placed on a row horizontally\n * with the hMargin spacing to the right of each one. If an item and its hMargin cannot fit\n * on the current row, a new row is created underneath. Each child must provide its own size\n * (e.g. by overriding `updateLayout()` and setting `this.width` and `this.height`).\n */\n@VirtualComponent\nclass GridLayout extends ContiguousLayout {\n    @Attribute hMargin;\n    @Attribute vMargin;\n\n    constructor() {\n        super();\n        this.layoutAttributes(() => this.hMargin, () => this.vMargin);\n    }\n\n    get margin() {\n        // If hMargin and vMargin are the same size, return it\n        if (this.hMargin === this.vMargin) {\n            return this.hMargin;\n        }\n        else {\n            console.warn('You cannot call this.margin without setting it explicitly.');\n            return;\n        }\n    }\n\n    set margin(margin) {\n        this.hMargin = margin;\n        this.vMargin = margin;\n    }\n\n    updateLayout(width) {\n        const list = this.paginatedList = new PaginatedList();\n\n        let top = this.top;\n        let left = this.left;\n\n        this.children.forEach((item) => {\n\n            // If adding a new item horizontally would exceed the total\n            // width then we create a new row and start over\n            if (left + item.itemWidth + this.hMargin > width) {\n                top += item.itemHeight + this.vMargin;\n                left = this.left;\n            }\n\n            item.parent = this;\n            item.layout(left, top, item.itemWidth, item.itemHeight);\n            list.add(item, item.top, item.bottom);\n\n            left += item.itemWidth + this.hMargin;\n        });\n\n        top += this.itemHeight + this.vMargin;\n\n        this.width = width;\n        this.height = Math.max(0, top - this.top);\n    }\n}\n\n// TODO: We need a horizontal (columns, flowing left->right) variant to the vertical vertical (rows, flowing top->bottom)\n@VirtualComponent\nexport class VerticalGridLayout extends GridLayout { }\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 735,
    "kind": "class",
    "name": "GridLayout",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "importStyle": null,
    "description": "A layout that arranges its children into a grid. Items are placed on a row horizontally\nwith the hMargin spacing to the right of each one. If an item and its hMargin cannot fit\non the current row, a new row is created underneath. Each child must provide its own size\n(e.g. by overriding `updateLayout()` and setting `this.width` and `this.height`).",
    "lineNumber": 24,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/ContiguousLayout.js~ContiguousLayout"
    ],
    "ignore": true
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "hMargin",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#hMargin",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "member",
    "name": "vMargin",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#vMargin",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 739,
    "kind": "get",
    "name": "margin",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#margin",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "set",
    "name": "margin",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#margin",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#width",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~GridLayout#height",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "class",
    "name": "VerticalGridLayout",
    "memberof": "@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/GridLayout.jsx~VerticalGridLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/GridLayout.jsx",
    "importStyle": "{VerticalGridLayout}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "GridLayout"
    ]
  },
  {
    "__docId__": 747,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ContiguousLayout from './ContiguousLayout';\nimport PaginatedList from './internal/PaginatedList';\nimport KnuthPlass from './internal/KnuthPlass';\n\n/**\n * A layout that arranges its children like words in a paragraph: from left to right,\n * breaking onto a new line when there isn't enough space at the end of each line.\n *\n * @see {@link https://www.ugrad.cs.ubc.ca/~cs490/2015W2/lectures/Knuth.pdf}\n */\n@VirtualComponent\nexport default class KnuthPlassLayout extends ContiguousLayout {\n\n    @Attribute size = 120;\n\n    constructor() {\n        super();\n        this.layoutAttributes(() => this.size);\n        this.knuthPlass = new KnuthPlass(this.getItemAspectRatio);\n    }\n\n    @Bind\n    getItemAspectRatio(item) {\n        return this.direction === 'horizontal' ? 1 / item.aspectRatio : item.aspectRatio;\n    }\n\n    updateLayout(width, height) {\n        var breaks, widths, heights, left, top;\n\n        var knuthPlass = this.knuthPlass;\n        var margin = this.margin;\n        var size = this.size;\n        var previousBreak = -1;\n\n        var minCellSize = size - 50;\n        var maxCellSize = size + 50;\n\n        var children = this.children;\n        var list = this.paginatedList = new PaginatedList();\n\n        if (this.direction === 'horizontal') {\n            left = this.left;\n\n            [ breaks, heights ] = knuthPlass.calculateBreaks(children, height, margin, size);\n\n            for (let i = 0, l = breaks.length; i < l; ++i) {\n                let currentBreak = breaks[i];\n                let rowHeight = heights[i];\n                let rowItems = children.slice(previousBreak + 1, currentBreak + 1);\n\n                let sum = rowItems.reduce((sum, item) => sum + 1 / item.aspectRatio, 0);\n                let rowWidth = Math.max(Math.min(Math.round(rowHeight / sum), maxCellSize), minCellSize);\n                let cellHeights = knuthPlass.calculateRowLayout(rowItems, rowHeight, height, 0, height, margin, rowWidth);\n\n                top = this.top;\n\n                rowItems.forEach((item, i) => {\n                    var cellHeight = cellHeights[i];\n                    item.parent = this;\n                    item.layout(left, top, rowWidth, cellHeight);\n                    list.add(item, item.left, item.right);\n\n                    top += cellHeight + margin;\n                });\n\n                left += rowWidth + margin;\n                previousBreak = currentBreak;\n            }\n\n            this.width = Math.max(0, left - this.left - margin);\n            this.height = height;\n        }\n        else {\n            top = this.top;\n\n            [ breaks, widths ] = knuthPlass.calculateBreaks(children, width, margin, size);\n\n            for (let i = 0, l = breaks.length; i < l; ++i) {\n                let currentBreak = breaks[i];\n                let rowWidth = widths[i];\n                let rowItems = children.slice(previousBreak + 1, currentBreak + 1);\n\n                let sum = rowItems.reduce((sum, item) => sum + item.aspectRatio, 0);\n                let rowHeight = Math.max(Math.min(Math.round(rowWidth / sum), maxCellSize), minCellSize);\n                let cellWidths = knuthPlass.calculateRowLayout(rowItems, rowWidth, width, 0, width, margin, rowHeight);\n\n                left = this.left;\n\n                rowItems.forEach((item, i) => {\n                    var cellWidth = cellWidths[i];\n                    item.parent = this;\n                    item.layout(left, top, cellWidth, rowHeight);\n                    list.add(item, item.top, item.bottom);\n\n                    left += cellWidth + margin;\n                });\n\n                top += rowHeight + margin;\n                previousBreak = currentBreak;\n            }\n\n            this.width = width;\n            this.height = Math.max(0, top - this.top - margin);\n        }\n\n        super.updateLayout(width, height);\n    }\n\n}\n\n@Prototype({ direction: 'horizontal' })\nexport class HorizontalKnuthPlassLayout extends KnuthPlassLayout { }\n\n@Prototype({ direction: 'vertical' })\nexport class VerticalKnuthPlassLayout extends KnuthPlassLayout { }\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 748,
    "kind": "class",
    "name": "KnuthPlassLayout",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "importStyle": "KnuthPlassLayout",
    "description": "A layout that arranges its children like words in a paragraph: from left to right,\nbreaking onto a new line when there isn't enough space at the end of each line.",
    "see": [
      "{@link https://www.ugrad.cs.ubc.ca/~cs490/2015W2/lectures/Knuth.pdf}"
    ],
    "lineNumber": 25,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/ContiguousLayout.js~ContiguousLayout"
    ]
  },
  {
    "__docId__": 749,
    "kind": "member",
    "name": "size",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#size",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 750,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 751,
    "kind": "member",
    "name": "knuthPlass",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#knuthPlass",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "getItemAspectRatio",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#getItemAspectRatio",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "decorators": [
      {
        "name": "Bind",
        "arguments": null
      }
    ],
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#width",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~KnuthPlassLayout#height",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "class",
    "name": "HorizontalKnuthPlassLayout",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~HorizontalKnuthPlassLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "importStyle": "{HorizontalKnuthPlassLayout}",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  direction: 'horizontal'\n})"
      }
    ],
    "interface": false,
    "extends": [
      "KnuthPlassLayout"
    ]
  },
  {
    "__docId__": 759,
    "kind": "class",
    "name": "VerticalKnuthPlassLayout",
    "memberof": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx~VerticalKnuthPlassLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/KnuthPlassLayout.jsx",
    "importStyle": "{VerticalKnuthPlassLayout}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  direction: 'vertical'\n})"
      }
    ],
    "interface": false,
    "extends": [
      "KnuthPlassLayout"
    ]
  },
  {
    "__docId__": 760,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport BaseLayoutComponent from './BaseLayoutComponent';\n\n/**\n * An item that contains children. Parent items are responsible for passing layout and position\n * to their children as needed. This class is fairly low-level; if you're just implementing a\n * VirtualScroll view, you'll want to use a higher-level layout component, like {@link VerticalListLayout}\n */\n@VirtualComponent\nexport default class LayoutContainer extends BaseLayoutComponent {\n\n    setChildNeedsLayout() {\n        this.childNeedsLayout = true;\n        this.setNeedsLayout();\n    }\n\n    layoutAttributes() {\n        var needsLayout = () => this.setChildNeedsLayout();\n        for (let i = 0, len = arguments.length; i < len; i++) {\n            this.watch(arguments[i], needsLayout);\n        }\n    }\n\n    willInsertBefore(child, before) {\n        super.willInsertBefore(child, before);\n        // Make sure that a child will notify the layout change on the parents.\n        this.setChildNeedsLayout();\n    }\n\n    layout(left, top, width, height) {\n        var needsLayout = this.needsLayout(width, height);\n        if (needsLayout) {\n            this.left = left;\n            this.top = top;\n            this.updateLayout(width, height);\n            return;\n        }\n\n        var deltaLeft = left - this.left;\n        var deltaTop = top - this.top;\n        if (deltaLeft || deltaTop) {\n            this.updatePosition(deltaLeft, deltaTop);\n        }\n    }\n\n    updatePosition(deltaLeft, deltaTop) {\n        super.updatePosition(deltaLeft, deltaTop);\n        this.children.forEach((item) => item.updatePosition(deltaLeft, deltaTop));\n    }\n\n    needsLayout(width, height) {\n        return this.childNeedsLayout || super.needsLayout(width, height);\n    }\n\n    updateLayout() {\n        this.childNeedsLayout = false;\n    }\n\n    collect(collector) {\n        if (!this.inViewport(collector)) {\n            return false;\n        }\n\n        collector.addItem(this);\n        this.children.forEach((item) => item.collect(collector));\n        return true;\n    }\n\n    resolveBookmark(bookmark) {\n        if (super.resolveBookmark(bookmark)) {\n            return true;\n        }\n        return this.children.some((item) => item.resolveBookmark(bookmark));\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/LayoutContainer.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 761,
    "kind": "class",
    "name": "LayoutContainer",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/LayoutContainer.jsx",
    "importStyle": "LayoutContainer",
    "description": "An item that contains children. Parent items are responsible for passing layout and position\nto their children as needed. This class is fairly low-level; if you're just implementing a\nVirtualScroll view, you'll want to use a higher-level layout component, like {@link VerticalListLayout}",
    "lineNumber": 22,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/BaseLayoutComponent.js~BaseLayoutComponent"
    ]
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "setChildNeedsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#setChildNeedsLayout",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "childNeedsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#childNeedsLayout",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "layoutAttributes",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#layoutAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "willInsertBefore",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#willInsertBefore",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "child",
        "types": [
          "*"
        ]
      },
      {
        "name": "before",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "layout",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#layout",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "left",
        "types": [
          "*"
        ]
      },
      {
        "name": "top",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "left",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#left",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "top",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#top",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "deltaLeft",
        "types": [
          "*"
        ]
      },
      {
        "name": "deltaTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "needsLayout",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#needsLayout",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "collect",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#collect",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "collector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "resolveBookmark",
    "memberof": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/LayoutContainer.jsx~LayoutContainer#resolveBookmark",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "bookmark",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport ContiguousLayout from './ContiguousLayout';\nimport PaginatedList from './internal/PaginatedList';\n\n/**\n * A layout that arranges its children into a simple list, either vertically or horizontally.\n * Each child must provide its own size (e.g. by overriding `updateLayout()` and setting\n * `this.width` and `this.height`). It may also contain \"sticky\" items, which act like section\n * headings and \"hook\" themselves to the top of the view when they reach the top.\n */\n@VirtualComponent\nclass ListLayout extends ContiguousLayout {\n\n    updateLayout(width, height) {\n        var margin = this.margin, start, left, top;\n\n        var list = this.paginatedList = new PaginatedList();\n        var stickyList = this.stickyList = new PaginatedList();\n        var pendingSticky = null;\n\n        if (this.direction === 'horizontal') {\n            top = this.top;\n            start = this.left;\n            this.children.forEach((item) => {\n                item.parent = this;\n\n                item.layout(start, top, width, height);\n                start += item.width + margin;\n\n                if (item.sticky) {\n                    if (pendingSticky) {\n                        stickyList.add(pendingSticky, pendingSticky.left, item.left);\n                    }\n                    pendingSticky = item;\n                }\n                else {\n                    list.add(item, item.left, item.left + item.width);\n                }\n            });\n\n            this.width = Math.max(0, start - this.left - margin);\n            this.height = height;\n\n            if (pendingSticky) {\n                stickyList.add(pendingSticky, pendingSticky.left, this.left + this.width);\n            }\n        }\n        else {\n            left = this.left;\n            start = this.top;\n            this.children.forEach((item) => {\n                item.parent = this;\n\n                item.layout(left, start, width, height);\n                start += item.height + margin;\n\n                if (item.sticky) {\n                    if (pendingSticky) {\n                        stickyList.add(pendingSticky, pendingSticky.top, item.top);\n                    }\n                    pendingSticky = item;\n                }\n                else {\n                    list.add(item, item.top, item.top + item.height);\n                }\n            });\n\n            this.width = width;\n            this.height = Math.max(0, start - this.top - margin);\n\n            if (pendingSticky) {\n                stickyList.add(pendingSticky, pendingSticky.top, this.top + this.height);\n            }\n        }\n\n        super.updateLayout(width, height);\n    }\n\n    updatePosition(deltaLeft, deltaTop) {\n        super.updatePosition(deltaLeft, deltaTop);\n        var stickyList = this.stickyList;\n        if (stickyList) {\n            stickyList.offset += this.direction === 'horizontal' ? deltaLeft : deltaTop;\n        }\n    }\n\n    collect(collector) {\n        if (!super.collect(collector)) {\n            return false;\n        }\n\n        var stickyList = this.stickyList;\n        if (!stickyList) {\n            return true;\n        }\n\n        var start, end;\n        if (this.direction === 'horizontal') {\n            start = collector.left;\n            end = collector.right;\n        }\n        else {\n            start = collector.top;\n            end = collector.bottom;\n        }\n\n        var visibleSticky = this.visibleSticky = [];\n\n        stickyList.query(start, end, (item) => {\n            collector.addItem(item);\n            visibleSticky.push(item);\n        });\n\n        if (visibleSticky.length) {\n            collector.addStickyContainer(this);\n        }\n\n\n        return true;\n    }\n\n    updateSticky(view) {\n        var visibleSticky = this.visibleSticky;\n        if (!visibleSticky) {\n            return;\n        }\n\n        var stickyLeft, stickyTop, item, fixed, stickyRight, stickyBottom;\n\n        var i = visibleSticky.length - 1;\n        var margin = this.margin;\n\n        if (this.direction === 'horizontal') {\n            stickyTop = this.top;\n\n            stickyLeft = Math.max(view.left, this.left);\n            stickyRight = Math.min(view.right, this.right);\n\n            for (; i >= 0; --i) {\n                item = visibleSticky[i];\n                fixed = item.fixed = item.left < stickyLeft;\n                if (fixed) {\n                    item.fixedLeft = Math.min(stickyRight - item.width, stickyLeft);\n                    item.fixedTop = stickyTop;\n                    stickyLeft -= item.width;\n                }\n\n                // Make sure we never overlap.\n                stickyRight = Math.min(stickyRight, item.left - margin);\n            }\n        }\n        else {\n            stickyLeft = this.left;\n\n            stickyTop = Math.max(view.top, this.top);\n            stickyBottom = Math.min(view.bottom, this.bottom);\n\n            for (; i >= 0; --i) {\n                item = visibleSticky[i];\n                fixed = item.fixed = item.top < stickyTop;\n                if (fixed) {\n                    item.fixedLeft = stickyLeft;\n                    item.fixedTop = Math.min(stickyBottom - item.height, stickyTop);\n                    stickyTop -= item.height;\n                }\n\n                // Make sure we never overlap.\n                stickyBottom = Math.min(stickyBottom, item.top - margin);\n            }\n        }\n    }\n\n}\n\n@Prototype({ direction: 'horizontal' })\n@VirtualComponent\nexport class HorizontalListLayout extends ListLayout { }\n\n@Prototype({ direction: 'vertical' })\n@VirtualComponent\nexport class VerticalListLayout extends ListLayout { }\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 776,
    "kind": "class",
    "name": "ListLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "access": "public",
    "export": false,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "importStyle": null,
    "description": "A layout that arranges its children into a simple list, either vertically or horizontally.\nEach child must provide its own size (e.g. by overriding `updateLayout()` and setting\n`this.width` and `this.height`). It may also contain \"sticky\" items, which act like section\nheadings and \"hook\" themselves to the top of the view when they reach the top.",
    "lineNumber": 24,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/ContiguousLayout.js~ContiguousLayout"
    ],
    "ignore": true
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#width",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#height",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "deltaLeft",
        "types": [
          "*"
        ]
      },
      {
        "name": "deltaTop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "collect",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#collect",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "collector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "updateSticky",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~ListLayout#updateSticky",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "view",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 785,
    "kind": "class",
    "name": "HorizontalListLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~HorizontalListLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "importStyle": "{HorizontalListLayout}",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  direction: 'horizontal'\n})"
      },
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "ListLayout"
    ]
  },
  {
    "__docId__": 786,
    "kind": "class",
    "name": "VerticalListLayout",
    "memberof": "@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/ListLayout.jsx~VerticalListLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/ListLayout.jsx",
    "importStyle": "{VerticalListLayout}",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  direction: 'vertical'\n})"
      },
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "ListLayout"
    ]
  },
  {
    "__docId__": 787,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport LayoutContainer from './LayoutContainer';\n\n/**\n * A layout that positions its children on top of each another, completely covering its area.\n */\n@VirtualComponent\nexport default class OverlappingLayout extends LayoutContainer {\n\n    updateLayout(width, height) {\n        this.width = 0;\n        this.height = 0;\n        this.children.forEach((item) => {\n            item.parent = this;\n            item.layout(this.left, this.top, width, height);\n            this.width = Math.max(this.width, item.width);\n            this.height = Math.max(this.height, item.height);\n        });\n\n        super.updateLayout(width, height);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/OverlappingLayout.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 788,
    "kind": "class",
    "name": "OverlappingLayout",
    "memberof": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/OverlappingLayout.jsx",
    "importStyle": "OverlappingLayout",
    "description": "A layout that positions its children on top of each another, completely covering its area.",
    "lineNumber": 20,
    "decorators": [
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/LayoutContainer.js~LayoutContainer"
    ]
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 790,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout#width",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/OverlappingLayout.jsx~OverlappingLayout#height",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/layout/StickyItem.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport BaseLayoutComponent from './BaseLayoutComponent';\n\n/**\n * An item that \"sticks\" itself to the top of the viewport when it reaches the top.\n */\n@Prototype({ sticky: true })\n@VirtualComponent\nexport default class StickyItem extends BaseLayoutComponent {\n\n    @Observable fixed = false;\n    @Observable fixedLeft = 0;\n    @Observable fixedTop = 0;\n\n    @Attribute stickyWidth = -1;\n    @Attribute stickyHeight = -1;\n\n    constructor() {\n        super();\n        this.layoutAttributes(() => this.stickyWidth, () => this.stickyHeight);\n    }\n\n    updateLayout(width, height) {\n        var stickyWidth = this.stickyWidth;\n        var stickyHeight = this.stickyHeight;\n        this.width = stickyWidth === -1 ? width : stickyWidth;\n        this.height = stickyHeight === -1 ? height : stickyHeight;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/layout/StickyItem.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 795,
    "kind": "class",
    "name": "StickyItem",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/layout/StickyItem.jsx",
    "importStyle": "StickyItem",
    "description": "An item that \"sticks\" itself to the top of the viewport when it reaches the top.",
    "lineNumber": 21,
    "decorators": [
      {
        "name": "Prototype",
        "arguments": "({\n  sticky: true\n})"
      },
      {
        "name": "VirtualComponent",
        "arguments": null
      }
    ],
    "interface": false,
    "extends": [
      "@twist/virtual-scroller/src/layout/BaseLayoutComponent.js~BaseLayoutComponent"
    ]
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "fixed",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#fixed",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "member",
    "name": "fixedLeft",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#fixedLeft",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "member",
    "name": "fixedTop",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#fixedTop",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "member",
    "name": "stickyWidth",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#stickyWidth",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "member",
    "name": "stickyHeight",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#stickyHeight",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "decorators": [
      {
        "name": "Attribute",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "updateLayout",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#updateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 803,
    "kind": "member",
    "name": "width",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#width",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 804,
    "kind": "member",
    "name": "height",
    "memberof": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem",
    "static": false,
    "longname": "@twist/virtual-scroller/src/layout/StickyItem.jsx~StickyItem#height",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 805,
    "kind": "file",
    "name": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\nimport { SignalDispatcher } from '@twist/core';\nimport TouchMapper from './internal/interaction/TouchMapper';\n\n/**\n * An Interaction lets you manage mouse/touch interactions on the virtual scroller\n * Subclasses should implement methods corresponding to drag events\n *\n * * start() - a drag event starts\n * * update() - a drag event updates\n * * end() - a drag event ends\n * * click() - a click event happens\n */\nexport default class BaseInteractionManager extends SignalDispatcher {\n\n    @Observable active = false;\n\n    /**\n     * Called by the touch mapper to initialize the interaction (so it knows to call it when events happpen)\n     * @private\n     */\n    _init(mapper = TouchMapper.instance) {\n        this.mapper = mapper;\n        mapper.pushInteraction(this);\n        this.link(() => this.mapper.removeInteraction(this));\n    }\n\n    get touches() {\n        return this.mapper.touchManager.touches;\n    }\n\n    get state() {\n        return this.mapper.state;\n    }\n\n    get eventState() {\n        return this.mapper.state.eventState;\n    }\n\n    get waitTime() {\n        return this.mapper.waitTime;\n    }\n\n    wait(milliseconds) {\n        this.mapper.wait(milliseconds);\n    }\n}\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 806,
    "kind": "class",
    "name": "BaseInteractionManager",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx",
    "static": true,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "access": "public",
    "export": true,
    "importPath": "twist-site/@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx",
    "importStyle": "BaseInteractionManager",
    "description": "An Interaction lets you manage mouse/touch interactions on the virtual scroller\nSubclasses should implement methods corresponding to drag events\n\n* start() - a drag event starts\n* update() - a drag event updates\n* end() - a drag event ends\n* click() - a click event happens",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "@twist/core~SignalDispatcher"
    ]
  },
  {
    "__docId__": 807,
    "kind": "member",
    "name": "active",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#active",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "decorators": [
      {
        "name": "Observable",
        "arguments": null
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "_init",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#_init",
    "access": "private",
    "description": "Called by the touch mapper to initialize the interaction (so it knows to call it when events happpen)",
    "lineNumber": 34,
    "ignore": true,
    "params": [
      {
        "name": "mapper",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 809,
    "kind": "member",
    "name": "mapper",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#mapper",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 810,
    "kind": "get",
    "name": "touches",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#touches",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 811,
    "kind": "get",
    "name": "state",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#state",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "get",
    "name": "eventState",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#eventState",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "get",
    "name": "waitTime",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#waitTime",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "wait",
    "memberof": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "@twist/virtual-scroller/src/ui/BaseInteractionManager.jsx~BaseInteractionManager#wait",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "milliseconds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Twist Site\n\nThis is the repository for the React Twist documentation website.\n\n> **NOTE**: Do not try to submit PRs to this repository for changes to Twist documentation. Update the documentation in the appropriate repositories, and when this site is next built, those changes will be included.\n\n## Configuring\n\n```bash\nnpm install\nnpm run site:install\n```\n\n## Building Site\n\n```bash\nnpm docs:munge\nnpm site:build\n```\n\n## Building ESDoc Section\n\n```bash\nnpm esdoc:build\n```\n",
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"twist-site\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Website hosting Twist information and docs\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"esdoc:build\": \"esdoc\",\n    \"docs:munge\": \"node ./build.js\",\n    \"site:install\": \"gitbook install site\",\n    \"site:build\": \"gitbook build site\",\n    \"site:serve\": \"gitbook serve site\",\n    \"ghpages:deploy\": \"gh-pages -d site/_book\",\n    \"build\": \"npm run site:install && npm run docs:munge && npm run site:build && npm run esdoc:build\",\n    \"update\": \"rimraf node_modules/@twist && npm install && npm run build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/adobe/twist-site.git\"\n  },\n  \"keywords\": [\n    \"Twist\",\n    \"React\",\n    \"State\",\n    \"management\",\n    \"Reactive\",\n    \"Declarative\"\n  ],\n  \"author\": \"Adobe Systems Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/adobe/twist-site/issues\"\n  },\n  \"homepage\": \"https://github.com/adobe/twist-site#readme\",\n  \"devDependencies\": {\n    \"@twist/babel-plugin-transform\": \"adobe/babel-plugin-transform-twist\",\n    \"@twist/babel-plugin-transform-react\": \"adobe/babel-plugin-transform-react-twist\",\n    \"@twist/configuration\": \"adobe/twist-configuration\",\n    \"@twist/core\": \"adobe/twist\",\n    \"@twist/eslint-plugin-core\": \"adobe/eslint-plugin-twist\",\n    \"@twist/react\": \"adobe/react-twist\",\n    \"@twist/react-webpack-plugin\": \"adobe/react-twist-webpack-plugin\",\n    \"@twist/router\": \"adobe/twist-router\",\n    \"@twist/virtual-scroller\": \"adobe/twist-virtual-scroller\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-publish-markdown-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"gh-pages\": \"^1.1.0\",\n    \"gitbook-cli\": \"^2.3.2\",\n    \"rimraf\": \"^2.6.2\",\n    \"shelljs\": \"^0.8.1\"\n  },\n  \"dependencies\": {}\n}\n",
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 815,
    "kind": "testFile",
    "name": "@twist/core/test/BinderTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { Binder, TaskQueue } from '@twist/core';\nimport assert from 'assert';\nimport sinon from 'sinon';\n\ndescribe('Bindings.Binder', () => {\n\n    it('detect property change - bind to function', () => {\n        class X {\n            @Observable data;\n        }\n        let x = new X;\n        x.data = 'first value';\n\n        let callback = sinon.spy();\n        new Binder(() => x.data, callback);\n\n        assert.equal(callback.callCount, 1, 'The binder callback should trigger.');\n        assert.equal(callback.getCall(0).args[0], 'first value');\n\n        x.data = 'second value';\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2, 'The binder callback should trigger a second time after we push a new item.');\n        assert.equal(callback.getCall(1).args[0], 'second value');\n    });\n\n    it('detect property change - should not trigger if expression value unchanged', () => {\n        class X {\n            @Observable num;\n            @Observable denom;\n        }\n        let x = new X;\n        x.num = 2;\n        x.denom = 4;\n\n        let callback = sinon.spy();\n        new Binder(() => x.num / x.denom, callback);\n\n        assert.equal(callback.callCount, 1, 'The binder callback should trigger.');\n        assert.equal(callback.getCall(0).args[0], 0.5);\n\n        x.num = 2;\n        x.denom = undefined;\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2, 'The binder callback should trigger a second time after we modify the value.');\n        let arg = callback.getCall(1).args[0];\n        assert(isNaN(arg) && arg !== arg, 'should be a NaN');\n\n        x.num = 3;\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2, 'The binder should not trigger, since it is still a NaN.');\n    });\n\n    it('detect property change - bind to getter/setter', () => {\n        class X {\n            @Observable data;\n        }\n        let x = new X;\n        x.data = 'first value';\n\n        let callback = sinon.spy();\n        new Binder({\n            get() {\n                return x.data;\n            },\n            set(v) {\n                x.data = v;\n            }\n        }, callback);\n\n        assert.equal(callback.callCount, 1, 'The binder callback should trigger.');\n        assert.equal(callback.getCall(0).args[0], 'first value');\n\n        x.data = 'second value';\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2, 'The binder callback should trigger a second time after we push a new item.');\n        assert.equal(callback.getCall(1).args[0], 'second value');\n    });\n\n    it('detect property change - without first run', () => {\n        class X {\n            @Observable data;\n        }\n\n        let x = new X;\n        x.data = 'first value';\n\n        let callback = sinon.spy();\n        new Binder(() => x.data, callback, true);\n\n        assert.equal(callback.callCount, 0, 'The binder callback should not trigger the first time.');\n\n        x.data = 'second value';\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 1, 'The binder callback should trigger the first time time after we push a new item.');\n        assert.equal(callback.getCall(0).args[0], 'second value');\n    });\n\n    it('previous bindings should be disposed when a value changes', () => {\n        let unobservable = 1;\n\n        class X {\n            @Observable condition = true;\n            @Observable value1 = 'true';\n            @Observable value2 = 'false';\n        }\n        let x = new X;\n\n        let callback = sinon.spy();\n        new Binder(() => x.condition ? x.value1 : (x.value2 + unobservable), callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 'true');\n\n        x.condition = false;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 'false1');\n\n        x.value1 = 'very true';\n        unobservable = 2;\n        TaskQueue.run();\n\n        // Since we only changed an observable in the if-clause, and an unobservable value,\n        // this should NOT cause the watch to trigger. If it does, that indicates the previous\n        // binders not being removed.\n        assert.equal(callback.callCount, 2);\n    });\n\n    it('previous bindings should be disposed when a value changes', () => {\n        let unobservable = 1;\n\n        class X {\n            @Observable condition = true;\n            @Observable value1 = 'true';\n            @Observable value2 = 'false';\n        }\n        let x = new X;\n\n        let callback = sinon.spy();\n        new Binder(() => x.condition ? x.value1 : (x.value2 + unobservable), callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 'true');\n\n        x.condition = false;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 'false1');\n\n        x.value1 = 'very true';\n        unobservable = 2;\n        TaskQueue.run();\n\n        // Since we only changed an observable in the if-clause, and an unobservable value,\n        // this should NOT cause the watch to trigger. If it does, that indicates the previous\n        // binders not being removed.\n        assert.equal(callback.callCount, 2);\n    });\n\n    it('binding to a promise - external to watch', () => {\n\n        let resolver;\n        let p = new Promise(resolve => resolver = resolve);\n\n        let callback = sinon.spy();\n        new Binder(() => p, callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], undefined);\n\n        resolver(10);\n        TaskQueue.run();\n\n        // TODO: Binding to promise doesn't work right now - expect it to resolve\n        assert.equal(callback.callCount, 1);\n        // assert.equal(callback.getCall(1).args[0], 10);\n    });\n\n    it('binding to a promise - constructed inside watch', () => {\n\n        let callback = sinon.spy();\n        new Binder(() => Promise.resolve(10), callback);\n\n        // TODO: Binding to promise doesn't work right now - expect it to resolve\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], undefined);\n    });\n\n    it('mutation within a binder', () => {\n        class X {\n            @Observable value = 0;\n        }\n        let x = new X;\n\n        let callback = sinon.spy();\n        new Binder(() => x.value++, callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 0);\n        assert.equal(x.value, 1);\n\n        // Should not continue to update value\n        TaskQueue.run();\n        assert.equal(callback.callCount, 1);\n        assert.equal(x.value, 1);\n\n        x.value = 10;\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 10);\n        assert.equal(x.value, 11);\n\n        // Should not continue to update value\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2);\n        assert.equal(x.value, 11);\n    });\n\n    it('mutation within a binder - no invalidate', () => {\n        class X {\n            @Observable value = 0;\n        }\n        let x = new X;\n\n        let callback = sinon.spy();\n        new Binder(() => x.value++, callback, false, null);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 0);\n        assert.equal(x.value, 1);\n\n        // Should not continue to update value\n        TaskQueue.run();\n        assert.equal(callback.callCount, 1);\n        assert.equal(x.value, 1);\n\n        x.value = 10;\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 10);\n        assert.equal(x.value, 11);\n\n        // Should not continue to update value\n        TaskQueue.run();\n        assert.equal(callback.callCount, 2);\n        assert.equal(x.value, 11);\n    });\n\n    it('binder without callback should not crash', () => {\n        class X {\n            @Observable data;\n        }\n        let x = new X;\n\n        new Binder();\n        new Binder(() => x.data);\n        new Binder(() => x.data, null);\n\n        x.data = 'second value';\n        TaskQueue.run();\n        // No crash\n    });\n\n    it('cannot pop with no mutators', () => {\n        sinon.spy(console, 'error');\n\n        Binder.popMutator();\n        assert.equal(console.error.getCall(0).args[0], 'Trying to pop a mutator that is not in the top of the stack');\n\n        let mutator = {};\n        Binder.pushMutator(mutator);\n        Binder.popMutator({});\n        assert.equal(console.error.getCall(1).args[0], 'Trying to pop a mutator that is not in the top of the stack');\n\n        Binder.popMutator(mutator);\n        assert.equal(console.error.callCount, 2);\n        console.error.restore();\n    });\n\n    it('can push and pop mutators', () => {\n        class X {\n            @Observable data = 'first';\n        }\n        let x = new X;\n\n        let mutator1 = {\n            record: sinon.spy()\n        };\n\n        let mutator2 = {\n            record: sinon.spy()\n        };\n\n        Binder.pushMutator(mutator1);\n\n        x.data = 'second';\n        assert.equal(mutator1.record.callCount, 1);\n        assert.equal(mutator1.record.getCall(0).args[0], x);\n        assert.equal(mutator1.record.getCall(0).args[1], 'data');\n        assert.equal(mutator1.record.getCall(0).args[2], 'second');\n        assert.equal(mutator1.record.getCall(0).args[3], 'first');\n\n        Binder.pushMutator(mutator2);\n        x.data = 'third';\n        assert.equal(mutator1.record.callCount, 1);\n        assert.equal(mutator2.record.callCount, 1);\n        assert.equal(mutator2.record.getCall(0).args[0], x);\n        assert.equal(mutator2.record.getCall(0).args[1], 'data');\n        assert.equal(mutator2.record.getCall(0).args[2], 'third');\n        assert.equal(mutator2.record.getCall(0).args[3], 'second');\n\n        Binder.popMutator(mutator2);\n        x.data = 'fourth';\n        assert.equal(mutator2.record.callCount, 1);\n        assert.equal(mutator1.record.callCount, 2);\n        assert.equal(mutator1.record.getCall(1).args[0], x);\n        assert.equal(mutator1.record.getCall(1).args[1], 'data');\n        assert.equal(mutator1.record.getCall(1).args[2], 'fourth');\n        assert.equal(mutator1.record.getCall(1).args[3], 'third');\n\n        Binder.popMutator(mutator1);\n        x.data = 'fifth';\n        assert.equal(mutator2.record.callCount, 1);\n        assert.equal(mutator1.record.callCount, 2);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/BinderTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 816,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "@twist/core/test/BinderTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0",
    "access": null,
    "description": "Bindings.Binder",
    "lineNumber": 20
  },
  {
    "__docId__": 817,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it1",
    "access": null,
    "description": "detect property change - bind to function",
    "lineNumber": 22
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it2",
    "access": null,
    "description": "detect property change - should not trigger if expression value unchanged",
    "lineNumber": 42
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it3",
    "access": null,
    "description": "detect property change - bind to getter/setter",
    "lineNumber": 69
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it4",
    "access": null,
    "description": "detect property change - without first run",
    "lineNumber": 96
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it5",
    "access": null,
    "description": "previous bindings should be disposed when a value changes",
    "lineNumber": 116
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it6",
    "access": null,
    "description": "previous bindings should be disposed when a value changes",
    "lineNumber": 148
  },
  {
    "__docId__": 823,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it7",
    "access": null,
    "description": "binding to a promise - external to watch",
    "lineNumber": 180
  },
  {
    "__docId__": 824,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it8",
    "access": null,
    "description": "binding to a promise - constructed inside watch",
    "lineNumber": 199
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it9",
    "access": null,
    "description": "mutation within a binder",
    "lineNumber": 209
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it10",
    "access": null,
    "description": "mutation within a binder - no invalidate",
    "lineNumber": 239
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it11",
    "access": null,
    "description": "binder without callback should not crash",
    "lineNumber": 269
  },
  {
    "__docId__": 828,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it12",
    "access": null,
    "description": "cannot pop with no mutators",
    "lineNumber": 284
  },
  {
    "__docId__": 829,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "@twist/core/test/BinderTest.jsx~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/BinderTest.jsx~describe0.it13",
    "access": null,
    "description": "can push and pop mutators",
    "lineNumber": 300
  },
  {
    "__docId__": 830,
    "kind": "testFile",
    "name": "@twist/core/test/CollectionBinderTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { CollectionBinder, TaskQueue, ObservableArray, ObservableSet, ObservableMap } from '@twist/core';\nimport assert from 'assert';\n\ndescribe('Bindings.CollectionBinder', () => {\n\n    it('detect ObservableArray length change', () => {\n        let array = new ObservableArray;\n\n        let signaled = 0;\n\n        new CollectionBinder(() => array, (array) => {\n            assert.ok(array instanceof Array, 'The computed array should be a regular array.');\n            ++signaled;\n        });\n\n        assert.equal(signaled, 1, 'The binder callback should trigger.');\n\n        array.push('new item');\n        TaskQueue.run();\n\n        assert.equal(signaled, 2, 'The binder callback should trigger a second time after we push a new item.');\n\n    });\n\n    it('detect ObservableSet length change', () => {\n        let set = new ObservableSet;\n\n        let signaled = 0;\n\n        new CollectionBinder(() => set, (set) => {\n            assert.ok(set instanceof Set, 'The computed set should be a regular set.');\n            ++signaled;\n        });\n\n        assert.equal(signaled, 1, 'The binder callback should trigger.');\n\n        set.add('new item');\n        set.add('another item');\n        TaskQueue.run();\n\n        assert.equal(signaled, 2, 'The binder callback should trigger a second time after we add a new item.');\n\n        set.delete('new item');\n        TaskQueue.run();\n\n        assert.equal(signaled, 3, 'The binder callback should trigger a third time after we delete the new item.');\n\n        set.clear();\n        TaskQueue.run();\n\n        assert.equal(signaled, 4, 'The binder callback should trigger a fourth time after we clear the set.');\n    });\n\n    it('detect ObservableMap length change', () => {\n        let map = new ObservableMap;\n\n        let signaled = 0;\n\n        new CollectionBinder(() => map, (map) => {\n            assert.ok(map instanceof Map, 'The computed map should be a regular map.');\n            ++signaled;\n        });\n\n        assert.equal(signaled, 1, 'The binder callback should trigger.');\n\n        map.set('key', 'new item');\n        map.set('otherkey', 'another item');\n        TaskQueue.run();\n\n        assert.equal(signaled, 2, 'The binder callback should trigger a second time after we set a new item.');\n\n        map.set('otherkey', 'another item');\n        TaskQueue.run();\n\n        assert.equal(signaled, 2, 'The binder callback should NOT trigger on setting an item to its stored value.');\n\n        map.delete('otherkey');\n        TaskQueue.run();\n\n        assert.equal(signaled, 3, 'The binder callback should trigger a third time after we delete the new item.');\n\n        map.clear();\n        TaskQueue.run();\n\n        assert.equal(signaled, 4, 'The binder callback should trigger a fourth time after we clear the map.');\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/CollectionBinderTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 831,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "@twist/core/test/CollectionBinderTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/CollectionBinderTest.jsx~describe14",
    "access": null,
    "description": "Bindings.CollectionBinder",
    "lineNumber": 19
  },
  {
    "__docId__": 832,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "@twist/core/test/CollectionBinderTest.jsx~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/CollectionBinderTest.jsx~describe14.it15",
    "access": null,
    "description": "detect ObservableArray length change",
    "lineNumber": 21
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "@twist/core/test/CollectionBinderTest.jsx~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/CollectionBinderTest.jsx~describe14.it16",
    "access": null,
    "description": "detect ObservableSet length change",
    "lineNumber": 40
  },
  {
    "__docId__": 834,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "@twist/core/test/CollectionBinderTest.jsx~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/CollectionBinderTest.jsx~describe14.it17",
    "access": null,
    "description": "detect ObservableMap length change",
    "lineNumber": 69
  },
  {
    "__docId__": 835,
    "kind": "testFile",
    "name": "@twist/core/test/DisposableTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { Disposable } from '@twist/core';\nimport assert from 'assert';\nimport sinon from 'sinon';\n\ndescribe('Utils.Disposable', () => {\n\n    it('disposes children', () => {\n        let parent = new Disposable();\n        let child = new Disposable();\n        parent.link(child);\n\n        let spy = sinon.spy(child, 'dispose');\n        parent.dispose();\n        assert(spy.calledOnce, 'child dispose should be called');\n    });\n\n    it('unlink', () => {\n        let parent = new Disposable();\n        let child = new Disposable();\n        parent.link(child);\n        parent.unlink(child);\n        let spy = sinon.spy(child, 'dispose');\n        parent.dispose();\n        assert(spy.notCalled, 'child dispose should not be called');\n    });\n\n    it('unlink when no disposables exist (should not throw)', () => {\n        let parent = new Disposable();\n        parent.unlink(null);\n        parent.unlink(new Disposable());\n    });\n\n    it('set disposables, but then try to unlink a non-child', () => {\n        let parent = new Disposable();\n        parent.link(new Disposable());\n        parent.unlink(new Disposable());\n    });\n\n    it('disposes a function', () => {\n        let parent = new Disposable();\n        let childFn = sinon.spy();\n        parent.link(childFn);\n        parent.disposeLink(childFn);\n        assert(childFn.calledOnce, 'child disposed should be called');\n    });\n\n    it('disposeLink', () => {\n        let parent = new Disposable();\n        let child = new Disposable();\n        parent.link(child);\n        let spy = sinon.spy(child, 'dispose');\n        parent.disposeLink(child);\n        assert(spy.calledOnce, 'child dispose should be called');\n    });\n\n    it('tree of disposables', () => {\n        let grandparent = new Disposable();\n        let parent = new Disposable();\n        let child = new Disposable();\n        grandparent.link(parent);\n        parent.link(child);\n\n        let parentSpy = sinon.spy(parent, 'dispose');\n        let childSpy = sinon.spy(child, 'dispose');\n        grandparent.dispose();\n        assert(parentSpy.calledOnce, 'parent dispose should be called');\n        assert(childSpy.calledOnce, 'child dispose should be called');\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/DisposableTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "@twist/core/test/DisposableTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18",
    "access": null,
    "description": "Utils.Disposable",
    "lineNumber": 20
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it19",
    "access": null,
    "description": "disposes children",
    "lineNumber": 22
  },
  {
    "__docId__": 838,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it20",
    "access": null,
    "description": "unlink",
    "lineNumber": 32
  },
  {
    "__docId__": 839,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it21",
    "access": null,
    "description": "unlink when no disposables exist (should not throw)",
    "lineNumber": 42
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it22",
    "access": null,
    "description": "set disposables, but then try to unlink a non-child",
    "lineNumber": 48
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it23",
    "access": null,
    "description": "disposes a function",
    "lineNumber": 54
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it24",
    "access": null,
    "description": "disposeLink",
    "lineNumber": 62
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "@twist/core/test/DisposableTest.jsx~describe18",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/DisposableTest.jsx~describe18.it25",
    "access": null,
    "description": "tree of disposables",
    "lineNumber": 71
  },
  {
    "__docId__": 844,
    "kind": "testFile",
    "name": "@twist/core/test/ObservableArrayTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { ObservableArray, Binder, TaskQueue } from '@twist/core';\n\ndescribe('Utils.ObservableArray', () => {\n\n    it('updates to ObservableArray by mutators should invalidate jsx', () => {\n        let arr = new ObservableArray([ 'first item' ]);\n\n        let test = new Binder(() => arr.at(0));\n\n        assert.equal(test.previousValue, 'first item');\n\n        arr.unshift('second item');\n        TaskQueue.run();\n\n        assert.equal(test.previousValue, 'second item');\n\n        test.dispose();\n    });\n\n    it('setAt() changes value and signals the change', () => {\n        let arr = new ObservableArray([ 'first item', 'second item' ]);\n\n        let test = new Binder(() => arr.at(1));\n\n        assert.equal(test.previousValue, 'second item');\n\n        arr.setAt(1, 'changed item');\n        TaskQueue.run();\n\n        assert.equal(test.previousValue, 'changed item');\n\n        test.dispose();\n    });\n\n    it('round trips active arrays to native arrays and back', () => {\n        let arr = new ObservableArray([ 'first item', 'second item' ]);\n        let arr2 = new ObservableArray(arr.toArray());\n\n        let test = new Binder(() => arr2.at(0));\n\n        assert.equal(test.previousValue, 'first item');\n\n        test.dispose();\n    });\n\n    it('resizing array to same size has no effect', () => {\n        let arr = new ObservableArray([ 'first item', 'second item' ]);\n\n        let test = new Binder(() => arr.at(1));\n\n        assert.equal(test.previousValue, 'second item');\n\n        arr.length = 2;\n        TaskQueue.run();\n\n        assert.equal(test.previousValue, 'second item');\n\n        test.dispose();\n    });\n\n    it('resizing array to larger size does not affect previous bindings', () => {\n        let arr = new ObservableArray([ 'first item' ]);\n\n        let test1 = new Binder(() => arr.at(0));\n        let test2 = new Binder(() => arr.at(1));\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, undefined);\n\n        arr.length = 2;\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, undefined);\n\n        test1.dispose();\n        test2.dispose();\n    });\n\n    it('resizing array to smaller size changes bindings to truncated values', () => {\n        let arr = new ObservableArray([ 'first item', 'second item' ]);\n\n        let test1 = new Binder(() => arr.at(0));\n        let test2 = new Binder(() => arr.at(1));\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, 'second item');\n\n        arr.length = 1;\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, undefined);\n\n        test1.dispose();\n        test2.dispose();\n    });\n\n    it('swapped values affect bindings', () => {\n        let arr = new ObservableArray([ 'first item', 'second item' ]);\n\n        let test1 = new Binder(() => arr.at(0));\n        let test2 = new Binder(() => arr.at(1));\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, 'second item');\n\n        arr.swapItems([ 'swapped value' ]);\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, 'swapped value');\n        assert.equal(test2.previousValue, undefined);\n\n        test1.dispose();\n        test2.dispose();\n    });\n\n    it('removeItem deletes one item and updates bindings', () => {\n        let arr = new ObservableArray([ 'one', 'two', 'three', 'two' ]);\n\n        let test1 = new Binder(() => arr.at(0));\n        let test2 = new Binder(() => arr.at(1));\n\n        assert.equal(test1.previousValue, 'one');\n        assert.equal(test2.previousValue, 'two');\n\n        arr.removeItem('two');\n        assert.equal(arr.length, 3);\n\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, 'one');\n        assert.equal(test2.previousValue, 'three');\n\n        test1.dispose();\n        test2.dispose();\n    });\n\n    it('overrides Array.prototype.concat properly', () => {\n        let a = new ObservableArray([ 1, 2, 3 ]);\n        let b = new ObservableArray([ 4, 5, 6 ]);\n        let c = new ObservableArray([ 7, 8 ]);\n        let d = [ 9 ];\n        assert.deepEqual(a.concat(b, c, d).toArray(), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]);\n        assert.deepEqual(a.concatToArray(b, c, d), [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]);\n\n        let test = new Binder(() => a.concat(b, c).join(''));\n        assert.equal(test.previousValue, '12345678');\n        TaskQueue.run();\n\n        a.unshift('.');\n        b.unshift('.');\n        c.unshift('.');\n        TaskQueue.run();\n        assert.equal(test.previousValue, '.123.456.78');\n\n        test.dispose();\n    });\n\n    it('overrides Array methods which return a new instance of array properly', () => {\n        let a = new ObservableArray([ 'a', 'b', 'c' ]);\n\n        // Map\n        assert.deepEqual(a.map(v => v + '!').toArray(), [ 'a!', 'b!', 'c!' ]);\n        assert.deepEqual(a.mapToArray(v => v + '!'), [ 'a!', 'b!', 'c!' ]);\n        // Slice\n        assert.deepEqual(a.slice().toArray(), [ 'a', 'b', 'c' ]);\n        assert.deepEqual(a.slice(1,2).toArray(), [ 'b' ]);\n        assert.deepEqual(a.sliceToArray(), [ 'a', 'b', 'c' ]);\n        assert.deepEqual(a.sliceToArray(1,2), [ 'b' ]);\n        // Filter\n        assert.deepEqual(a.filter(v => v !== 'a').toArray(), [ 'b', 'c' ]);\n        assert.deepEqual(a.filterToArray(v => v !== 'a'), [ 'b', 'c' ]);\n\n        let test = new Binder(() =>\n            a.filter(v => v !== 'a')\n                .map(v => v + '!')\n                .slice(0,2).join('')\n        );\n\n        assert.equal(test.previousValue, 'b!c!');\n        TaskQueue.run();\n\n        a.unshift('o');\n        TaskQueue.run();\n        assert.equal(test.previousValue, 'o!b!');\n\n        test.dispose();\n    });\n\n    it('overrides Array mutators returning array properly', () => {\n        let a = new ObservableArray([ 3, 2, 1 ]);\n        let b = a.sort();\n        assert.deepEqual(a.toArray(), [ 1, 2, 3 ]);\n        assert.equal(a, b);\n\n        let c = a.fill('a');\n        assert.deepEqual(c.toArray(), [ 'a', 'a', 'a' ]);\n        assert.equal(a, c);\n\n        a.push('c'); // a a a c\n        let test = new Binder(() =>  a.copyWithin(0, 3).join(''));\n        assert.equal(test.previousValue, 'caac');\n\n        a.fill('o');\n        TaskQueue.run();\n        assert.equal(test.previousValue, 'oooo');\n\n        test.dispose();\n    });\n\n    it('toArray() triggers bindings', () => {\n        let arr = new ObservableArray([ 'a', 'b' ]);\n        let test = new Binder(() => arr.toArray().join(''));\n        assert.equal(test.previousValue, 'ab');\n\n        arr.push('c');\n        TaskQueue.run();\n        assert.equal(test.previousValue, 'abc');\n\n        test.dispose();\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/ObservableArrayTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "access": null,
    "description": "Utils.ObservableArray",
    "lineNumber": 19
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it27",
    "access": null,
    "description": "updates to ObservableArray by mutators should invalidate jsx",
    "lineNumber": 21
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it28",
    "access": null,
    "description": "setAt() changes value and signals the change",
    "lineNumber": 36
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it29",
    "access": null,
    "description": "round trips active arrays to native arrays and back",
    "lineNumber": 51
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it30",
    "access": null,
    "description": "resizing array to same size has no effect",
    "lineNumber": 62
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it31",
    "access": null,
    "description": "resizing array to larger size does not affect previous bindings",
    "lineNumber": 77
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it32",
    "access": null,
    "description": "resizing array to smaller size changes bindings to truncated values",
    "lineNumber": 96
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it33",
    "access": null,
    "description": "swapped values affect bindings",
    "lineNumber": 115
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it34",
    "access": null,
    "description": "removeItem deletes one item and updates bindings",
    "lineNumber": 134
  },
  {
    "__docId__": 854,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it35",
    "access": null,
    "description": "overrides Array.prototype.concat properly",
    "lineNumber": 155
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it36",
    "access": null,
    "description": "overrides Array methods which return a new instance of array properly",
    "lineNumber": 176
  },
  {
    "__docId__": 856,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it37",
    "access": null,
    "description": "overrides Array mutators returning array properly",
    "lineNumber": 207
  },
  {
    "__docId__": 857,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "@twist/core/test/ObservableArrayTest.jsx~describe26",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableArrayTest.jsx~describe26.it38",
    "access": null,
    "description": "toArray() triggers bindings",
    "lineNumber": 228
  },
  {
    "__docId__": 858,
    "kind": "testFile",
    "name": "@twist/core/test/ObservableMapTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { ObservableMap, Binder, TaskQueue } from '@twist/core';\n\ndescribe('Utils.ObservableMap', () => {\n\n    it('can create an empty ObservableMap and modify it', () => {\n        let map = new ObservableMap;\n\n        assert.equal(map.size, 0);\n        assert.equal(map.has('key1'), false, 'key1 should not be in an empty map');\n\n        let newMap = map.set('key1', 'value1');\n        assert.equal(newMap, map, 'ObservableMap.set should return the map');\n\n        assert.equal(map.size, 1);\n        assert.equal(map.has('key1'), true, 'key1 should now be in the map');\n        assert.equal(map.get('key1'), 'value1');\n    });\n\n    it('can create an ObservableMap out of non-map data', () => {\n        let map = new ObservableMap({ 'key1': 'value1', 'key2': 'value2' });\n\n        assert.equal(map.size, 2);\n        assert.equal(map.get('key1'), 'value1');\n    });\n\n    it('can create an ObservableMap out of an array-constructed Map', () => {\n        let map = new ObservableMap(new Map([ [ 'key1', 'value1' ], [ 'key2', 'value2' ] ]));\n\n        assert.equal(map.size, 2);\n        assert.equal(map.get('key1'), 'value1');\n    });\n\n    it('can delete elements from an observable map', () => {\n        let map = new ObservableMap({ 'key1': 'value1', 'key2': 'value2' });\n        assert.equal(map.size, 2);\n\n        let success = map.delete('key1');\n        assert.equal(success, true, 'Should be able to successfully delete an existing key');\n        assert.equal(map.size, 1, 'Map should be reduced in size after deleting');\n        assert.equal(map.get('key1'), undefined, 'Accessing a key that doesn\\'t exist should return undefined');\n\n        success = map.delete('key_unknown');\n        assert.equal(success, false, 'delete() should return false if key is not present');\n        assert.equal(map.size, 1, 'delete() of an undefined key should not affect the map size');\n    });\n\n    it('can clear an observable map', () => {\n        let map = new ObservableMap({ 'key1': 'value1', 'key2': 'value2' });\n        assert.equal(map.size, 2);\n\n        let result = map.clear();\n        assert.equal(result, undefined, 'clear() should return undefined');\n        assert.equal(map.size, 0, 'Map should no longer have any keys after clearing');\n    });\n\n    it('swapped values affect bindings', () => {\n        let map = new ObservableMap({ a: 'first item', b: 'second item' });\n\n        let test1 = new Binder(() => map.get('a'));\n        let test2 = new Binder(() => map.get('b'));\n        let test3 = new Binder(() => map.size);\n\n        assert.equal(test1.previousValue, 'first item');\n        assert.equal(test2.previousValue, 'second item');\n        assert.equal(test3.previousValue, 2);\n\n        map.swapItems({ a: 'first new item' });\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, 'first new item');\n        assert.equal(test2.previousValue, undefined);\n        assert.equal(test3.previousValue, 1);\n\n        test1.dispose();\n        test2.dispose();\n        test3.dispose();\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/ObservableMapTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "@twist/core/test/ObservableMapTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "access": null,
    "description": "Utils.ObservableMap",
    "lineNumber": 19
  },
  {
    "__docId__": 860,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it40",
    "access": null,
    "description": "can create an empty ObservableMap and modify it",
    "lineNumber": 21
  },
  {
    "__docId__": 861,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it41",
    "access": null,
    "description": "can create an ObservableMap out of non-map data",
    "lineNumber": 35
  },
  {
    "__docId__": 862,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it42",
    "access": null,
    "description": "can create an ObservableMap out of an array-constructed Map",
    "lineNumber": 42
  },
  {
    "__docId__": 863,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it43",
    "access": null,
    "description": "can delete elements from an observable map",
    "lineNumber": 49
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it44",
    "access": null,
    "description": "can clear an observable map",
    "lineNumber": 63
  },
  {
    "__docId__": 865,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "@twist/core/test/ObservableMapTest.jsx~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableMapTest.jsx~describe39.it45",
    "access": null,
    "description": "swapped values affect bindings",
    "lineNumber": 72
  },
  {
    "__docId__": 866,
    "kind": "testFile",
    "name": "@twist/core/test/ObservableSetTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { ObservableSet, Binder, TaskQueue } from '@twist/core';\n\ndescribe('Utils.ObservableSet', () => {\n\n    it('can create an empty ObservableSet and modify it', () => {\n        let set = new ObservableSet;\n\n        assert.equal(set.size, 0);\n\n        set.add('value');\n        set.add('value');\n\n        assert.equal(set.size, 1);\n        assert.equal(set.has('value'), true);\n    });\n\n    it('can create an ObservableSet out of an iterable object', () => {\n        let map = new Map([ [ 'key1', 'value1' ], [ 'key2', 'value2' ] ]);\n        let set = new ObservableSet(map.values());\n\n        assert.equal(set.size, 2);\n        assert.equal(set.has('value1'), true);\n    });\n\n    it('can create an ObservableSet out of an array-constructed Set', () => {\n        let set = new ObservableSet(new Set([ 'value1', 'value2' ]));\n\n        assert.equal(set.size, 2);\n        assert.equal(set.has('value1'), true);\n    });\n\n    it('swapped values affect bindings', () => {\n        let set = new ObservableSet([ 'first item', 'second item' ]);\n\n        let test1 = new Binder(() => set.has('first item'));\n        let test2 = new Binder(() => set.has('second item'));\n        let test3 = new Binder(() => set.size);\n\n        assert.equal(test1.previousValue, true);\n        assert.equal(test2.previousValue, true);\n        assert.equal(test3.previousValue, 2);\n\n        set.swapItems([ 'second item' ]);\n        TaskQueue.run();\n\n        assert.equal(test1.previousValue, false);\n        assert.equal(test2.previousValue, true);\n        assert.equal(test3.previousValue, 1);\n\n        test1.dispose();\n        test2.dispose();\n        test3.dispose();\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/ObservableSetTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 867,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "@twist/core/test/ObservableSetTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/ObservableSetTest.jsx~describe46",
    "access": null,
    "description": "Utils.ObservableSet",
    "lineNumber": 19
  },
  {
    "__docId__": 868,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "@twist/core/test/ObservableSetTest.jsx~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableSetTest.jsx~describe46.it47",
    "access": null,
    "description": "can create an empty ObservableSet and modify it",
    "lineNumber": 21
  },
  {
    "__docId__": 869,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "@twist/core/test/ObservableSetTest.jsx~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableSetTest.jsx~describe46.it48",
    "access": null,
    "description": "can create an ObservableSet out of an iterable object",
    "lineNumber": 33
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "@twist/core/test/ObservableSetTest.jsx~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableSetTest.jsx~describe46.it49",
    "access": null,
    "description": "can create an ObservableSet out of an array-constructed Set",
    "lineNumber": 41
  },
  {
    "__docId__": 871,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "@twist/core/test/ObservableSetTest.jsx~describe46",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ObservableSetTest.jsx~describe46.it50",
    "access": null,
    "description": "swapped values affect bindings",
    "lineNumber": 48
  },
  {
    "__docId__": 872,
    "kind": "testFile",
    "name": "@twist/core/test/ScopeTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { Scope } from '@twist/core';\nimport assert from 'assert';\n\ndescribe('JSX.Scope', () => {\n\n    it('should be able to create a scope', () => {\n        let scope = new Scope();\n        scope.defineObservable('myValue', 1);\n\n        assert.equal(scope.myValue, 1, 'Reading bindable value from scope');\n    });\n\n    it('should be able to create a nested scope', () => {\n        let parentScope = new Scope();\n        parentScope.defineObservable('myValue', 1);\n\n        let nestedScope = parentScope.fork();\n\n        assert.equal(parentScope.myValue, 1, 'Reading bindable value from parent scope');\n        assert.equal(nestedScope.myValue, 1, 'Reading bindable value from nested scope');\n\n        parentScope.myValue = 2;\n\n        assert.equal(parentScope.myValue, 2, 'Reading bindable value from parent scope after change on parent scope');\n        assert.equal(nestedScope.myValue, 2, 'Reading bindable value from nested scope after change on parent scope');\n\n        nestedScope.myValue = 3;\n\n        assert.equal(parentScope.myValue, 3, 'Reading bindable value from parent scope after change on nested scope');\n        assert.equal(nestedScope.myValue, 3, 'Reading bindable value from nested scope after change on nested scope');\n    });\n\n    it('should be able to clean a scope', () => {\n        let scope = new Scope();\n        scope.myValue = 1;\n\n        assert.equal(scope.myValue, 1, 'Reading own property value from scope');\n\n        scope.clean();\n\n        assert.equal(scope.myValue, undefined, 'Own property value should be deleted after scope.clean');\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/ScopeTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 873,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "@twist/core/test/ScopeTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/ScopeTest.jsx~describe51",
    "access": null,
    "description": "JSX.Scope",
    "lineNumber": 19
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "@twist/core/test/ScopeTest.jsx~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ScopeTest.jsx~describe51.it52",
    "access": null,
    "description": "should be able to create a scope",
    "lineNumber": 21
  },
  {
    "__docId__": 875,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "@twist/core/test/ScopeTest.jsx~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ScopeTest.jsx~describe51.it53",
    "access": null,
    "description": "should be able to create a nested scope",
    "lineNumber": 28
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "@twist/core/test/ScopeTest.jsx~describe51",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/ScopeTest.jsx~describe51.it54",
    "access": null,
    "description": "should be able to clean a scope",
    "lineNumber": 48
  },
  {
    "__docId__": 877,
    "kind": "testFile",
    "name": "@twist/core/test/SignalDispatcherTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { ObservableArray, SignalDispatcher, TaskQueue } from '@twist/core';\nimport assert from 'assert';\nimport sinon from 'sinon';\n\nclass Data {\n    @Observable x = 1;\n    @Observable y = 2;\n}\n\ndescribe('Utils.SignalDispatcher', () => {\n\n    it('call watch() on an observable', () => {\n        let data = new Data;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        dispatcher.watch(() => data.x, callback);\n        dispatcher.watch(() => data.x); // should work with a noop\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 1);\n\n        // Changing to different value should trigger watch\n        data.x = 2;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 2);\n\n        // Changing to same value should not trigger watch\n        data.x = 2;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n    });\n\n    it('call watch() on an observable - ignore first run', () => {\n        let data = new Data;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        dispatcher.watch(() => data.x, callback, true);\n\n        assert.equal(callback.callCount, 0);\n\n        // Changing to different value should trigger watch\n        data.x = 2;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 2);\n    });\n\n    it('call watchCollection() on an observable array', () => {\n        let data = new ObservableArray;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        dispatcher.watchCollection(() => data, callback);\n        dispatcher.watchCollection(() => data); // should work with a noop\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], data.base); // TODO: Why do we pass the base here, doesn't make sense...\n\n        // Changing the array should trigger watch\n        data.push(2);\n        data.push(3);\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], data.base);\n\n        // Watch shouldn't trigger if nothing really changed\n        data.length = data.length;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n    });\n\n    it('call watchCollection() on an observable array - ignore first run', () => {\n        let data = new ObservableArray;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        dispatcher.watchCollection(() => data, callback, true);\n\n        assert.equal(callback.callCount, 0);\n\n        // Changing the array should trigger watch\n        data.push(2);\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], data.base);\n    });\n\n    it('watches should not trigger after disposing watch', () => {\n        let data = new Data;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        let watch = dispatcher.watch(() => data.x, callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 1);\n\n        // Changing to different value should trigger watch\n        watch.dispose();\n        data.x = 2;\n        TaskQueue.run();\n\n        // Not triggered\n        assert.equal(callback.callCount, 1);\n    });\n\n    it('watches should not trigger after disposing signal dispatcher', () => {\n        let data = new Data;\n        let dispatcher = new SignalDispatcher();\n        let callback = sinon.spy();\n\n        dispatcher.watch(() => data.x, callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 1);\n\n        // Changing to different value should trigger watch\n        dispatcher.dispose();\n        data.x = 2;\n        TaskQueue.run();\n\n        // Not triggered\n        assert.equal(callback.callCount, 1);\n    });\n\n    it('should be able define an observable and watch it', () => {\n        let dispatcher = new SignalDispatcher();\n        dispatcher.defineObservable('x', 2);\n        let callback = sinon.spy();\n\n        dispatcher.watch(() => dispatcher.x, callback);\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 2);\n\n        // Changing to different value should trigger watch\n        dispatcher.x = 4;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n        assert.equal(callback.getCall(1).args[0], 4);\n\n        // Changing to the same value should not trigger watch\n        dispatcher.x = 4;\n        TaskQueue.run();\n\n        assert.equal(callback.callCount, 2);\n\n        // Defining an observable again should just update its value\n        dispatcher.defineObservable('x', 10);\n        TaskQueue.run();\n\n        assert.equal(dispatcher.x, 10);\n        assert.equal(callback.callCount, 3);\n        assert.equal(callback.getCall(2).args[0], 10);\n    });\n\n    it('should be able to trigger an event and listen for it with on/off', () => {\n        let dispatcher = new SignalDispatcher();\n        dispatcher.trigger('event'); // Triggering an event shouldn't do anything, if no listeners\n        let callback = sinon.spy();\n        dispatcher.on('event', callback);\n\n        assert.equal(callback.callCount, 0);\n\n        // Trigger an event should call listener\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 'arg1');\n        assert.equal(callback.getCall(0).args[1], 'arg2');\n\n        // Trigger a different event should not call listener\n        dispatcher.trigger('another_event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n\n        // Stop listening, listener should no longer be called\n        dispatcher.off('event', callback);\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n\n        // Calling off again should have no effect\n        dispatcher.off('event', callback);\n    });\n\n    it('should be able to trigger an event and listen for it with listenTo/stopListening', () => {\n        let dispatcher = new SignalDispatcher();\n        let listener = new SignalDispatcher();\n\n        let callback = sinon.spy();\n        listener.listenTo(dispatcher, 'event', callback);\n\n        assert.equal(callback.callCount, 0);\n\n        // Trigger an event should call listener\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 'arg1');\n        assert.equal(callback.getCall(0).args[1], 'arg2');\n\n        // Trigger a different event should not call listener\n        dispatcher.trigger('another_event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n\n        // Trigger event on a different object should not call listener\n        listener.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n\n        // Stop listening, listener should no longer be called\n        listener.stopListening(dispatcher, 'event', callback);\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n\n        // Calling stopListening again should have no effect\n        listener.stopListening(dispatcher, 'event', callback);\n    });\n\n    it('dispose should call stopListening', () => {\n        let dispatcher = new SignalDispatcher();\n        let listener = new SignalDispatcher();\n\n        let callback = sinon.spy();\n        listener.listenTo(dispatcher, 'event', callback);\n\n        assert.equal(callback.callCount, 0);\n\n        // Trigger an event should call listener\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n        assert.equal(callback.getCall(0).args[0], 'arg1');\n        assert.equal(callback.getCall(0).args[1], 'arg2');\n\n        // Dispose should remove listener\n        listener.dispose();\n\n        dispatcher.trigger('event', 'arg1', 'arg2');\n\n        assert.equal(callback.callCount, 1);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/SignalDispatcherTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "access": null,
    "description": "Utils.SignalDispatcher",
    "lineNumber": 25
  },
  {
    "__docId__": 879,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it56",
    "access": null,
    "description": "call watch() on an observable",
    "lineNumber": 27
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it57",
    "access": null,
    "description": "call watch() on an observable - ignore first run",
    "lineNumber": 52
  },
  {
    "__docId__": 881,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it58",
    "access": null,
    "description": "call watchCollection() on an observable array",
    "lineNumber": 69
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it59",
    "access": null,
    "description": "call watchCollection() on an observable array - ignore first run",
    "lineNumber": 95
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it60",
    "access": null,
    "description": "watches should not trigger after disposing watch",
    "lineNumber": 112
  },
  {
    "__docId__": 884,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it61",
    "access": null,
    "description": "watches should not trigger after disposing signal dispatcher",
    "lineNumber": 131
  },
  {
    "__docId__": 885,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it62",
    "access": null,
    "description": "should be able define an observable and watch it",
    "lineNumber": 150
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it63",
    "access": null,
    "description": "should be able to trigger an event and listen for it with on/off",
    "lineNumber": 182
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it64",
    "access": null,
    "description": "should be able to trigger an event and listen for it with listenTo/stopListening",
    "lineNumber": 212
  },
  {
    "__docId__": 888,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "@twist/core/test/SignalDispatcherTest.jsx~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalDispatcherTest.jsx~describe55.it65",
    "access": null,
    "description": "dispose should call stopListening",
    "lineNumber": 248
  },
  {
    "__docId__": 889,
    "kind": "testFile",
    "name": "@twist/core/test/SignalTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport { Signal } from '@twist/core';\nimport assert from 'assert';\n\ndescribe('Bindings.Signal', () => {\n\n    it('trigger event', () => {\n        let obj = { };\n        let signaled = false;\n        Signal.on(obj, 'event1', () => {\n            signaled = true;\n        });\n        Signal.trigger(obj, 'event1');\n        assert.ok(signaled, 'The signal was triggered.');\n\n        // Adding this line to make sure we get full coverage for events that don't exist.\n        Signal.trigger(obj, 'event2');\n    });\n\n    it('owner is respected', () => {\n        let owner = {};\n        let signal = new Signal(owner);\n        let calledOwner;\n        signal.add(function() {\n            calledOwner = this;\n        });\n        signal.trigger();\n        assert.equal(calledOwner, owner);\n    });\n\n    it('adding two events', () => {\n        let obj = { };\n        let signaled1 = false, signaled2 = false;\n        Signal.on(obj, 'event1', () => signaled1 = true);\n        Signal.on(obj, 'event2', () => signaled2 = true);\n\n        Signal.trigger(obj, 'event1');\n        assert.ok(signaled1, 'The first signal was triggered.');\n\n        Signal.trigger(obj, 'event2');\n        assert.ok(signaled2, 'The second signal was triggered.');\n    });\n\n    it('removing event name before signals were initialized', () => {\n        // This test is needed to have full coverage for Signal.\n        let obj = { };\n        Signal.off(obj, 'event1', () => {\n            // noop;\n        });\n    });\n\n    it(\"removing event name that doesn't exist\", () => {\n        // This test is needed to have full coverage for Signal.\n        let obj = { };\n        Signal.on(obj, 'event1', () => {\n            // noop;\n        });\n        Signal.off(obj, 'event2', () => {\n            // noop;\n        });\n    });\n\n    it('events are not enumerable', () => {\n        let obj = { };\n        let found = false;\n        Signal.on(obj, 'event1', () => {\n        });\n\n        for (let i in obj) {\n            assert(!i);\n            found = true;\n        }\n\n        assert.ok(!found, 'The event should not create any enumerable properties on the object.');\n    });\n\n    it('trigger event with arguments', () => {\n        let obj = { };\n        let value = null;\n        Signal.on(obj, 'event1', (...args) => {\n            value = args;\n        });\n\n        Signal.trigger(obj, 'event1', 'oneValue');\n        assert.deepEqual(value, [ 'oneValue' ], 'The signal was triggered.');\n    });\n\n\n    it('trigger should have no effect after removing event handler', () => {\n        let obj = { };\n        let signalCount = 0;\n        let handler = () => {\n            ++signalCount;\n        };\n\n        Signal.on(obj, 'event1', handler);\n        Signal.trigger(obj, 'event1');\n        assert.equal(signalCount, 1, 'The signal was triggered once.');\n\n        // Removing the handler for this event.\n        Signal.off(obj, 'event1', handler);\n\n        Signal.trigger(obj, 'event1');\n        assert.equal(signalCount, 1, 'The signal should not trigger second time.');\n    });\n\n    it('listenTo', () => {\n        let obj1 = { }, obj2 = { };\n        let signalCount = 0;\n        let handler = () => {\n            ++signalCount;\n        };\n\n        Signal.listenTo(obj1, obj2, 'event1', handler);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should trigger the event once.');\n\n        Signal.stopListening(obj1, obj2);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should not trigger the event second time.');\n    });\n\n    it('stopListening on empty object', () => {\n        let obj = {};\n        Signal.stopListening(obj);\n    });\n\n    it('stopListening with name matching', () => {\n        let obj1 = { }, obj2 = { };\n        let signalCount = 0;\n        let handler = () => {\n            ++signalCount;\n        };\n\n        Signal.listenTo(obj1, obj2, 'event1', handler);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should trigger the event once.');\n\n        // Note we are bogusly removing obj3 to test that we preserve obj2.\n        Signal.stopListening(obj1, obj2, 'event1');\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should not trigger the event second time.');\n    });\n\n    it('stopListening with name and handler matching', () => {\n        let obj1 = { }, obj2 = { };\n        let signalCount = 0;\n        let handler = () => {\n            ++signalCount;\n        };\n\n        Signal.listenTo(obj1, obj2, 'event1', handler);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should trigger the event once.');\n\n        // Note we are bogusly removing obj3 to test that we preserve obj2.\n        Signal.stopListening(obj1, obj2, 'event1', handler);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should not trigger the event second time.');\n    });\n\n    it('stopListening with no matching callback', () => {\n        let obj1 = { }, obj2 = { }, obj3 = { };\n        let signalCount = 0;\n        let handler = () => {\n            ++signalCount;\n        };\n\n        Signal.listenTo(obj1, obj2, 'event1', handler);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 1, 'Should trigger the event once.');\n\n        // Note we are bogusly removing obj3 to test that we preserve obj2.\n        Signal.stopListening(obj1, obj3);\n        Signal.trigger(obj2, 'event1');\n        assert.equal(signalCount, 2, 'Should trigger the event second time as well.');\n\n        Signal.trigger(obj3, 'event1');\n        assert.equal(signalCount, 2, 'Should not trigger on the event from obj3.');\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/SignalTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "@twist/core/test/SignalTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66",
    "access": null,
    "description": "Bindings.Signal",
    "lineNumber": 19
  },
  {
    "__docId__": 891,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it67",
    "access": null,
    "description": "trigger event",
    "lineNumber": 21
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it68",
    "access": null,
    "description": "owner is respected",
    "lineNumber": 34
  },
  {
    "__docId__": 893,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it69",
    "access": null,
    "description": "adding two events",
    "lineNumber": 45
  },
  {
    "__docId__": 894,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it70",
    "access": null,
    "description": "removing event name before signals were initialized",
    "lineNumber": 58
  },
  {
    "__docId__": 895,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it71",
    "access": null,
    "description": "removing event name that doesn't exist",
    "lineNumber": 66
  },
  {
    "__docId__": 896,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it72",
    "access": null,
    "description": "events are not enumerable",
    "lineNumber": 77
  },
  {
    "__docId__": 897,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it73",
    "access": null,
    "description": "trigger event with arguments",
    "lineNumber": 91
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it74",
    "access": null,
    "description": "trigger should have no effect after removing event handler",
    "lineNumber": 103
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it75",
    "access": null,
    "description": "listenTo",
    "lineNumber": 121
  },
  {
    "__docId__": 900,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it76",
    "access": null,
    "description": "stopListening on empty object",
    "lineNumber": 137
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it77",
    "access": null,
    "description": "stopListening with name matching",
    "lineNumber": 142
  },
  {
    "__docId__": 902,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it78",
    "access": null,
    "description": "stopListening with name and handler matching",
    "lineNumber": 159
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "@twist/core/test/SignalTest.jsx~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/SignalTest.jsx~describe66.it79",
    "access": null,
    "description": "stopListening with no matching callback",
    "lineNumber": 176
  },
  {
    "__docId__": 904,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/AbstractTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Abstract decorator', () => {\n\n    it('sanity check', () => {\n        class AbstractClass {\n            @Abstract foo() { }\n        }\n        class ConcreteClass extends AbstractClass {\n            foo() {\n            }\n        }\n\n        assert.throws(() => {\n            new AbstractClass().foo();\n        }, /Abstract method foo called on AbstractClass/);\n\n        assert.doesNotThrow(() => {\n            new ConcreteClass().foo();\n        });\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/AbstractTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 905,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "@twist/core/test/decorators/AbstractTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/AbstractTest.jsx~describe80",
    "access": null,
    "description": "@Abstract decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 906,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "@twist/core/test/decorators/AbstractTest.jsx~describe80",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/AbstractTest.jsx~describe80.it81",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 907,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/ActionTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport Utils from '../Utils';\n\n// We sneak a look at ActionDispatcher as part of the tests, but it's internal\nimport ActionDispatcher from '../../src/internal/state/ActionDispatcher';\n\ndescribe('@Action decorator', () => {\n\n    it('@Action not allowed on a class', () => {\n\n        function test() {\n            @Action\n            class TestClass {\n            }\n            assert(TestClass);\n        }\n\n        Utils.assertError(test, '@Action must be used on a method, not a class.');\n    });\n\n    it('@Action not allowed on a property that\\'s not a method', () => {\n\n        function test() {\n            @Store\n            class TestClass {\n                @Action x;\n            }\n            assert(TestClass);\n        }\n\n        Utils.assertError(test, '@Action can only be used with a method (the handler for the action)');\n    });\n\n    it('@Action not allowed on a non-Store', () => {\n\n        function test() {\n            class TestClass {\n                @Action ACTION() {\n                    return;\n                }\n            }\n            assert(TestClass);\n        }\n\n        Utils.assertError(test, '@Action can only be used for methods on a Store');\n    });\n\n    // TODO: Enable this test once the decorator syntax is fixed\n    // it('@Action not allowed to contain the \"/\" or \"@\" character', () => {\n    //\n    //     function test() {\n    //         @Store\n    //         class TestClass {\n    //             @Action ['ACTION/1']() {\n    //                 return;\n    //             }\n    //         }\n    //     }\n    //\n    //     Utils.assertError(test, '@Action name can\\'t include the \"/\" character');\n    // });\n\n    it('@Action can dispatch another action', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal y;\n\n            @Action X() {\n                this.dispatch('Y');\n            }\n            @Action Y() {\n                this.y = 2;\n            }\n        }\n\n        var test = new TestClass();\n        test.dispatch('X');\n        assert.equal(test.y, 2);\n    });\n\n    it('@Action cannot dispatch an asynchronous action', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal y;\n\n            @Action X() {\n                this.dispatch(() => this.dispatch('Y'));\n            }\n            @Action Y() {\n                this.y = 2;\n            }\n        }\n\n        var test = new TestClass();\n\n        Utils.assertError(() => test.dispatch('X'), 'Cannot dispatch an asynchronous action from a synchronous action');\n        assert(!ActionDispatcher.active);\n        assert.equal(test.y, undefined);\n    });\n\n    it('ActionDispatcher gives an error if start and end don\\'t match', () => {\n\n        assert(!ActionDispatcher.active);\n\n        ActionDispatcher.start('X');\n        Utils.assertError(() => ActionDispatcher.end('Y'), 'ActionDispatcher: Expected to end X, but instead ended a different action of type Y');\n        assert(ActionDispatcher.active);\n\n        // Now, exit the action\n        ActionDispatcher.end('X');\n        assert(!ActionDispatcher.active);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/ActionTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 908,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "access": null,
    "description": "@Action decorator",
    "lineNumber": 22
  },
  {
    "__docId__": 909,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it83",
    "access": null,
    "description": "@Action not allowed on a class",
    "lineNumber": 24
  },
  {
    "__docId__": 910,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it84",
    "access": null,
    "description": "@Action not allowed on a property that's not a method",
    "lineNumber": 36
  },
  {
    "__docId__": 911,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it85",
    "access": null,
    "description": "@Action not allowed on a non-Store",
    "lineNumber": 49
  },
  {
    "__docId__": 912,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it86",
    "access": null,
    "description": "@Action can dispatch another action",
    "lineNumber": 78
  },
  {
    "__docId__": 913,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it87",
    "access": null,
    "description": "@Action cannot dispatch an asynchronous action",
    "lineNumber": 97
  },
  {
    "__docId__": 914,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "@twist/core/test/decorators/ActionTest.jsx~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ActionTest.jsx~describe82.it88",
    "access": null,
    "description": "ActionDispatcher gives an error if start and end don't match",
    "lineNumber": 118
  },
  {
    "__docId__": 915,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/BindTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Bind decorator', () => {\n\n    it('sanity check', () => {\n        class C {\n            x = 1;\n            @Bind\n            bound() {\n                return this.x;\n            }\n        }\n\n        let c = new C();\n        assert.equal((0, c.bound)(), 1);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/BindTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 916,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "@twist/core/test/decorators/BindTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/BindTest.jsx~describe89",
    "access": null,
    "description": "@Bind decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 917,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "@twist/core/test/decorators/BindTest.jsx~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/BindTest.jsx~describe89.it90",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 918,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/CacheTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport { SignalDispatcher, TaskQueue, Binder } from '@twist/core';\n\ndescribe('@Cache decorator', () => {\n\n    it('@Cache can only be used on a getter', () => {\n\n        let error;\n        try {\n            class TestClass {\n                x = 2;\n\n                @Cache cachedValue() {\n                    return 2 * this.x;\n                }\n            }\n            assert(TestClass);\n        }\n        catch(e) {\n            error = e;\n        }\n\n        assert.equal(error && error.message, '@Cache can only be applied on getters.');\n    });\n\n    it('@Cache cannot be used on a static getter', () => {\n\n        let error;\n        try {\n            class TestClass {\n                static x = 2;\n\n                @Cache static get cachedValue() {\n                    return 2 * TestClass.x;\n                }\n            }\n            assert(TestClass);\n        }\n        catch(e) {\n            error = e;\n        }\n\n        assert.equal(error && error.message, '@Cache cannot be used with static getters.');\n    });\n\n\n    it('@Cache can only be used in a Disposable class', () => {\n\n        let error;\n        try {\n            class TestClass {\n                x = 2;\n\n                @Cache get cachedValue() {\n                    return 2 * this.x;\n                }\n            }\n            assert(TestClass);\n        }\n        catch(e) {\n            error = e;\n        }\n\n        assert.equal(error && error.message, '@Cache can only be used on a Disposable class.');\n    });\n\n    it('Cache decorator - should update when binding changes', () => {\n\n        let cacheUpdateCount = 0;\n\n        class Test extends SignalDispatcher {\n\n            constructor() {\n                super();\n                this.watch(() => this.cachedValue, v => this.value1 = v);\n                this.watch(() => this.cachedValue + 1, v => this.value2 = v);\n            }\n\n            @Observable value = 4;\n\n            @Cache\n            get cachedValue() {\n                cacheUpdateCount++;\n                return 2 * this.value;\n            }\n        }\n\n        let test = new Test();\n\n        assert.equal(test.value1, 8);\n        assert.equal(test.value2, 9);\n        assert.equal(cacheUpdateCount, 1);\n\n        test.value++;\n        assert.equal(cacheUpdateCount, 1);\n        TaskQueue.run();\n\n        assert.equal(test.value1, 10);\n        assert.equal(test.value2, 11);\n        assert.equal(cacheUpdateCount, 2);\n\n        test.dispose();\n    });\n\n    it('Cache decorator - should update eagerly when binding changes, if there\\'s a Binder.mutator', () => {\n\n        let mutator = {\n            record: sinon.spy()\n        };\n        Binder.pushMutator(mutator);\n\n        let cacheUpdateCount = 0;\n\n        class Test extends SignalDispatcher {\n\n            constructor() {\n                super();\n                this.watch(() => this.cachedValue, v => this.value1 = v);\n                this.watch(() => this.cachedValue + 1, v => this.value2 = v);\n            }\n\n            @Observable value = 4;\n\n            @Cache\n            get cachedValue() {\n                cacheUpdateCount++;\n                return Math.min(2 * this.value, 10);\n            }\n        }\n\n        let test = new Test();\n\n        assert.equal(test.value1, 8);\n        assert.equal(test.value2, 9);\n        assert.equal(cacheUpdateCount, 1);\n\n        test.value++;\n        assert.equal(cacheUpdateCount, 2);\n        TaskQueue.run();\n\n        assert.equal(test.value1, 10);\n        assert.equal(test.value2, 11);\n        assert.equal(cacheUpdateCount, 2);\n\n        test.value++;\n        assert.equal(cacheUpdateCount, 3);\n        TaskQueue.run();\n\n        assert.equal(test.value1, 10);\n        assert.equal(test.value2, 11);\n        assert.equal(cacheUpdateCount, 3);\n\n        assert.equal(mutator.record.callCount, 3);\n        Binder.popMutator(mutator);\n\n        test.dispose();\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/CacheTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 919,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "access": null,
    "description": "@Cache decorator",
    "lineNumber": 20
  },
  {
    "__docId__": 920,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91.it92",
    "access": null,
    "description": "@Cache can only be used on a getter",
    "lineNumber": 22
  },
  {
    "__docId__": 921,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91.it93",
    "access": null,
    "description": "@Cache cannot be used on a static getter",
    "lineNumber": 42
  },
  {
    "__docId__": 922,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91.it94",
    "access": null,
    "description": "@Cache can only be used in a Disposable class",
    "lineNumber": 63
  },
  {
    "__docId__": 923,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91.it95",
    "access": null,
    "description": "Cache decorator - should update when binding changes",
    "lineNumber": 83
  },
  {
    "__docId__": 924,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "@twist/core/test/decorators/CacheTest.jsx~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/CacheTest.jsx~describe91.it96",
    "access": null,
    "description": "Cache decorator - should update eagerly when binding changes, if there's a Binder.mutator",
    "lineNumber": 121
  },
  {
    "__docId__": 925,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/DebounceTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Debounce decorator', () => {\n\n    it('sanity check', () => {\n        let called = 0;\n\n        class C {\n            @Debounce(100)\n            method() {\n                called++;\n            }\n        }\n\n        let c = new C();\n        c.method();\n        c.method();\n        c.method();\n\n        assert.equal(called, 0);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/DebounceTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 926,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "@twist/core/test/decorators/DebounceTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/DebounceTest.jsx~describe97",
    "access": null,
    "description": "@Debounce decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 927,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "@twist/core/test/decorators/DebounceTest.jsx~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/DebounceTest.jsx~describe97.it98",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 928,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/DelayTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\n\ndescribe('@Delay decorator', () => {\n\n    it('sanity check', () => {\n        const clock = sinon.useFakeTimers();\n        try {\n            let spy = sinon.spy();\n            class C {\n                @Delay(1000)\n                foo() {\n                    spy();\n                }\n            }\n\n            let c = new C();\n            c.foo();\n            assert(spy.notCalled, 'not called delayed function yet');\n            clock.tick(1000);\n            assert(spy.called, 'called delayed function');\n        }\n        finally {\n            clock.restore();\n        }\n    });\n\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/DelayTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 929,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "@twist/core/test/decorators/DelayTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/DelayTest.jsx~describe99",
    "access": null,
    "description": "@Delay decorator",
    "lineNumber": 19
  },
  {
    "__docId__": 930,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "@twist/core/test/decorators/DelayTest.jsx~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/DelayTest.jsx~describe99.it100",
    "access": null,
    "description": "sanity check",
    "lineNumber": 21
  },
  {
    "__docId__": 931,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/MemoizeTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Memoize decorator', () => {\n\n    it('sanity check', () => {\n        let i = 0;\n        class C {\n            @Memoize\n            static get foo() {\n                return ++i;\n            }\n        }\n\n        C.foo;\n        C.foo;\n        C.foo;\n        assert.equal(C.foo, 1);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/MemoizeTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 932,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "@twist/core/test/decorators/MemoizeTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/MemoizeTest.jsx~describe101",
    "access": null,
    "description": "@Memoize decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 933,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "@twist/core/test/decorators/MemoizeTest.jsx~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MemoizeTest.jsx~describe101.it102",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 934,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/MutableStoreTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport Utils from '../Utils';\n\n// We sneak a look at ActionDispatcher as part of the tests, but it's internal\nimport ActionDispatcher from '../../src/internal/state/ActionDispatcher';\n\n/**\n    Some simple stores for testing\n**/\n\n@Store\nclass Item {\n    @State.byVal y;\n}\n\n@Store({ mutable: true })\nclass MutableStore {\n    @State.byVal x;\n    @State.byRef(Item) item;\n\n    @State.byRefArray(Item) items;\n    @State.byRefMap(Item) itemMap;\n}\n\n\n/**\n    Tests\n**/\n\ndescribe('@Store({mutable: true}) decorator', () => {\n\n    it('Can mutate @State.byVal', () => {\n\n        var middleware = Utils.getMiddleware();\n        var test = new MutableStore({}, middleware.fn);\n        middleware.store = test;\n\n        test.x = 3;\n        assert.equal(test.x, 3);\n\n        test.x = 4;\n        assert.equal(test.x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, '@x', '@x' ]);\n    });\n\n    it('Can mutate @State.byRef', () => {\n\n        var middleware = Utils.getMiddleware();\n        var test = new MutableStore({}, middleware.fn);\n        middleware.store = test;\n\n        var item = new Item({ y: 'testval' });\n        test.item = item;\n        assert.equal(test.item.y, 'testval');\n\n        test.item.y = 'another';\n        assert.equal(test.item.y, 'another');\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, '@item', 'item/@y' ]);\n    });\n\n    it('Can mutate @State.byRefArray', () => {\n\n        var middleware = Utils.getMiddleware();\n        var test = new MutableStore({}, middleware.fn);\n        middleware.store = test;\n\n        var item = new Item({ y: 'testval' });\n        var pushLength = test.items.push(item);\n        assert.equal(pushLength, 1);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        var poppedItem = test.items.pop();\n        assert.equal(poppedItem.y, 'testval');\n        assert.equal(test.items.length, 0);\n\n        var unshiftLength = test.items.unshift(item);\n        assert.equal(unshiftLength, 1);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        var shiftedItem = test.items.shift();\n        assert.equal(shiftedItem.y, 'testval');\n        assert.equal(test.items.length, 0);\n\n        var splicedItems = test.items.splice(0, 0, item);\n        assert.equal(splicedItems.length, 0);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        var reversedArray = test.items.reverse();\n        assert.equal(reversedArray, test.items);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        test.items.length = 0;\n        assert.equal(test.items.length, 0);\n\n        test.items.length = 1;\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0), undefined);\n\n        test.items.setAt(0, item);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        var filledArray = test.items.fill(item, 0, 1);\n        assert.equal(filledArray, test.items);\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'testval');\n\n        test.items.at(0).y = 'another';\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0).y, 'another');\n\n        test.items.swapItems([ new Item({ y: 'changed1' }), new Item({ y: 'changed2' }) ]);\n        assert.equal(test.items.length, 2);\n        assert.equal(test.items.at(0).y, 'changed1');\n        assert.equal(test.items.at(1).y, 'changed2');\n\n        assert.deepEqual(middleware.actions, [\n            ActionDispatcher.INIT_ACTION,\n            '@items.push()',\n            '@items.pop()',\n            '@items.unshift()',\n            '@items.shift()',\n            '@items.splice()',\n            '@items.reverse()',\n            '@items.length',\n            '@items.length',\n            '@items.setAt()',\n            '@items.fill()',\n            'items:0/@y',\n            '@items.swapItems()'\n        ]);\n    });\n\n    it('Modifying an array with @State.byRefArray preserves connection to parent store', () => {\n\n        var middleware = Utils.getMiddleware();\n        var test = new MutableStore({\n            items: [\n                { y: 'test1' },\n                { y: 'test2' }\n            ]\n        }, middleware.fn);\n        middleware.store = test;\n\n        var firstItem = test.items.at(0);\n        var lastItem = test.items.at(1);\n        lastItem.y += 'a';\n        assert.equal(lastItem.y, 'test2a');\n\n        test.items.shift();\n        assert.equal(test.items.length, 1);\n        assert.equal(test.items.at(0), lastItem);\n\n        lastItem.y += 'b';\n        assert.equal(lastItem.y, 'test2ab');\n\n        test.items.push(firstItem);\n        firstItem = test.items.at(1);\n        firstItem.y += 'c';\n        test.items.reverse();\n        lastItem.y += 'd';\n        assert.equal(firstItem.y, 'test1c');\n        assert.equal(lastItem.y, 'test2abd');\n\n        test.items.splice(0, 0, new Item({ y: 'test3' }));\n        var newItem = test.items.at(0);\n        firstItem.y += 'e';\n        lastItem.y += 'f';\n        newItem.y += 'g';\n        assert.equal(firstItem.y, 'test1ce');\n        assert.equal(lastItem.y, 'test2abdf');\n        assert.equal(newItem.y, 'test3g');\n\n        assert.deepEqual(middleware.actions, [\n            ActionDispatcher.INIT_ACTION,\n            'items:1/@y',\n            '@items.shift()',\n            'items:0/@y',\n            '@items.push()',\n            'items:1/@y',\n            '@items.reverse()',\n            'items:1/@y',\n            '@items.splice()',\n            'items:1/@y',\n            'items:2/@y',\n            'items:0/@y'\n        ]);\n    });\n\n    it('Can mutate @State.byRefMap', () => {\n\n        var middleware = Utils.getMiddleware();\n        var test = new MutableStore({}, middleware.fn);\n        middleware.store = test;\n\n        var item = new Item({ y: 'testval' });\n        test.itemMap.set('key', item);\n        assert.equal(test.itemMap.get('key').y, 'testval');\n\n        var wasDeleted = test.itemMap.delete('key');\n        assert.equal(wasDeleted, true);\n        assert.equal(test.itemMap.get('key'), undefined);\n\n        var map = test.itemMap.set('key', item);\n        assert.equal(map, test.itemMap);\n        assert.equal(test.itemMap.get('key').y, 'testval');\n\n        test.itemMap.get('key').y = 'another';\n        assert.equal(test.itemMap.get('key').y, 'another');\n\n        test.itemMap.clear();\n        assert.equal(test.itemMap.get('key'), undefined);\n\n        assert.deepEqual(middleware.actions, [\n            ActionDispatcher.INIT_ACTION,\n            '@itemMap.set()',\n            '@itemMap.delete()',\n            '@itemMap.set()',\n            'itemMap:key/@y',\n            '@itemMap.clear()'\n        ]);\n    });\n\n    it('Setting a store results in a copy', () => {\n\n        var test1 = new MutableStore({});\n        var test2 = new MutableStore({});\n        var item = new Item({ y: 'testval' });\n\n        test1.item = item;\n        test2.item = item;\n\n        assert.notEqual(test1.item, test2.item);\n        assert.notEqual(test1.item, item);\n        assert.notEqual(test2.item, item);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/MutableStoreTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 935,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "access": null,
    "description": "Tests",
    "lineNumber": 45
  },
  {
    "__docId__": 936,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it104",
    "access": null,
    "description": "Can mutate @State.byVal",
    "lineNumber": 47
  },
  {
    "__docId__": 937,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it105",
    "access": null,
    "description": "Can mutate @State.byRef",
    "lineNumber": 62
  },
  {
    "__docId__": 938,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it106",
    "access": null,
    "description": "Can mutate @State.byRefArray",
    "lineNumber": 78
  },
  {
    "__docId__": 939,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it107",
    "access": null,
    "description": "Modifying an array with @State.byRefArray preserves connection to parent store",
    "lineNumber": 155
  },
  {
    "__docId__": 940,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it108",
    "access": null,
    "description": "Can mutate @State.byRefMap",
    "lineNumber": 211
  },
  {
    "__docId__": 941,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/MutableStoreTest.jsx~describe103.it109",
    "access": null,
    "description": "Setting a store results in a copy",
    "lineNumber": 245
  },
  {
    "__docId__": 942,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/ObservableTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { Binder, Signal, TaskQueue } from '@twist/core';\n\ndescribe('Observable Decorator', () => {\n\n    it('default value', () => {\n        class Data {\n            @Observable value = 'default value';\n        }\n\n        let data = new Data;\n        assert.equal(data.value, 'default value');\n    });\n\n    it('inherited default value', () => {\n        class Base {\n            @Observable value = 'default value';\n        }\n\n        class Subclass extends Base {\n            @Observable value;\n        }\n\n        let data1 = new Base;\n        let data2 = new Subclass;\n\n        assert.equal(data1.value, 'default value');\n        assert.equal(data2.value, 'default value');\n    });\n\n    it('replace default value', () => {\n        class Base {\n            @Observable value = 'default value';\n        }\n\n        class Subclass extends Base {\n            @Observable value = 'subclass default value';\n        }\n\n        let data1 = new Base;\n        let data2 = new Subclass;\n\n        assert.equal(data1.value, 'default value');\n        assert.equal(data2.value, 'subclass default value');\n    });\n\n    it('check for events', () => {\n        class Data {\n            @Observable value = 'default value';\n        }\n\n        let data = new Data;\n\n        let changed = false;\n        Signal.on(data, 'value', () => changed = true);\n        data.value = 'changed value';\n\n        assert(changed, 'value change event was triggered');\n        assert.equal(data.value, 'changed value');\n    });\n\n    it('check for inherited classes events', () => {\n        class Base {\n            @Observable value = 'default value';\n        }\n\n        class Subclass extends Base {\n            @Observable value;\n        }\n\n        let data = new Subclass;\n\n        let changed = false;\n        Signal.on(data, 'value', () => changed = true);\n        data.value = 'changed value';\n\n        assert(changed, 'value change event was triggered');\n        assert.equal(data.value, 'changed value');\n    });\n\n    it('triggers an update when changed asynchronously', done => {\n        let nCalls = 0;\n\n        class Data {\n            @Observable value = 'default value';\n        }\n\n        let data = new Data;\n        let binder;\n\n        let onDone = error => {\n            binder.dispose();\n            done(error);\n        };\n\n        binder = new Binder(\n            () => 'my value is ' + data.value,\n            value => {\n                nCalls = nCalls + 1;\n                if (nCalls === 1) {\n                    if (value !== 'my value is default value') {\n                        return onDone(new Error('Initial call had incorrect response: ' + value));\n                    }\n                }\n                else if (nCalls === 2) {\n                    if (value === 'my value is updated value') {\n                        return onDone();\n                    }\n                    else {\n                        return onDone(new Error('Second call had incorrect response: ' + value));\n                    }\n                }\n                else {\n                    return onDone(new Error('Too many calls to binder update func.'));\n                }\n            });\n\n        TaskQueue.run();\n\n        setTimeout(\n            () => {\n                data.value = 'updated value';\n                TaskQueue.run();\n            }, 0);\n    });\n\n    it('should not invalidate binders if change a NaN to a NaN', () => {\n        class Data {\n            @Observable value = 42;\n        }\n\n        let data = new Data;\n        let invalidateCount = 0;\n        new Binder(() => data.value, undefined, true, () => invalidateCount++);\n\n        assert.equal(invalidateCount, 0);\n\n        data.value = 0;\n        assert.equal(invalidateCount, 1);\n\n        data.value = NaN;\n        assert.equal(invalidateCount, 2);\n\n        data.value = NaN;\n        assert.equal(invalidateCount, 2);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/ObservableTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 943,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "access": null,
    "description": "Observable Decorator",
    "lineNumber": 19
  },
  {
    "__docId__": 944,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it111",
    "access": null,
    "description": "default value",
    "lineNumber": 21
  },
  {
    "__docId__": 945,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it112",
    "access": null,
    "description": "inherited default value",
    "lineNumber": 30
  },
  {
    "__docId__": 946,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it113",
    "access": null,
    "description": "replace default value",
    "lineNumber": 46
  },
  {
    "__docId__": 947,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it114",
    "access": null,
    "description": "check for events",
    "lineNumber": 62
  },
  {
    "__docId__": 948,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it115",
    "access": null,
    "description": "check for inherited classes events",
    "lineNumber": 77
  },
  {
    "__docId__": 949,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it116",
    "access": null,
    "description": "triggers an update when changed asynchronously",
    "lineNumber": 96
  },
  {
    "__docId__": 950,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "@twist/core/test/decorators/ObservableTest.jsx~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ObservableTest.jsx~describe110.it117",
    "access": null,
    "description": "should not invalidate binders if change a NaN to a NaN",
    "lineNumber": 142
  },
  {
    "__docId__": 951,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/PrototypeTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Prototype decorator', () => {\n\n    it('sanity check', () => {\n        @Prototype({ x: 1, y: 2 })\n        class C {\n        }\n\n        assert.equal(C.prototype.x, 1);\n        assert.equal(C.prototype.y, 2);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/PrototypeTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 952,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "@twist/core/test/decorators/PrototypeTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/PrototypeTest.jsx~describe118",
    "access": null,
    "description": "@Prototype decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 953,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "@twist/core/test/decorators/PrototypeTest.jsx~describe118",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/PrototypeTest.jsx~describe118.it119",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 954,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/StateTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport Utils from '../Utils';\n\n// We sneak a look at ActionDispatcher as part of the tests, but it's internal\nimport ActionDispatcher from '../../src/internal/state/ActionDispatcher';\n\nimport { ObservableArray } from '../../index';\n\ndescribe('@State.XXX decorators', () => {\n\n    it('@State.byVal - import and export', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal x;\n            @State.byVal y;\n            @State.byVal z;\n        }\n\n        var original = {\n            x: 'value1',\n            y: 42,\n            z: { x: 42 }\n        };\n\n        var test = new TestClass();\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n\n        assert.notEqual(test.z, original.z); // byVal should clone the object\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n    });\n\n    it('@State.byVal - import and export should stick to defined values', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal x;\n        }\n\n        var original = {\n            x: 'value1',\n            y: 'value2'\n        };\n\n        var test = new TestClass(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: 'value1' }));\n    });\n\n    it('@State.byVal - should work with common names', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal name;\n            @State.byVal parent;\n            @State.byVal owner;\n        }\n\n        var original = {\n            name: 'testName',\n            parent: 'testParent',\n            owner: 'testOwner'\n        };\n\n        @Store\n        class ParentClass {\n            @State.byRef(TestClass) owner;\n        }\n\n        var test = new ParentClass({ owner: original });\n\n        assert.equal(test.owner.name, 'testName');\n        assert.equal(test.owner.parent, 'testParent');\n        assert.equal(test.owner.owner, 'testOwner');\n    });\n\n    it('@State.byBooleanVal', () => {\n\n        @Store\n        class TestClass {\n            @State.byBooleanVal x;\n            @State.byBooleanVal y;\n            @State.byBooleanVal z;\n            @State.byBooleanVal t;\n        }\n\n        var original = {\n            x: 'true',\n            y: 'false',\n            z: false,\n            t: 0\n        };\n\n        var test = new TestClass(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: true, y: false, z: false, t: false }));\n    });\n\n    it('@State.byNumberVal', () => {\n\n        @Store\n        class TestClass {\n            @State.byNumberVal x;\n            @State.byNumberVal y;\n            @State.byNumberVal z;\n        }\n\n        var original = {\n            x: 42,\n            y: '42',\n            z: 'xxx'\n        };\n\n        var test = new TestClass(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: 42, y: 42, z: null }));\n    });\n\n    it('@State.bySimpleVal', () => {\n\n        @Store\n        class TestClass {\n            @State.bySimpleVal x;\n            @State.bySimpleVal y;\n            @State.bySimpleVal z;\n        }\n\n        var original = {\n            x: 'thisisastring',\n            y: { x: 2 },\n            z: 42\n        };\n\n        var test = new TestClass(original);\n        assert.equal(test.y, original.y); // bySimpleVal doesn't clone any objects\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n    });\n\n    it('@State.byArray(true)', () => {\n\n        @Store\n        class TestClass {\n            @State.byArray(true) x;\n            @State.byArray(true) y;\n            @State.byArray(true) z;\n        }\n\n        var original = {\n            x: [ 1, 2, 3 ],\n            y: [ ],\n            z: 42\n        };\n\n        var test = new TestClass(original);\n        assert.notEqual(test.x, original.x); // byArrayVal slices the array\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ 1, 2, 3 ], y: [ ], z: [ ] }));\n    });\n\n    it('@State.byCustomVal', () => {\n\n        const ArrayOfString = {\n            parse(jsonValue) {\n                return new ObservableArray(jsonValue ? jsonValue : [ ]);\n            },\n            serialize(value) {\n                return value.toArray();\n            }\n        };\n\n        @Store\n        class TestClass {\n            @State.byCustomVal(ArrayOfString) x;\n            @State.byCustomVal(ArrayOfString) y;\n            @State.byCustomVal(ArrayOfString, [ 42 ]) z;\n        }\n\n        var original = {\n            x: [ 1, 2, 3 ],\n            y: [ ]\n        };\n\n        var test = new TestClass(original);\n        assert.notEqual(test.x, original.x);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ 1, 2, 3 ], y: [ ], z: [ 42 ] }));\n    });\n\n    it('@State.byRef', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        @Store\n        class TestClass {\n            @State.byRef(TestRefClass) x;\n            @State.byRef(TestRefClass) y;\n        }\n\n        var original = {\n            x: { x: 2, y: 3 }\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: null, y: null }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n        assert(test.x instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: { x: 2, y: 3 }, y: { } }));\n    });\n\n    it('@State.byOptionalRef', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        @Store\n        class TestClass {\n            @State.byOptionalRef(TestRefClass) x;\n            @State.byOptionalRef(TestRefClass) y;\n        }\n\n        var original = {\n            x: { x: 2, y: 3 }\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: null, y: null }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n        assert(test.x instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: { x: 2, y: 3 }, y: null }));\n    });\n\n    it('@State.byCustomRef', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        var typeFn = function(jsonValue) {\n            if (!jsonValue || !jsonValue.ignore) {\n                return new TestRefClass();\n            }\n        };\n\n        @Store\n        class TestClass {\n            @State.byCustomRef(typeFn) x;\n            @State.byCustomRef(typeFn) y;\n            @State.byCustomRef(typeFn) z;\n        }\n\n        var original = {\n            x: { x: 2, y: 3 },\n            y: { x: 2, y: 3, ignore: true },\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: null, y: null, z: null }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n        assert(test.x instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: { x: 2, y: 3 }, y: null, z: {} }));\n    });\n\n    it('@State.byRefArray', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        @Store\n        class TestClass {\n            @State.byRefArray(TestRefClass) x;\n            @State.byRefArray(TestRefClass) y;\n            @State.byRefArray(TestRefClass) z;\n\n            @Action UPDATE() {\n                this.z.push(undefined);\n            }\n        }\n\n        var original = {\n            x: [ { x: 2, y: 3 } ],\n            y: [ { }, undefined, { } ],\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ ], y: [ ], z: [ ] }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n\n        // Make sure can't update outside an action\n        Utils.assertError(() => test.z.push(undefined), 'Attempting to set state outside of an action');\n        test.dispatch('UPDATE');\n\n        assert(test.x instanceof ObservableArray);\n        assert(test.x.at(0) instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ { x: 2, y: 3 } ], y: [ { }, { }, { } ], z: [ null ] }));\n    });\n\n    // TODO: Don't use components here\n    // it('@State.byRefArray - should work with <repeat>', () => {\n    //\n    //     @Store\n    //     class TestRefClass {\n    //         @State.byVal desc;\n    //         @State.byVal y;\n    //     }\n    //\n    //     @Store\n    //     class TestClass {\n    //         @State.byRefArray(TestRefClass) arr;\n    //\n    //         @Action UPDATE() {\n    //             var item = new TestRefClass;\n    //             item.desc = 'Description 2';\n    //             this.arr.push(item);\n    //         }\n    //     }\n    //\n    //     var original = {\n    //         arr: [ { desc: 'Description 1' } ],\n    //     };\n    //\n    //     var test = new TestClass(original);\n    //\n    //     /* global item */\n    //     var testRepeat = Test.jsx(() => <repeat for={ item in test.arr }>{ item.desc }</repeat>);\n    //\n    //     assert.equal(testRepeat.node.childNodes.length, 1);\n    //     assert.equal(testRepeat.node.firstChild.textContent, 'Description 1');\n    //\n    //     test.dispatch('UPDATE');\n    //     TaskQueue.run();\n    //\n    //     assert.equal(testRepeat.node.childNodes.length, 2);\n    //     assert.equal(testRepeat.node.firstChild.textContent, 'Description 1');\n    //     assert.equal(testRepeat.node.lastChild.textContent, 'Description 2');\n    //\n    //     testRepeat.dispose();\n    // });\n\n    it('@State.byCustomRefArray', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        var typeFn = function(jsonValue) {\n            if (!jsonValue || !jsonValue.ignore) {\n                return new TestRefClass();\n            }\n        };\n\n        @Store\n        class TestClass {\n            @State.byCustomRefArray(typeFn) x;\n            @State.byCustomRefArray(typeFn) y;\n            @State.byCustomRefArray(typeFn) z;\n\n            @Action UPDATE() {\n                this.z.push(undefined);\n            }\n        }\n\n        var original = {\n            x: [ { x: 2, y: 3 }, { x: 2, y: 3, ignore: true } ],\n            y: [ { }, undefined, { } ],\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ ], y: [ ], z: [ ] }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n\n        // Make sure can't update outside an action\n        Utils.assertError(() => test.z.push(undefined), 'Attempting to set state outside of an action');\n        test.dispatch('UPDATE');\n\n        assert(test.x instanceof ObservableArray);\n        assert(test.x.at(0) instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: [ { x: 2, y: 3 } ], y: [ { }, { }, { } ], z: [ null ] }));\n    });\n\n    it('@State.byRefMap', () => {\n\n        @Store\n        class TestRefClass {\n            @State.byVal x;\n            @State.byVal y;\n        }\n\n        @Store\n        class TestClass {\n            @State.byRefMap(TestRefClass) x;\n            @State.byRefMap(TestRefClass) y;\n            @State.byRefMap(TestRefClass) z;\n\n            @Action UPDATE() {\n                this.x.set('testC', undefined);\n            }\n        }\n\n        var original = {\n            x: {\n                testA: { x: 2, y: 3 },\n                testB: { },\n                testC: undefined\n            },\n            y: { },\n        };\n\n        var test = new TestClass();\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: { }, y: { }, z: { } }));\n\n        test.dispatch(ActionDispatcher.INIT_ACTION, original);\n\n        // Make sure can't update outside an action\n        Utils.assertError(() => test.x.set('testC', undefined), 'Attempting to set state outside of an action');\n        test.dispatch('UPDATE');\n\n        assert(test.x.get('testA') instanceof TestRefClass);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: { testA: { x: 2, y: 3 }, testB: { }, testC: null }, y: { }, z: { } }));\n    });\n\n    it('@State.alias', () => {\n\n        @Store\n        class TestClass {\n            @State.alias('myX') @State.byVal x;\n            @State.alias('myY') @State.byVal y;\n            @State.alias('myZ') @State.byVal z;\n        }\n\n        var original = {\n            myX: 'value1',\n            myY: 42,\n            myZ: { x: 42 }\n        };\n\n        var test = new TestClass(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/StateTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 955,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "@twist/core/test/decorators/StateTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "access": null,
    "description": "@State.XXX decorators",
    "lineNumber": 24
  },
  {
    "__docId__": 956,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it121",
    "access": null,
    "description": "@State.byVal - import and export",
    "lineNumber": 26
  },
  {
    "__docId__": 957,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it122",
    "access": null,
    "description": "@State.byVal - import and export should stick to defined values",
    "lineNumber": 48
  },
  {
    "__docId__": 958,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it123",
    "access": null,
    "description": "@State.byVal - should work with common names",
    "lineNumber": 64
  },
  {
    "__docId__": 959,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it124",
    "access": null,
    "description": "@State.byBooleanVal",
    "lineNumber": 91
  },
  {
    "__docId__": 960,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it125",
    "access": null,
    "description": "@State.byNumberVal",
    "lineNumber": 112
  },
  {
    "__docId__": 961,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it126",
    "access": null,
    "description": "@State.bySimpleVal",
    "lineNumber": 131
  },
  {
    "__docId__": 962,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it127",
    "access": null,
    "description": "@State.byArray(true)",
    "lineNumber": 151
  },
  {
    "__docId__": 963,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it128",
    "access": null,
    "description": "@State.byCustomVal",
    "lineNumber": 171
  },
  {
    "__docId__": 964,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it129",
    "access": null,
    "description": "@State.byRef",
    "lineNumber": 199
  },
  {
    "__docId__": 965,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it130",
    "access": null,
    "description": "@State.byOptionalRef",
    "lineNumber": 225
  },
  {
    "__docId__": 966,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it131",
    "access": null,
    "description": "@State.byCustomRef",
    "lineNumber": 251
  },
  {
    "__docId__": 967,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it132",
    "access": null,
    "description": "@State.byRefArray",
    "lineNumber": 285
  },
  {
    "__docId__": 968,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it133",
    "access": null,
    "description": "@State.byCustomRefArray",
    "lineNumber": 365
  },
  {
    "__docId__": 969,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it134",
    "access": null,
    "description": "@State.byRefMap",
    "lineNumber": 409
  },
  {
    "__docId__": 970,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "@twist/core/test/decorators/StateTest.jsx~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StateTest.jsx~describe120.it135",
    "access": null,
    "description": "@State.alias",
    "lineNumber": 450
  },
  {
    "__docId__": 971,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/StoreTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport Utils from '../Utils';\n\n// We sneak a look at ActionDispatcher as part of the tests, but it's internal\nimport ActionDispatcher from '../../src/internal/state/ActionDispatcher';\n\nimport { Signal } from '../../index';\n\n/**\n    Some simple stores for testing\n**/\n\n@Store\nclass EmptyTestStore {\n}\n\n@Store\nclass TestStore {\n    @State.byVal x;\n\n    @Action INCR() {\n        this.x++;\n    }\n}\n\n\n/**\n    Tests\n**/\n\ndescribe('@Store decorator', () => {\n\n    it('Basic store - can import and export', () => {\n\n        var original = {};\n\n        var test = new EmptyTestStore();\n        var fromJSON = test.fromJSON(original);\n        assert.equal(test, fromJSON);\n\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n    });\n\n    it('Basic store - can initialise from JSON, and dispatch unknown action', () => {\n\n        var original = {};\n        var test = new EmptyTestStore(original);\n\n        test.dispatch('UNKNOWN_ACTION');\n        test.dispatch('UNKNOWN_ACTION/UNKNOWN_ACTION');\n\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n    });\n\n    it('Basic store - action must be a string', () => {\n\n        var original = {};\n        var test = new EmptyTestStore(original);\n\n        function testDispatch() {\n            test.dispatch({ x: 2 });\n        }\n\n        Utils.assertError(testDispatch, 'Action name must be a string');\n    });\n\n    it('Store with simple state and basic action - only dispatching will update state', () => {\n\n        var original = {\n            x: 2\n        };\n\n        // Initialise from constructor\n        var test = new TestStore(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n\n        // Modifying it directly should fail\n        assert.throws(() => test.x = 3, Error, 'Attempting to set state outside of an action');\n\n        // Dispatch actions should update the state, and data binding should work\n        var changed = false;\n        Signal.on(test, 'x', () => changed = true);\n        assert.equal(test.x, 2);\n\n        test.dispatch('INCR');\n\n        assert(changed, 'value change event was triggered');\n        assert.equal(test.x, 3);\n    });\n\n    it('Store with action that creates another store from JSON', () => {\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store;\n\n            @Action SET_STORE(x) {\n                this.store = new TestStore({ x });\n            }\n        }\n\n        // Initialise from constructor\n        var test = new MainStore({});\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ store: { } }));\n\n        var callback = sinon.spy();\n        test.watch(() => test.store.x, callback);\n\n        assert.equal(test.store.x, undefined);\n        test.dispatch('SET_STORE', 2);\n        assert.equal(test.store.x, 2);\n\n        assert.equal(callback.callCount, 1);\n    });\n\n    it('Store with action that takes multiple arguments', () => {\n\n        @Store\n        class MainStore {\n            @State.byVal x;\n            @State.byVal y;\n\n            @Action SET(x, y) {\n                this.x = x;\n                this.y = y;\n            }\n        }\n\n        // Initialise from constructor\n        var test = new MainStore({ x: 2, y: 3 });\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify({ x: 2, y: 3 }));\n\n        test.dispatch('SET', 10, 11);\n        assert.equal(test.x, 10);\n        assert.equal(test.y, 11);\n    });\n\n    it('Store with nested state - dispatched actions should propagate', () => {\n\n        @Store\n        class MainStore {\n            @State.byVal x;\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n\n            @Action INCR() {\n                this.x++;\n            }\n        }\n\n        var original = {\n            x: 1,\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var test = new MainStore(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n\n        // Substore should reference parent:\n        assert.equal(test.store1.getParentStore(), test);\n        assert.equal(test.store2.getParentStore(), test);\n\n        // Changing the substore should fail\n        assert.throws(() => test.store1 = undefined, Error, 'Attempting to set state outside of an action');\n\n        // Dispatch actions should propagate to the substores\n        assert.equal(test.x, 1);\n        assert.equal(test.store1.x, 2);\n        assert.equal(test.store2.x, 4);\n\n        test.dispatch('INCR');\n        assert.equal(test.x, 2);\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.store2.x, 5);\n    });\n\n    it('Store with nested state - dispatched actions should not propagate if parent handler marked as propagate:false', () => {\n\n        @Store\n        class MainStore {\n            @State.byVal x;\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n\n            @Action({ propagate: false }) INCR() {\n                this.x++;\n            }\n        }\n\n        var original = {\n            x: 1,\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var test = new MainStore(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n\n        test.dispatch('INCR');\n        assert.equal(test.x, 2);\n        assert.equal(test.store1.x, 2);\n        assert.equal(test.store2.x, 4);\n    });\n\n    it('Store with nested state - dispatched actions should not propagate if parent handler returns a value', () => {\n\n        @Store\n        class MainStore {\n            @State.byVal x;\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n\n            @Action INCR() {\n                this.x++;\n                return 'incr_result';\n            }\n        }\n\n        var original = {\n            x: 1,\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var test = new MainStore(original);\n        assert.equal(JSON.stringify(test.toJSON()), JSON.stringify(original));\n\n        var result = test.dispatch('INCR');\n        assert.equal(result, 'incr_result');\n        assert.equal(test.x, 2);\n        assert.equal(test.store1.x, 2);\n        assert.equal(test.store2.x, 4);\n    });\n\n    it('Store with nested state - action dispatched to sub-store should pass through parent middleware', () => {\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n        }\n\n        var original = {\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.store1.dispatch('INCR');\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.store2.x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'store1/INCR' ]);\n    });\n\n    it('Store with nested state - action that dispatches another action to sub-store should only pass through parent middleware once', () => {\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n\n            @Action INCR_S1() {\n                this.store1.dispatch('INCR');\n            }\n        }\n\n        var original = {\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('INCR_S1');\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.store2.x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'INCR_S1' ]);\n    });\n\n    it('Store with double-nested state - action dispatched to sub-store should pass through parent middleware', () => {\n\n        @Store\n        class IntermediateStore {\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n        }\n\n        @Store\n        class MainStore {\n            @State.byRef(IntermediateStore) storeA;\n            @State.byRef(IntermediateStore) storeB;\n        }\n\n        var original = {\n            storeA: {\n                store1: {\n                    x: 2\n                },\n                store2: {\n                    x: 4\n                }\n            },\n            storeB: {\n                store1: {\n                    x: 2\n                },\n                store2: {\n                    x: 4\n                }\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.storeA.store1.dispatch('INCR');\n        assert.equal(test.storeA.store1.x, 3);\n        assert.equal(test.storeA.store2.x, 4);\n        assert.equal(test.storeB.store1.x, 2);\n        assert.equal(test.storeB.store2.x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'storeA/store1/INCR' ]);\n    });\n\n    it('Store with nested state - action dispatched to sub-store inside an array should pass through parent middleware', () => {\n\n        @Store\n        class MainStore {\n            @State.byRefArray(TestStore) stores;\n        }\n\n        var original = {\n            stores: [\n                {\n                    x: 2\n                },\n                {\n                    x: 4\n                }\n            ]\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        // Substore should reference parent:\n        assert.equal(test.stores.at(0).getParentStore(), test);\n        assert.equal(test.stores.at(1).getParentStore(), test);\n\n        test.stores.at(0).dispatch('INCR');\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'stores:0/INCR' ]);\n    });\n\n    it('Store with nested state - action dispatched to sub-store inside an map should pass through parent middleware', () => {\n\n        @Store\n        class MainStore {\n            @State.byRefMap(TestStore) stores;\n        }\n\n        var original = {\n            stores: {\n                store1: {\n                    x: 2\n                },\n                store2: {\n                    x: 4\n                }\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        // Substore should reference parent:\n        assert.equal(test.stores.get('store1').getParentStore(), test);\n        assert.equal(test.stores.get('store2').getParentStore(), test);\n\n        test.stores.get('store1').dispatch('INCR');\n        assert.equal(test.stores.get('store1').x, 3);\n        assert.equal(test.stores.get('store2').x, 4);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'stores:store1/INCR' ]);\n    });\n\n    it('Store with nested state - can replace sub-store - only new one should get updates', () => {\n\n        var removedStore;\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store1;\n            @State.byRef(TestStore) store2;\n\n            @Action SWAP() {\n                removedStore = this.store2;\n                var newStore = new TestStore;\n                newStore.x = 10;\n                this.store2 = newStore;\n            }\n        }\n\n        var original = {\n            store1: {\n                x: 2\n            },\n            store2: {\n                x: 4\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        // Substore should reference parent:\n        assert.equal(test.store1.getParentStore(), test);\n        assert.equal(test.store2.getParentStore(), test);\n\n        test.dispatch('SWAP');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.store1.x, 2);\n        assert.equal(test.store2.x, 10);\n\n        // Removed store should no longer reference parent:\n        assert.equal(removedStore.getParentStore(), undefined);\n        assert.equal(test.store1.getParentStore(), test);\n        assert.equal(test.store2.getParentStore(), test);\n\n        test.dispatch('INCR');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.store2.x, 11);\n\n        removedStore.dispatch('INCR');\n        assert.equal(removedStore.x, 5);\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.store2.x, 11);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'SWAP', 'INCR' ]);\n    });\n\n    it('Store with nested state - can remove sub-store from an array and add a new one - only new one should get updates', () => {\n\n        var removedStore;\n\n        @Store\n        class MainStore {\n            @State.byRefArray(TestStore) stores;\n\n            @Action SWAP() {\n                removedStore = this.stores.pop();\n                var newStore = new TestStore;\n                newStore.x = 10;\n                this.stores.push(newStore);\n            }\n        }\n\n        var original = {\n            stores: [\n                {\n                    x: 2\n                },\n                {\n                    x: 4\n                }\n            ]\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('SWAP');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 2);\n        assert.equal(test.stores.at(1).x, 10);\n\n        test.dispatch('INCR');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        removedStore.dispatch('INCR');\n        assert.equal(removedStore.x, 5);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'SWAP', 'INCR' ]);\n    });\n\n    it('Store with nested state - can remove sub-store from an array by changing length, and add a new one - only new one should get updates', () => {\n\n        var removedStore;\n\n        @Store\n        class MainStore {\n            @State.byRefArray(TestStore) stores;\n\n            @Action SWAP() {\n                removedStore = this.stores.at(this.stores.length - 1);\n                this.stores.length--; // Should remove the last element by shrinking the length\n                var newStore = new TestStore;\n                newStore.x = 10;\n                this.stores.push(newStore);\n            }\n        }\n\n        var original = {\n            stores: [\n                {\n                    x: 2\n                },\n                {\n                    x: 4\n                }\n            ]\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('SWAP');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 2);\n        assert.equal(test.stores.at(1).x, 10);\n\n        test.dispatch('INCR');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        removedStore.dispatch('INCR');\n        assert.equal(removedStore.x, 5);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'SWAP', 'INCR' ]);\n    });\n\n    it('Store with nested state - can replace sub-store in an array - only new one should get updates', () => {\n\n        var removedStore;\n\n        @Store\n        class MainStore {\n            @State.byRefArray(TestStore) stores;\n\n            @Action SWAP() {\n                removedStore = this.stores.at(1);\n                var newStore = new TestStore;\n                newStore.x = 10;\n                this.stores.setAt(1, newStore);\n            }\n        }\n\n        var original = {\n            stores: [\n                {\n                    x: 2\n                },\n                {\n                    x: 4\n                }\n            ]\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('SWAP');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 2);\n        assert.equal(test.stores.at(1).x, 10);\n\n        test.dispatch('INCR');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        removedStore.dispatch('INCR');\n        assert.equal(removedStore.x, 5);\n        assert.equal(test.stores.at(0).x, 3);\n        assert.equal(test.stores.at(1).x, 11);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'SWAP', 'INCR' ]);\n    });\n\n    it('Store with nested state - can remove sub-store from a map and add a new one - only new one should get updates', () => {\n\n        var removedStore;\n\n        @Store\n        class MainStore {\n            @State.byRefMap(TestStore) stores;\n\n            @Action SWAP() {\n                removedStore = this.stores.get('store2');\n                var newStore = new TestStore;\n                newStore.x = 10;\n                this.stores.set('store2', newStore);\n            }\n        }\n\n        var original = {\n            stores: {\n                store1: {\n                    x: 2\n                },\n                store2: {\n                    x: 4\n                }\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('SWAP');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.get('store1').x, 2);\n        assert.equal(test.stores.get('store2').x, 10);\n\n        test.dispatch('INCR');\n        assert.equal(removedStore.x, 4);\n        assert.equal(test.stores.get('store1').x, 3);\n        assert.equal(test.stores.get('store2').x, 11);\n\n        removedStore.dispatch('INCR');\n        assert.equal(removedStore.x, 5);\n        assert.equal(test.stores.get('store1').x, 3);\n        assert.equal(test.stores.get('store2').x, 11);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'SWAP', 'INCR' ]);\n    });\n\n    it('Store with double-nested state - action dispatched to sub-store should pass through parent middleware', () => {\n\n        @Store\n        class IntermediateStore {\n            @State.byRef(TestStore) store2;\n            @State.byRef(TestStore) store3;\n        }\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store1;\n            @State.byRef(IntermediateStore) intermediate;\n        }\n\n        var original = {\n            store1: {\n                x: 2\n            },\n            intermediate: {\n                store2: {\n                    x: 4\n                },\n                store3: {\n                    x: 6\n                }\n            }\n        };\n\n        var middleware = Utils.getMiddleware();\n        var test = new MainStore(original, middleware.fn);\n        middleware.store = test;\n\n        test.dispatch('INCR');\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.intermediate.store2.x, 5);\n        assert.equal(test.intermediate.store3.x, 7);\n\n        test.intermediate.dispatch('INCR');\n        assert.equal(test.store1.x, 3);\n        assert.equal(test.intermediate.store2.x, 6);\n        assert.equal(test.intermediate.store3.x, 8);\n\n        assert.deepEqual(middleware.actions, [ ActionDispatcher.INIT_ACTION, 'INCR', 'intermediate/INCR' ]);\n    });\n\n    it('Store with array - test unshift, shift, splice, fill, reverse, sort', () => {\n\n        @Store\n        class MainStore {\n            @State.byRefArray(TestStore) stores;\n\n            @Action UNSHIFT() {\n                var oldLength = this.stores.length;\n                this.stores.unshift(new TestStore, new TestStore);\n                assert.equal(this.stores.length, oldLength + 2);\n            }\n\n            @Action SHIFT() {\n                var oldLength = this.stores.length;\n                var oldItem = this.stores.at(0);\n                var item = this.stores.shift();\n                assert.equal(this.stores.length, oldLength - 1);\n                assert.equal(item, oldItem);\n            }\n\n            @Action SPLICE() {\n                var oldLength = this.stores.length;\n                var oldItem = this.stores.at(oldLength - 1);\n                var items = this.stores.splice(oldLength - 1, 1, new TestStore, new TestStore);\n                assert.equal(this.stores.length, oldLength + 1);\n                assert.equal(items.at(0), oldItem);\n            }\n\n            @Action FILL() {\n                var oldLength = this.stores.length;\n                this.stores.fill(new TestStore);\n                assert.equal(this.stores.length, oldLength);\n            }\n\n            @Action REVERSE() {\n                var oldLength = this.stores.length;\n                this.stores.reverse();\n                assert.equal(this.stores.length, oldLength);\n            }\n\n            @Action SORT() {\n                var oldLength = this.stores.length;\n                this.stores.sort(() => -1);\n                assert.equal(this.stores.length, oldLength);\n            }\n\n            @Action SWAP_ITEMS() {\n                this.stores.swapItems([ new TestStore ]);\n                assert.equal(this.stores.length, 1);\n            }\n        }\n\n        var original = {\n            stores: []\n        };\n\n        var test = new MainStore(original);\n        test.dispatch('UNSHIFT');\n        test.dispatch('SHIFT');\n        test.dispatch('SPLICE');\n        test.dispatch('FILL');\n        test.dispatch('REVERSE');\n        test.dispatch('SORT');\n        test.dispatch('SWAP_ITEMS');\n    });\n\n    it('Store with map - test delete, clear', () => {\n\n        @Store\n        class MainStore {\n            @State.byRefMap(TestStore) stores;\n\n            @Action DELETE() {\n                this.stores.delete('store1');\n                assert.deepEqual(Array.from(this.stores.keys()), [ 'store2', 'store3' ]);\n            }\n\n            @Action CLEAR() {\n                this.stores.clear();\n                assert.deepEqual(Array.from(this.stores.keys()), [ ]);\n            }\n        }\n\n        var original = {\n            stores: {\n                store1: {\n                    x: 2\n                },\n                store2: {\n                    x: 2\n                },\n                store3: {\n                    x: 2\n                }\n            }\n        };\n\n        var test = new MainStore(original);\n        test.dispatch('DELETE');\n        test.dispatch('CLEAR');\n    });\n\n    it('Can\\'t store the same store in more than one store', () => {\n\n        @Store\n        class MainStore {\n            @State.byRef(TestStore) store;\n\n            @Action SET_STORE(store) {\n                this.store = store;\n            }\n        }\n\n        var test1 = new MainStore({});\n        var test2 = new MainStore({});\n        var item = new TestStore({});\n\n        test1.dispatch('SET_STORE', item);\n\n        Utils.assertError(() => test2.dispatch('SET_STORE', item), 'The store you\\'re attempting to assign to \"store\" already belongs to another store. The store hierarchy must be a tree.');\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/StoreTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 972,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "access": null,
    "description": "Tests",
    "lineNumber": 47
  },
  {
    "__docId__": 973,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it137",
    "access": null,
    "description": "Basic store - can import and export",
    "lineNumber": 49
  },
  {
    "__docId__": 974,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it138",
    "access": null,
    "description": "Basic store - can initialise from JSON, and dispatch unknown action",
    "lineNumber": 60
  },
  {
    "__docId__": 975,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it139",
    "access": null,
    "description": "Basic store - action must be a string",
    "lineNumber": 71
  },
  {
    "__docId__": 976,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it140",
    "access": null,
    "description": "Store with simple state and basic action - only dispatching will update state",
    "lineNumber": 83
  },
  {
    "__docId__": 977,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it141",
    "access": null,
    "description": "Store with action that creates another store from JSON",
    "lineNumber": 107
  },
  {
    "__docId__": 978,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it142",
    "access": null,
    "description": "Store with action that takes multiple arguments",
    "lineNumber": 132
  },
  {
    "__docId__": 979,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it143",
    "access": null,
    "description": "Store with nested state - dispatched actions should propagate",
    "lineNumber": 154
  },
  {
    "__docId__": 980,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it144",
    "access": null,
    "description": "Store with nested state - dispatched actions should not propagate if parent handler marked as propagate:false",
    "lineNumber": 198
  },
  {
    "__docId__": 981,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it145",
    "access": null,
    "description": "Store with nested state - dispatched actions should not propagate if parent handler returns a value",
    "lineNumber": 230
  },
  {
    "__docId__": 982,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it146",
    "access": null,
    "description": "Store with nested state - action dispatched to sub-store should pass through parent middleware",
    "lineNumber": 264
  },
  {
    "__docId__": 983,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it147",
    "access": null,
    "description": "Store with nested state - action that dispatches another action to sub-store should only pass through parent middleware once",
    "lineNumber": 292
  },
  {
    "__docId__": 984,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it148",
    "access": null,
    "description": "Store with double-nested state - action dispatched to sub-store should pass through parent middleware",
    "lineNumber": 324
  },
  {
    "__docId__": 985,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it149",
    "access": null,
    "description": "Store with nested state - action dispatched to sub-store inside an array should pass through parent middleware",
    "lineNumber": 370
  },
  {
    "__docId__": 986,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it150",
    "access": null,
    "description": "Store with nested state - action dispatched to sub-store inside an map should pass through parent middleware",
    "lineNumber": 403
  },
  {
    "__docId__": 987,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it151",
    "access": null,
    "description": "Store with nested state - can replace sub-store - only new one should get updates",
    "lineNumber": 436
  },
  {
    "__docId__": 988,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it152",
    "access": null,
    "description": "Store with nested state - can remove sub-store from an array and add a new one - only new one should get updates",
    "lineNumber": 493
  },
  {
    "__docId__": 989,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it153",
    "access": null,
    "description": "Store with nested state - can remove sub-store from an array by changing length, and add a new one - only new one should get updates",
    "lineNumber": 542
  },
  {
    "__docId__": 990,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it154",
    "access": null,
    "description": "Store with nested state - can replace sub-store in an array - only new one should get updates",
    "lineNumber": 592
  },
  {
    "__docId__": 991,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it155",
    "access": null,
    "description": "Store with nested state - can remove sub-store from a map and add a new one - only new one should get updates",
    "lineNumber": 641
  },
  {
    "__docId__": 992,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it156",
    "access": null,
    "description": "Store with double-nested state - action dispatched to sub-store should pass through parent middleware",
    "lineNumber": 690
  },
  {
    "__docId__": 993,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it157",
    "access": null,
    "description": "Store with array - test unshift, shift, splice, fill, reverse, sort",
    "lineNumber": 735
  },
  {
    "__docId__": 994,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it158",
    "access": null,
    "description": "Store with map - test delete, clear",
    "lineNumber": 801
  },
  {
    "__docId__": 995,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "@twist/core/test/decorators/StoreTest.jsx~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/StoreTest.jsx~describe136.it159",
    "access": null,
    "description": "Can't store the same store in more than one store",
    "lineNumber": 837
  },
  {
    "__docId__": 996,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/TaskTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport rAF from '../../src/internal/queue/rAF';\n\ndescribe('@Task decorator', () => {\n\n    it('sanity check', () => {\n        let spy = sinon.spy();\n        class C {\n            @Task\n            foo() {\n                spy();\n            }\n        }\n\n        let c = new C();\n        c.foo();\n        assert(spy.notCalled);\n        rAF.tick();\n        assert(spy.called);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/TaskTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 997,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "@twist/core/test/decorators/TaskTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/TaskTest.jsx~describe160",
    "access": null,
    "description": "@Task decorator",
    "lineNumber": 20
  },
  {
    "__docId__": 998,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "@twist/core/test/decorators/TaskTest.jsx~describe160",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/TaskTest.jsx~describe160.it161",
    "access": null,
    "description": "sanity check",
    "lineNumber": 22
  },
  {
    "__docId__": 999,
    "kind": "testFile",
    "name": "@twist/core/test/decorators/ThrottleTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\n\ndescribe('@Throttle decorator', () => {\n\n    it('sanity check', () => {\n\n        let called = 0;\n\n        class C {\n            @Throttle(100)\n            method() {\n                called++;\n            }\n        }\n\n        let c = new C();\n        c.method();\n        c.method();\n        c.method();\n\n        assert.equal(called, 1);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/decorators/ThrottleTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1000,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "@twist/core/test/decorators/ThrottleTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/decorators/ThrottleTest.jsx~describe162",
    "access": null,
    "description": "@Throttle decorator",
    "lineNumber": 18
  },
  {
    "__docId__": 1001,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "@twist/core/test/decorators/ThrottleTest.jsx~describe162",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/decorators/ThrottleTest.jsx~describe162.it163",
    "access": null,
    "description": "sanity check",
    "lineNumber": 20
  },
  {
    "__docId__": 1002,
    "kind": "testFile",
    "name": "@twist/core/test/middleware/CustomMiddlewareTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\n\ndescribe('Custom Middleware', () => {\n\n    it('Can supply custom middleware, to transform an action', () => {\n\n        var customMiddleware = function(store, action, payload, next) {\n            if (action === 'INCR') {\n                next('ADD', 1);\n            }\n            else {\n                next();\n            }\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action ADD(n) {\n                this.x += n;\n            }\n        }\n\n        var test = new TestStore({ x: 2 }, customMiddleware);\n\n        test.dispatch('ADD', 5);\n        assert.equal(test.x, 7);\n\n        test.dispatch('INCR');\n        assert.equal(test.x, 8);\n\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/middleware/CustomMiddlewareTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1003,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "@twist/core/test/middleware/CustomMiddlewareTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/middleware/CustomMiddlewareTest.jsx~describe164",
    "access": null,
    "description": "Custom Middleware",
    "lineNumber": 18
  },
  {
    "__docId__": 1004,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "@twist/core/test/middleware/CustomMiddlewareTest.jsx~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/CustomMiddlewareTest.jsx~describe164.it165",
    "access": null,
    "description": "Can supply custom middleware, to transform an action",
    "lineNumber": 20
  },
  {
    "__docId__": 1005,
    "kind": "testFile",
    "name": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport Utils from '../Utils';\n\nimport { protectorMiddleware } from '@twist/core';\n\ndescribe('Protector Middleware', () => {\n\n    it('@Action cannot perform asynchronous operations (promises, timeout etc), when protector middleware is enabled', () => {\n\n        @Store\n        class TestClass {\n            @State.byVal y;\n\n            @Action P1() {\n                return new window.Promise(resolve => resolve()).then(() => this.y = 1);\n            }\n            @Action P2() {\n                return Promise.resolve(2).then(() => this.y = 1);\n            }\n            @Action P3() {\n                return Promise.reject(2).then(() => this.y = 1);\n            }\n            @Action P4() {\n                return Promise.all([]).then(() => this.y = 1);\n            }\n            @Action P5() {\n                return Promise.race().then(() => this.y = 1);\n            }\n\n            @Action T() {\n                setTimeout(() => this.y = 1);\n            }\n\n            @Action I() {\n                setInterval(() => this.y = 1);\n            }\n        }\n\n        var test = new TestClass({}, protectorMiddleware);\n\n        Utils.assertError(() => test.dispatch('P1'), 'Calling new Promise() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('P2'), 'Calling Promise.resolve() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('P3'), 'Calling Promise.reject() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('P4'), 'Calling Promise.all() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('P5'), 'Calling Promise.race() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('T'), 'Calling setTimeout() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n        Utils.assertError(() => test.dispatch('I'), 'Calling setInterval() from a synchronous action is not allowed. Please use an asynchronous action for this: @Action({async: true})');\n\n        assert.equal(test.y, undefined);\n    });\n\n    it('Asynchronous @Action can perform asynchronous operations (promises, timeout etc), when protector middleware is enabled', (done) => {\n\n        @Store\n        class TestClass {\n            @State.byVal y;\n\n            @Action SET(val) {\n                this.y = val;\n            }\n\n            @Action({ async:true }) P1() {\n                return new window.Promise(() => undefined);\n            }\n            @Action({ async:true }) P2() {\n                return Promise.resolve(2);\n            }\n            @Action({ async:true }) P3() {\n                return Promise.reject(2);\n            }\n            @Action({ async:true }) P4() {\n                return Promise.all([]);\n            }\n            @Action({ async:true }) P5() {\n                return Promise.race();\n            }\n\n            @Action({ async:true }) T() {\n                setTimeout(() => this.dispatch('SET', 1));\n            }\n\n            @Action({ async:true }) I() {\n                var test = () => this.dispatch('SET', 2);\n                setInterval(test, 1000);\n                clearInterval(test);\n            }\n        }\n\n        var test = new TestClass({}, protectorMiddleware);\n\n        test.dispatch('P1');\n        test.dispatch('P2');\n        test.dispatch('P3');\n        test.dispatch('P4');\n        test.dispatch('P5');\n        test.dispatch('T');\n        test.dispatch('I');\n\n        assert.equal(test.y, undefined);\n\n        setTimeout(() => {\n            assert.equal(test.y, 1);\n            done();\n        });\n    });\n\n    it('Asynchronous @Action in a nested store can perform asynchronous operations (promises, timeout etc), when protector middleware is enabled', (done) => {\n\n        @Store\n        class TestClass {\n            @State.byVal y;\n\n            @Action SET(val) {\n                this.y = val;\n            }\n\n            @Action({ async:true }) T() {\n                setTimeout(() => this.dispatch('SET', 1));\n            }\n        }\n\n        @Store\n        class TestParent {\n            @State.byRef(TestClass) child;\n        }\n\n        var test = new TestParent({}, protectorMiddleware);\n\n        test.child.dispatch('T');\n\n        assert.equal(test.child.y, undefined);\n\n        setTimeout(() => {\n            assert.equal(test.child.y, 1);\n            done();\n        });\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/middleware/ProtectorMiddlewareTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1006,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166",
    "access": null,
    "description": "Protector Middleware",
    "lineNumber": 21
  },
  {
    "__docId__": 1007,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166.it167",
    "access": null,
    "description": "@Action cannot perform asynchronous operations (promises, timeout etc), when protector middleware is enabled",
    "lineNumber": 23
  },
  {
    "__docId__": 1008,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166.it168",
    "access": null,
    "description": "Asynchronous @Action can perform asynchronous operations (promises, timeout etc), when protector middleware is enabled",
    "lineNumber": 67
  },
  {
    "__docId__": 1009,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ProtectorMiddlewareTest.jsx~describe166.it169",
    "access": null,
    "description": "Asynchronous @Action in a nested store can perform asynchronous operations (promises, timeout etc), when protector middleware is enabled",
    "lineNumber": 122
  },
  {
    "__docId__": 1010,
    "kind": "testFile",
    "name": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\n\nimport { remoteDevMiddleware } from '@twist/core';\n\n/**\n    Mocking the devtools interface\n**/\n\nclass DevTools {\n    init() {\n\n    }\n\n    subscribe() {\n\n    }\n\n    unsubscribe() {\n\n    }\n\n    send() {\n\n    }\n}\n\nclass DevToolsInterface {\n    static connected = false;\n\n    static connect() {\n        DevToolsInterface.connected = true;\n        return new DevTools();\n    }\n\n    static disconnect() {\n        DevToolsInterface.connected = false;\n    }\n}\n\n/**\n    Tests\n**/\n\n@Store\nclass TestStore {\n    @State.byVal x;\n\n    @Action INCR() {\n        this.x++;\n    }\n}\n\ndescribe('Devtools Middleware', () => {\n\n    it('Enable devtools middleware - should give warning if devtools not installed', () => {\n\n        // Make sure it's really not installed\n        window.__REDUX_DEVTOOLS_EXTENSION__ = undefined;\n\n        sinon.spy(console, 'warn');\n\n        new TestStore({ x: 2 }, [ remoteDevMiddleware ]);\n\n        assert(console.warn.calledWith('redux-devtools-extension is not installed. See https://github.com/zalmoxisus/redux-devtools-extension'));\n        console.warn.restore();\n    });\n\n    it('Enable devtools middleware - should connect and disconnect', () => {\n\n        // Make sure it's really not installed\n        window.__REDUX_DEVTOOLS_EXTENSION__ = DevToolsInterface;\n\n        // Can set middleware without an array, if it's just one item\n        var test = new TestStore({ x: 2 }, remoteDevMiddleware);\n\n        assert.equal(DevToolsInterface.connected, true);\n\n        test.dispose();\n        assert.equal(DevToolsInterface.connected, false);\n\n        window.__REDUX_DEVTOOLS_EXTENSION__ = undefined;\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1011,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx~describe170",
    "access": null,
    "description": "Devtools Middleware",
    "lineNumber": 69
  },
  {
    "__docId__": 1012,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx~describe170.it171",
    "access": null,
    "description": "Enable devtools middleware - should give warning if devtools not installed",
    "lineNumber": 71
  },
  {
    "__docId__": 1013,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx~describe170",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/RemoteDevMiddlewareTest.jsx~describe170.it172",
    "access": null,
    "description": "Enable devtools middleware - should connect and disconnect",
    "lineNumber": 84
  },
  {
    "__docId__": 1014,
    "kind": "testFile",
    "name": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx",
    "content": "/*\n *  Copyright 2016 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global it, describe */\n\nimport assert from 'assert';\nimport sinon from 'sinon';\n\nimport { Signal } from '@twist/core';\n\ndescribe('Thunk Middleware', () => {\n\n    it('Thunk middleware should be enabled by default', () => {\n\n        var THUNK_ACTION = function(store) {\n            store.dispatch('INCR');\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR() {\n                this.x++;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        // Check for data binding\n        var changed = false;\n        Signal.on(test, 'x', () => changed = true);\n        assert.equal(test.x, 2);\n\n        test.dispatch(THUNK_ACTION);\n\n        assert(changed, 'value change event was triggered');\n        assert.equal(test.x, 3);\n    });\n\n    it('Can disable Thunk middleware', () => {\n\n        var THUNK_ACTION = function(store) {\n            store.dispatch('INCR');\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR() {\n                this.x++;\n            }\n        }\n\n        var test = new TestStore({ x: 2 }, [], false);\n\n        assert.throws(() => test.dispatch(THUNK_ACTION), Error, 'Action name must be a string');\n    });\n\n    it('Can dispatch thunk middleware to a sub-store', () => {\n\n        var THUNK_ACTION = function(store) {\n            store.dispatch('INCR');\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR() {\n                this.x++;\n            }\n        }\n\n        @Store\n        class ParentStore {\n            @State.byRef(TestStore) test;\n        }\n\n        var test = new ParentStore({ test: { x: 2 } });\n\n        // Check for data binding\n        var changed = false;\n        Signal.on(test.test, 'x', () => changed = true);\n        assert.equal(test.test.x, 2);\n\n        test.test.dispatch(THUNK_ACTION);\n\n        assert(changed, 'value change event was triggered');\n        assert.equal(test.test.x, 3);\n    });\n\n    it('Can dispatch thunk middleware - asynchronous action with setTimeout', done => {\n\n        var THUNK_ACTION = function(store) {\n            setTimeout(() => store.dispatch('INCR'));\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR() {\n                this.x++;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        test.watch(() => test.x, () => {\n            assert.equal(test.x, 3);\n            done();\n        }, true);\n\n        test.dispatch(THUNK_ACTION);\n    });\n\n    it('Can dispatch thunk middleware - asynchronous action with Promises', done => {\n\n        var THUNK_ACTION = function(store, add1, add2) {\n            return Promise.resolve(2)\n                .then(() => new Promise(resolve => resolve(2)))\n                .then(() => store.dispatch('INCR', add1, add2));\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR(add1, add2) {\n                this.x += add1;\n                this.x += add2;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        test.watch(() => test.x, () => {\n            assert.equal(test.x, 5);\n            done();\n        }, true);\n\n        test.dispatch(THUNK_ACTION, 1, 2);\n    });\n\n    it('Can dispatch thunk middleware - asynchronous action with Promises, where action handler returns a promise', done => {\n\n        var THUNK_ACTION = function(store, add1, add2) {\n            return Promise.resolve(2)\n                .then(() => new Promise(resolve => resolve(2)))\n                .then(() => store.dispatch('INCR', add1, add2));\n        };\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action INCR(add1, add2) {\n                this.x += add1;\n                this.x += add2;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        test.dispatch(THUNK_ACTION, 1, 2).then(() => {\n            assert.equal(test.x, 5);\n            done();\n        });\n    });\n\n    it('Can dispatch thunk middleware - asynchronous action with @Action({async: true})', done => {\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action({ async: true }) THUNK_ACTION(add1, add2) {\n                setTimeout(() => this.dispatch('INCR', add1, add2));\n            }\n\n            @Action INCR(add1, add2) {\n                this.x += add1;\n                this.x += add2;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        test.watch(() => test.x, () => {\n            assert.equal(test.x, 5);\n            done();\n        }, true);\n\n        test.dispatch('THUNK_ACTION', 1, 2);\n    });\n\n    it('Can dispatch thunk middleware - asynchronous action with @Action({async: true}), where action handler returns a promise', done => {\n\n        @Store\n        class TestStore {\n            @State.byVal x;\n\n            @Action({ async: true }) THUNK_ACTION(add1, add2) {\n                return Promise.resolve(2)\n                    .then(() => new Promise(resolve => resolve(2)))\n                    .then(() => this.dispatch('INCR', add1, add2));\n            }\n\n            @Action INCR(add1, add2) {\n                this.x += add1;\n                this.x += add2;\n            }\n        }\n\n        var test = new TestStore({ x: 2 });\n\n        test.dispatch('THUNK_ACTION', 1, 2).then(() => {\n            assert.equal(test.x, 5);\n            done();\n        });\n    });\n\n    it('Asynchronous actions can only be dispatched directly - they do not propagate', () => {\n\n        sinon.spy(console, 'warn');\n\n        @Store\n        class NestedStore {\n            @State.byVal x;\n\n            @Action({ async: true }) THUNK_ACTION(add1, add2) {\n                this.dispatch('INCR', add1, add2);\n            }\n\n            @Action INCR(add1, add2) {\n                this.x += add1;\n                this.x += add2;\n            }\n        }\n\n        @Store\n        class ParentStore {\n            @State.byRef(NestedStore) child;\n        }\n\n        var test = new ParentStore({ child: { x: 2 } });\n\n        test.dispatch('THUNK_ACTION', 1, 2);\n        assert.equal(test.child.x, 2, 'Async action should be ignored when the action is propagating');\n\n        assert(console.warn.calledWith('Ignoring an asynchronous handler for action \"THUNK_ACTION\" while propagating. Asynchronous actions can only be dispatched directly to the target store.'));\n\n        test.child.dispatch('THUNK_ACTION', 1, 2);\n        assert.equal(test.child.x, 5, 'Async action should be applied when on the same store we dispatch to');\n\n        test.dispatch('THUNK_ACTION', 1, 2);\n\n        console.warn.restore();\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/core/test/middleware/ThunkMiddlewareTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1015,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "access": null,
    "description": "Thunk Middleware",
    "lineNumber": 21
  },
  {
    "__docId__": 1016,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it174",
    "access": null,
    "description": "Thunk middleware should be enabled by default",
    "lineNumber": 23
  },
  {
    "__docId__": 1017,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it175",
    "access": null,
    "description": "Can disable Thunk middleware",
    "lineNumber": 51
  },
  {
    "__docId__": 1018,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it176",
    "access": null,
    "description": "Can dispatch thunk middleware to a sub-store",
    "lineNumber": 71
  },
  {
    "__docId__": 1019,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it177",
    "access": null,
    "description": "Can dispatch thunk middleware - asynchronous action with setTimeout",
    "lineNumber": 104
  },
  {
    "__docId__": 1020,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it178",
    "access": null,
    "description": "Can dispatch thunk middleware - asynchronous action with Promises",
    "lineNumber": 129
  },
  {
    "__docId__": 1021,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it179",
    "access": null,
    "description": "Can dispatch thunk middleware - asynchronous action with Promises, where action handler returns a promise",
    "lineNumber": 157
  },
  {
    "__docId__": 1022,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it180",
    "access": null,
    "description": "Can dispatch thunk middleware - asynchronous action with @Action({async: true})",
    "lineNumber": 183
  },
  {
    "__docId__": 1023,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it181",
    "access": null,
    "description": "Can dispatch thunk middleware - asynchronous action with @Action({async: true}), where action handler returns a promise",
    "lineNumber": 209
  },
  {
    "__docId__": 1024,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/core/test/middleware/ThunkMiddlewareTest.jsx~describe173.it182",
    "access": null,
    "description": "Asynchronous actions can only be dispatched directly - they do not propagate",
    "lineNumber": 235
  },
  {
    "__docId__": 1025,
    "kind": "testFile",
    "name": "@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { BaseLayoutComponent } from '@twist/virtual-scroller';\n\ndescribe('BaseLayoutComponent', () => {\n\n    it('should have correct layout position', () => {\n        let vitem = new BaseLayoutComponent({});\n        vitem.left = 50;\n        vitem.top = 20;\n        vitem.width = 100;\n        vitem.height = 200;\n        assert.equal(vitem.right, vitem.left + vitem.width);\n        assert.equal(vitem.bottom, vitem.top + vitem.height);\n        assert.deepEqual(vitem.toJSON(), {\n            name: 'BaseLayoutComponent',\n            viewName: undefined,\n            left: 50,\n            top: 20,\n            width: 100,\n            height: 200,\n            children: []\n        });\n\n        assert.equal(vitem.inViewport({ left: 0, right: 100, top: 0, bottom: 100 }), true);\n        assert.equal(vitem.inViewport({ left: 200, right: 300, top: 0, bottom: 100 }), false);\n\n        vitem.updatePosition(10, 10);\n        assert.equal(vitem.left, 60);\n        assert.equal(vitem.top, 30);\n\n        assert.equal(vitem.needsLayout(100, 110), true);\n        vitem.updateLayout(100, 110);\n\n        assert.equal(vitem.width, 100);\n        assert.equal(vitem.height, 110);\n        assert.equal(vitem.needsLayout(100, 110), false);\n\n        vitem.layout(0, 0, 10, 20);\n        assert.equal(vitem.left, 0);\n        assert.equal(vitem.top, 0);\n        assert.equal(vitem.width, 10);\n        assert.equal(vitem.height, 20);\n\n        assert.equal(BaseLayoutComponent.view, undefined);\n    });\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1026,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx~describe183",
    "access": null,
    "description": "BaseLayoutComponent",
    "lineNumber": 19
  },
  {
    "__docId__": 1027,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx~describe183",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/virtual-scroller/test/layout/BaseLayoutComponentTest.jsx~describe183.it184",
    "access": null,
    "description": "should have correct layout position",
    "lineNumber": 21
  },
  {
    "__docId__": 1028,
    "kind": "testFile",
    "name": "@twist/virtual-scroller/test/layout/GridLayoutTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport { VerticalGridLayout } from '@twist/virtual-scroller';\n\ndescribe('GridLayout', () => {\n    \n    it('layout', () => {\n        let item = new VerticalGridLayout({});\n\n        item.updateLayout(50, 50);\n        assert.equal(item.width, 50);\n    });\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/test/layout/GridLayoutTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1029,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "@twist/virtual-scroller/test/layout/GridLayoutTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/virtual-scroller/test/layout/GridLayoutTest.jsx~describe185",
    "access": null,
    "description": "GridLayout",
    "lineNumber": 19
  },
  {
    "__docId__": 1030,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "@twist/virtual-scroller/test/layout/GridLayoutTest.jsx~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/virtual-scroller/test/layout/GridLayoutTest.jsx~describe185.it186",
    "access": null,
    "description": "layout",
    "lineNumber": 21
  },
  {
    "__docId__": 1031,
    "kind": "testFile",
    "name": "@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx",
    "content": "/*\n *  Copyright 2017 Adobe Systems Incorporated. All rights reserved.\n *  This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License. You may obtain a copy\n *  of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software distributed under\n *  the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n *  OF ANY KIND, either express or implied. See the License for the specific language\n *  governing permissions and limitations under the License.\n *\n */\n\n/* global describe it */\n\nimport assert from 'assert';\nimport FakeTime from './FakeTime';\n\ndescribe('FakeTime', () => {\n    it('fakes the time', () => {\n        let originalDateTime = Date.now();\n        let originalPerformanceTime = performance.now();\n\n        let t = new FakeTime();\n        assert.equal(Date.now(), 0);\n\n        t.set(10);\n        assert.equal(Date.now(), 10);\n        assert.equal(performance.now(), 10);\n\n        t.increment(1);\n        assert.equal(Date.now(), 11);\n        assert.equal(performance.now(), 11);\n\n        t.dispose();\n        assert(Date.now() >= originalDateTime);\n        assert(performance.now() >= originalPerformanceTime);\n    });\n\n});\n",
    "static": true,
    "longname": "/Users/shotts/Documents/repos/twist/twist-site/twist-site/node_modules/@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1032,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx",
    "testDepth": 0,
    "static": true,
    "longname": "@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx~describe187",
    "access": null,
    "description": "FakeTime",
    "lineNumber": 19
  },
  {
    "__docId__": 1033,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "@twist/virtual-scroller/test/mocks/FakeTimeTest.jsx~describe187.it188",
    "access": null,
    "description": "fakes the time",
    "lineNumber": 20
  }
]